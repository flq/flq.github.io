<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Realfiction]]></title><description><![CDATA[Content from Frank Quednau about dev and fields of interest.]]></description><link>https://realfiction.net</link><generator>RSS for Node</generator><lastBuildDate>Sun, 27 Jan 2019 18:59:19 GMT</lastBuildDate><item><title><![CDATA[I'm a Chrome-using frontend dev, but want to use Firefox more]]></title><description><![CDATA[You like to use Chrome, and you value the in-built development aids. However, you feel increasingly uneasy about the market dominance of…]]></description><link>https://realfiction.net/2019/01/27/im-a-chrome-using-frontend-dev-but-want-to-use-firefox-more</link><guid isPermaLink="false">https://realfiction.net/2019/01/27/im-a-chrome-using-frontend-dev-but-want-to-use-firefox-more</guid><pubDate>Sun, 27 Jan 2019 15:00:00 GMT</pubDate><content:encoded>&lt;p&gt;You like to use Chrome, and you value the in-built development aids. However, you feel increasingly uneasy about the market dominance of Chrome as the portal to the web. You&apos;d like to give Firefox a chance, but are uncertain if some general and dev-related features will be available on Firefox. This list is geared towards the team I&apos;m working in, but maybe others will find it useful, too.&lt;/p&gt;
&lt;h4&gt;I sync stuff across a plentitude of devices&lt;/h4&gt;
&lt;p&gt;Firefox has &lt;a href=&quot;https://www.mozilla.org/en-US/firefox/accounts/&quot;&gt;a syncing service&lt;/a&gt;. I use it to sync, my home and work laptop alongside my phone and iPad. According to this, the people at Firefox &lt;a href=&quot;https://hacks.mozilla.org/2018/11/firefox-sync-privacy/&quot;&gt;only ever see your data encrypted&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;I still search through Google, what the heck!&lt;/h4&gt;
&lt;p&gt;Yes it&apos;s true, &lt;a href=&quot;https://www.cnet.com/news/google-firefox-search-deal-gives-mozilla-more-money-to-push-privacy/&quot;&gt;Mozilla gets money from Google&lt;/a&gt; since they do generate search traffic towards them. At least, it&apos;s pretty easy to switch the default search engine (under &lt;strong&gt;about:preferences#search&lt;/strong&gt;). You can give &lt;a href=&quot;https://duckduckgo.com&quot;&gt;DuckDuckGo&lt;/a&gt; a try.&lt;/p&gt;
&lt;h4&gt;When I develop, I impersonate a number of accounts. On Chrome I use profiles for that. What do I do in Firefox?&lt;/h4&gt;
&lt;p&gt;Firefox has a profiles feature, too! The easiest is to enter &lt;strong&gt;about:profiles&lt;/strong&gt; in the url input ( &lt;kbd&gt;Ctrl&lt;/kbd&gt; + &lt;kbd&gt;L&lt;/kbd&gt; ).&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/about_profiles.png&quot; alt=&quot;firefox location bar&quot;&gt;&lt;/p&gt;
&lt;p&gt;Here you can manage profiles you define, and, most importantly, let several ones run in parallel. You can also start firefox in a specific profile with &lt;kbd&gt;Win&lt;/kbd&gt; + &lt;kbd&gt;R&lt;/kbd&gt; and then &lt;code class=&quot;language-text&quot;&gt;firefox.exe -P profilename&lt;/code&gt;. Unfortunately this only works if Firefox is not running. If you want several parallel sessions, you&apos;ll go through the location bar as described.&lt;/p&gt;
&lt;h4&gt;What about devtools?&lt;/h4&gt;
&lt;p&gt;Firefox has &lt;em&gt;plenty&lt;/em&gt; of devtools that also come up with &lt;kbd&gt;F12&lt;/kbd&gt;, here just quickly those that we use a lot:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;mobile view can be switched on the very right
&lt;img src=&quot;/assets/firefox-mobileview.png&quot; alt=&quot;firefox location bar&quot;&gt;&lt;/li&gt;
&lt;li&gt;Modify css and layout, look at the computed fields (also mapped down to the causing source code if map files are present)&lt;/li&gt;
&lt;li&gt;Sources are found under &lt;em&gt;Debugger&lt;/em&gt;, with map files, also use &lt;kbd&gt;Ctrl&lt;/kbd&gt; + &lt;kbd&gt;P&lt;/kbd&gt; to locate a file.&lt;/li&gt;
&lt;li&gt;The &lt;em&gt;network analysis&lt;/em&gt; tab allows you to toggle the cache and throttle the network. For some crazy reason &lt;strong&gt;you cannot turn off the network&lt;/strong&gt;, only very clumsily by going into offline mode, which affects the whol browser session. Looking for a good solution here!&lt;/li&gt;
&lt;li&gt;React and Redux devtools are also available and look and behave pretty much the same way as in Chrome.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Give it a shot. If anything, you can have Chrome and Firefox in parallel, who knows, you might even like the new Firefox!&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Stuff we like: Great Chocolate!]]></title><description><![CDATA[Here's a great company in Switzerland that sells lovely chocolate: Cioccolateria Casa Nobile If you like chocolate, do yourself a favor and…]]></description><link>https://realfiction.net/2019/01/13/stuff-we-like-great-chocolate</link><guid isPermaLink="false">https://realfiction.net/2019/01/13/stuff-we-like-great-chocolate</guid><pubDate>Sun, 13 Jan 2019 15:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Here&apos;s a great company in Switzerland that sells lovely chocolate:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.casa-nobile.ch/cioccolateria/&quot;&gt;Cioccolateria Casa Nobile&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://www.casa-nobile.ch/wp-content/uploads/2015/03/Ostervernissage-2016-6085.jpg&quot; alt=&quot;The local outlet&quot;&gt;&lt;/p&gt;
&lt;p&gt;If you like chocolate, do yourself a favor and get some from those people.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Clumsy steps towards writing again]]></title><description><![CDATA[Why all the work ?  Why switching to a new site generator?  Is it all just an elaborate strategy for some cultivated procrastination?  This…]]></description><link>https://realfiction.net/2019/01/03/clumsy-steps-towards-writing-again</link><guid isPermaLink="false">https://realfiction.net/2019/01/03/clumsy-steps-towards-writing-again</guid><pubDate>Thu, 03 Jan 2019 15:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;em&gt;Why all the work&lt;/em&gt;? &lt;/p&gt;
&lt;p&gt;Why switching to a new site generator? &lt;/p&gt;
&lt;p&gt;Is it all just an elaborate strategy for some cultivated procrastination? &lt;/p&gt;
&lt;p&gt;This is the amount of posts that I&apos;ve written since 2004.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/posts-over-years.png&quot; alt=&quot;posts per year&quot;&gt;&lt;/p&gt;
&lt;p&gt;I was considering doing some spin doctoring on how things are going downhill, and maybe &lt;em&gt;they are&lt;/em&gt;! &lt;/p&gt;
&lt;p&gt;One side-effect of crossing my &lt;strong&gt;30ies&lt;/strong&gt; and then my &lt;strong&gt;40ies&lt;/strong&gt; is that I think a lot more about where to put my energy. There is my family, and there is responsibility. There is very focused product development and then there is that thing that I&apos;ve written a lot about programming in the previous years, but these days it is &lt;em&gt;also&lt;/em&gt; interesting to think about different things - about how software is developed, and on a grander scale, about where we as a whole are going. &lt;/p&gt;
&lt;p&gt;In terms of developing a product, the technical side of things isn&apos;t incredibly exciting (or maybe we like to keep it that way) - boring decisions and simple programming is a &lt;strong&gt;good thing&lt;/strong&gt; these days. I am not striving for the latest and greatest. I want code to look simple, and boring. If I search for an item, I want to find all occurrences of it. If I have to choose between boilerplate and magic, these days I&apos;d go for boilerplate (unless it gets tedious, but it has to get tedious &lt;em&gt;first&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;Also, development is not about the tech, it is about people. &lt;em&gt;People&lt;/em&gt; write the code, &lt;em&gt;people&lt;/em&gt; read the code, &lt;em&gt;people&lt;/em&gt; maintain the code. This is hardly interesting material and a lot has been written about it. It&apos;s probably a thing about maturity.&lt;/p&gt;
&lt;p&gt;I like to compare this journey to the journey of a musician.  You spend many years honing your skills. You want to play fast, clear, crisp, you learn the mechanics, you play &lt;em&gt;dense&lt;/em&gt;, you &lt;em&gt;go for it&lt;/em&gt;. With maturity comes a renewed sense for what those skills are actually there for. To have a way to communicate the value, the music, to your audience. With this, you reduce your output to that &lt;em&gt;which matters&lt;/em&gt;. Less dense, but providing breathing room. Communicating, seemingly effortless, the worth of your music. Or, as a developer, using your skills, not for the sake of satisfying your puzzle-solving addiction, but for improving the value of those using your software.&lt;/p&gt;
&lt;h4&gt;Am I done? through?&lt;/h4&gt;
&lt;p&gt;I hope not. The questions that go though my mind are ...&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How do you scale a small, professional team to a bigger, still professional team?&lt;/li&gt;
&lt;li&gt;How can you play out the individual strengths of people while maintaining a team effort?&lt;/li&gt;
&lt;li&gt;How can you make sure that you deliver on value and not on something else that is irrelevant or not yet relevant with a limited set of resources?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And then there are the things beyond my work bubble that are currently dominating my mind...&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How can a single child learn best about empathy?&lt;/li&gt;
&lt;li&gt;With what can we replace capitalism?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Between all those things I hope that I&apos;ll get down to writing a little bit (more) again.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[From Jekyll to Gatsby]]></title><description><![CDATA[Without much fanfare my  gatsbyjs -based website is now live. It is also a static website generator, however, it's based on javascript and…]]></description><link>https://realfiction.net/2018/12/30/from-jekyll-to-gatsby</link><guid isPermaLink="false">https://realfiction.net/2018/12/30/from-jekyll-to-gatsby</guid><pubDate>Sun, 30 Dec 2018 20:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Without much fanfare my &lt;a href=&quot;https://www.gatsbyjs.org&quot;&gt;gatsbyjs&lt;/a&gt;-based website is now live. It is also a static website generator, however, it&apos;s based on javascript and react. Since I&apos;m a lot closer to that tech than to ruby (the underlying tech of &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;jekyll&lt;/a&gt;) and I want it easy, this seemed like a nice choice. The regeneration speed while working on the site is blazing fast, so that&apos;s a bonus already. The documentation is also quite decent, and plugins to take over markdown content are available.&lt;/p&gt;
&lt;p&gt;The switch has caused a &lt;em&gt;little&lt;/em&gt; bit of turmoil, but since I have a very small audience, I (and the poor folks who stumble across this place) have to put up with it.&lt;/p&gt;
&lt;h4&gt;Deploy protocol&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;some URLs have changed, so my 404 page shows the links to the content that according to google analytics is the most visited one.&lt;/li&gt;
&lt;li&gt;The &lt;a href=&quot;https://www.gatsbyjs.org/packages/gatsby-remark-embed-gist/&quot;&gt;plugin&lt;/a&gt; to show embedded gists messed with my pages, so right now only links to gists.&lt;/li&gt;
&lt;li&gt;Some files generated by gatsby&apos;s build step are too long for git on Windows. &lt;a href=&quot;https://stackoverflow.com/a/22575737/51428&quot;&gt;This SO answer&lt;/a&gt; helps.&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Primitive Confusion]]></title><description><![CDATA[My last post on primitive obsession has been  a while ago , whose predecessor is  even older . Primitives are still bad. The following…]]></description><link>https://realfiction.net/2018/06/24/primitive-confusion</link><guid isPermaLink="false">https://realfiction.net/2018/06/24/primitive-confusion</guid><pubDate>Sat, 23 Jun 2018 22:00:00 GMT</pubDate><content:encoded>&lt;p&gt;My last post on primitive obsession has been &lt;a href=&quot;/2015/12/30/nmeasure-and-the-global-warming&quot;&gt;a while ago&lt;/a&gt;, whose predecessor is &lt;a href=&quot;/2010/11/30/dealing-with-primitive-obsession-this-time-measurements&quot;&gt;even older&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Primitives are still bad. The following illustrative code just happened to me two days ago (it didn&apos;t reach production, but hey):&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;csharp&quot;&gt;&lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Program&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;string&lt;/span&gt; UserId &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;u-123&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;string&lt;/span&gt; ProductId &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;p-abc&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
	
	&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Order&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;string&lt;/span&gt; userId&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;string&lt;/span&gt; productId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; System&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;$&lt;span class=&quot;token string&quot;&gt;&quot;User {userId} ordered {productId}&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
	
	&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Order&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ProductId&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; UserId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;See the problem? Because we are the dealing with ids as strings, the compiler can&apos;t help us when we use APIs the wrong way. When you use the API correctly in unit tests it so can happen that confusing such IDs may only turn up in integration or, as the &lt;em&gt;very last resort&lt;/em&gt;, production.&lt;/p&gt;
&lt;p&gt;The same mistake can happen to us in other languages, too. Here&apos;s the example in F#:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;fsharp&quot;&gt;&lt;pre class=&quot;language-fsharp&quot;&gt;&lt;code class=&quot;language-fsharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; getUserId &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;u-123&quot;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; getProductId &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;p-ABC&quot;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; order userId productId &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; 
    printfn &lt;span class=&quot;token string&quot;&gt;&quot;user %s orders %s&quot;&lt;/span&gt; userId productId

&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;EntryPoint&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; main argv &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;
    order getProductId getUserId
    &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The compiler happily does its job, no surprises. Obviously I chose F# as second example for a reason. Here, the barrier to type even singular primitives to provide improved compile time safety is considerably lower. Enter &lt;a href=&quot;https://fsharpforfunandprofit.com/posts/discriminated-unions/&quot;&gt;&lt;strong&gt;Discriminated Unions&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;They are something like the crack of type-safe pattern matching, or state representations on steroids or whatever you like to call them. Let&apos;s use them in our example:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;fsharp&quot;&gt;&lt;pre class=&quot;language-fsharp&quot;&gt;&lt;code class=&quot;language-fsharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; UserId &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; UserId &lt;span class=&quot;token keyword&quot;&gt;of&lt;/span&gt; string
&lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; ProductId &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; ProductId &lt;span class=&quot;token keyword&quot;&gt;of&lt;/span&gt; string

&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; getUserId &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; UserId &lt;span class=&quot;token string&quot;&gt;&quot;u-123&quot;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; getProductId &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; ProductId &lt;span class=&quot;token string&quot;&gt;&quot;p-ABC&quot;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; order &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;UserId userId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ProductId productId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;
    printfn &lt;span class=&quot;token string&quot;&gt;&quot;user %s orders %s&quot;&lt;/span&gt; userId productId

&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;EntryPoint&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; main argv &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;
    order getUserId getProductId
    &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In this case the &lt;code class=&quot;language-text&quot;&gt;userId&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;productId&lt;/code&gt;are still essentially strings, but you can only get at them by acknowledging the type that is guarding those primitive values. It is hard to conceive and even smaller encoding of semantics with regard to some primitive value, which is why I highly approve of this use case of discriminated unions and often miss them in C#.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Typescript type shenanigans: Conditional Types]]></title><description><![CDATA[The amazing thing about Typescript's type system is not really that it strives to be the most complete type system, or the most formal, but…]]></description><link>https://realfiction.net/2018/06/10/typescript-type-shenanigans-conditional-types</link><guid isPermaLink="false">https://realfiction.net/2018/06/10/typescript-type-shenanigans-conditional-types</guid><pubDate>Sun, 10 Jun 2018 13:00:00 GMT</pubDate><content:encoded>&lt;p&gt;The amazing thing about Typescript&apos;s type system is not really that it strives to be the most complete type system, or the most formal, but in that in its pursue to be able to type all the things that lovers &amp;#x26; haters of javascript do with the language, it explores new avenues and possibilities. This post looks at a use case for a fairly recent addition, &lt;strong&gt;conditional types&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;But before we get there, bask in the glory of this nifty type (I saw it first in the typing for &lt;a href=&quot;https://github.com/reduxjs/redux/blob/619507a0fa46e6b90c5fca26eaf409c38a078faf/index.d.ts#L208&quot;&gt;redux&lt;/a&gt;).&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;typescript&quot;&gt;&lt;pre class=&quot;language-typescript&quot;&gt;&lt;code class=&quot;language-typescript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; DeepPartial&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;K&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; keyof &lt;span class=&quot;token constant&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; DeepPartial&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;K&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;What does it do? - Given some type, it recursively turns itself and all of its properties as optional (remember that the in-built &lt;code class=&quot;language-text&quot;&gt;Partial&amp;lt;T&amp;gt;&lt;/code&gt; does it flat on T).&lt;/p&gt;
&lt;p&gt;You don´t have to remember that. It has no relevance to what follows. It&apos;s &lt;em&gt;just&lt;/em&gt; a cool and useful type that shows off all the parts that Typescript has learned in the past year or so.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Right. &lt;a href=&quot;http://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-8.html&quot;&gt;Conditional Types&lt;/a&gt;. To me it always helps to have some example. This one also involves some react. Sorry. &lt;/p&gt;
&lt;p&gt;Imagine some &lt;strong&gt;UI component&lt;/strong&gt; which you can use in either of two ways.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I give it a list of items which contain links and the component renders the links in some useful and pretty fashion&lt;/li&gt;
&lt;li&gt;I give it a list of items which contain actions (functions to be invoked when some button is clicked), and now the component is to render buttons with the click triggering those actions.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note that the two item types are mutually exclusive. I either want it to render links, or buttons. Ideally I want Typescript to guide me so that I&apos;m filling in the details correctly.&lt;/p&gt;
&lt;p&gt;Let&apos;s encode the two types of functionality:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;typescript&quot;&gt;&lt;pre class=&quot;language-typescript&quot;&gt;&lt;code class=&quot;language-typescript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; ActionableItemType &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;action&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;link&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and the two kinds of items that I want to support:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;typescript&quot;&gt;&lt;pre class=&quot;language-typescript&quot;&gt;&lt;code class=&quot;language-typescript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ActionItem&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  label&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  action&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;LinkItem&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  label&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  link&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we are already ready to define our &lt;strong&gt;conditional type&lt;/strong&gt; 🎉 !&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;typescript&quot;&gt;&lt;pre class=&quot;language-typescript&quot;&gt;&lt;code class=&quot;language-typescript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; ActionableItem&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ActionableItemType&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; 
  &lt;span class=&quot;token constant&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;action&quot;&lt;/span&gt; 
  &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; ActionItem
  &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;link&quot;&lt;/span&gt; 
  &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; LinkItem 
  &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; never&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;what it says is that given some Type &lt;strong&gt;T&lt;/strong&gt;, when T extends the type &lt;strong&gt;&quot;action&quot;&lt;/strong&gt;, &lt;strong&gt;ActionableItem&lt;/strong&gt; is now an &lt;strong&gt;ActionItem&lt;/strong&gt;, otherwise if &lt;strong&gt;T&lt;/strong&gt; is &lt;strong&gt;&quot;link&quot;&lt;/strong&gt;, &lt;strong&gt;ActionableItem&lt;/strong&gt; is &lt;strong&gt;LinkItem&lt;/strong&gt;. To complete the type, we use the &lt;strong&gt;never-Type&lt;/strong&gt;, which is exactly for such cases where you want to use a Type that no instance can have.&lt;/p&gt;
&lt;p&gt;We are now armed to implement a react component that takes advantage of this typing, starting with defining the properties of the component.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;typescript&quot;&gt;&lt;pre class=&quot;language-typescript&quot;&gt;&lt;code class=&quot;language-typescript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ActionableItemComponentProps&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ActionableItemType&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  items&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;ActionableItem&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And the component itself&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;typescript&quot;&gt;&lt;pre class=&quot;language-typescript&quot;&gt;&lt;code class=&quot;language-typescript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ActionableItemComponent&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ActionableItemType&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Component&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;
  ActionableItemComponentProps&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// ... impl to come&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The component itself is now generic, that is when we work with the items passed in we don&apos;t know if these are action or link items (remember the runtime is javascript, so all your type info is pretty much erased at runtime). To get back typings you will make use of &lt;strong&gt;&lt;a href=&quot;http://www.typescriptlang.org/docs/handbook/advanced-types.html&quot;&gt;type guards&lt;/a&gt;&lt;/strong&gt;, a runtime check that gives your code safe areas where you may assume that something is indeed of the type you expect. Here are the two type guards that I will use in the &lt;code class=&quot;language-text&quot;&gt;render&lt;/code&gt;-code&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;typescript&quot;&gt;&lt;pre class=&quot;language-typescript&quot;&gt;&lt;code class=&quot;language-typescript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;isActionsArray&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;items&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; items is ActionItem&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; items&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; items&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;action&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;isItemsArray&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;items&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; items is LinkItem&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; items&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; items&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;link&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can see that I only check the first item of some array to check whether I have action or link types. The underlying assumption is that the call site is &lt;strong&gt;also written in TypeScript&lt;/strong&gt;. You will see that the compile time check will ensure that all items must adhere to the same type.&lt;/p&gt;
&lt;p&gt;Now we are ready to implement a render function for the &lt;code class=&quot;language-text&quot;&gt;ActionableItemComponent&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;typescript&quot;&gt;&lt;pre class=&quot;language-typescript&quot;&gt;&lt;code class=&quot;language-typescript&quot;&gt;&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; items &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Container&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;isActionsArray&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;items&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;renderActionItems&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;items&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;isItemsArray&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;items&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;renderLinkItems&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;items&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;Container&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The implementation of &lt;code class=&quot;language-text&quot;&gt;renderActionItems&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;renderLinkItems&lt;/code&gt; is left to the reader (No, it&apos;s not, you can actually &lt;a href=&quot;https://github.com/flq/ts-react-playground/blob/ac41d388a3746f66f63dd215d65801cac9ceaaaf/src/examples/ActionableItems.tsx#L37&quot;&gt;find it here&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;The only thing left is to make the component readily available to users of the component (The generic in there means we can&apos;t use it easily straight away), so we provide two convenience types to have the two different styles of rendering actionable items:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;typescript&quot;&gt;&lt;pre class=&quot;language-typescript&quot;&gt;&lt;code class=&quot;language-typescript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; ActionItemsComponent &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; ActionableItemComponent&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;action&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; ActionItemsComponent &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; ActionableItemComponent &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; ActionItemsComponent&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; LinkItemsComponent &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; ActionableItemComponent&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;link&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; LinkItemsComponent &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; ActionableItemComponent &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; LinkItemsComponent&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Users of the component can now go ahead and use it as such:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;typescript&quot;&gt;&lt;pre class=&quot;language-typescript&quot;&gt;&lt;code class=&quot;language-typescript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; React &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;react&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; ActionItemsComponent&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; LinkItemsComponent &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;./ActionableItems&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; UsingActions &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function-variable function&quot;&gt;SFC&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;ActionItemsComponent items&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;action&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Hallelujah&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; label&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;alerted&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; UsingLinks &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function-variable function&quot;&gt;SFC&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;LinkItemsComponent items&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;link&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;/#whatever&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; label&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;whatever link&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Depending on either usage, the consumer gets nice type safety on how the items need to be structured, while the implementation can make use of the conditional type to provide a single implementation. &lt;/p&gt;
&lt;p&gt;&lt;em&gt;Of course&lt;/em&gt; there are many ways to encode such functionality, and if the two styles of rendering diverge a lot, you may be better off implementing two different components. Even so, I hope it helps you to consider in what ways conditional types can be useful to you.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Mob Programming - first impressions]]></title><description><![CDATA[I am currently involved in product development with a small but fine team (4 devs, one product designer). We had to  redo  one of the core…]]></description><link>https://realfiction.net/2018/03/25/mob-programming-first-impressions</link><guid isPermaLink="false">https://realfiction.net/2018/03/25/mob-programming-first-impressions</guid><pubDate>Sun, 25 Mar 2018 13:00:00 GMT</pubDate><content:encoded>&lt;p&gt;I am currently involved in product development with a small but fine team (4 devs, one product designer). We had to &lt;em&gt;redo&lt;/em&gt; one of the core components in order to make it fit for its refined and renewed responsibilities. We did not see how we could work separately or even in pairs on this central junction of the application - the decision was made to go forward with &lt;a href=&quot;http://mobprogramming.org&quot;&gt;mob programming&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/mob-programming.jpeg&quot; alt=&quot;mob programming visualization&quot;&gt;&lt;/p&gt;
&lt;h2&gt;how we did it&lt;/h2&gt;
&lt;p&gt;For about 2½ days we were sitting together. Each one brought their laptop along so that we didn&apos;t have to get used to someone else&apos;s dev environment. One was the &quot;driver&quot;, typing what needs to be done and projecting the screen onto the Surface Hub. The others are the &quot;navigators&quot;. We would set the time at 15 minutes for switching the driver, but we usually let the current &quot;step&quot; end before switching over. Switching over meant pushing to the branch, and the next one pulling and carrying on.&lt;/p&gt;
&lt;h2&gt;interesting precondition&lt;/h2&gt;
&lt;p&gt;We did not reinvent the component completely but had the previous incarnation to work with. That way it had characteristics of a code kata.&lt;/p&gt;
&lt;h2&gt;how did it turn out?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Mob programming does not optimize for speed&lt;/strong&gt; - while it is hard to put a number on this, subjectively it feels &lt;em&gt;slower&lt;/em&gt; than working alone or in pair. There is simply more brain in the room and things need to be sorted out!&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Mob programming optimizes for code soundness&lt;/strong&gt; - With all people involved, the solution seemed to converge towards building what is necessary. Hence, there weren&apos;t masses of code involved but that which was written was absolutely &lt;em&gt;necessary&lt;/em&gt;, &lt;em&gt;well named&lt;/em&gt; and &lt;em&gt;sound&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Mob programming optimizes for knowledge transfer and learning&lt;/strong&gt; - You get to see how others write code and run their coding errands. Everybody makes an effort to understand what is happening (since everybody will be driver or navigator at some point). f something is unclear it will be asked straight away, then explained, or the question actually leads to code modifications with regard to naming and clarity. If everybody must understand the code, it must be pretty clear.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Mob programming optimizes for team flow and empathy&lt;/strong&gt; - It provided a sense of shared accomplishment and generally &quot;good vibes&quot; in that the whole team sits in the same boat and everybody can peek into the other&apos;s mind.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;would we do it again?&lt;/h2&gt;
&lt;p&gt;Yes, &lt;strong&gt;absolutely&lt;/strong&gt;. I think there are many tasks that can be &lt;em&gt;done well&lt;/em&gt; alone or in pair. But if you need a concerted effort that requires a number of changes and a lot of thinking, or possibly a situation where you introduce a new concept, this approach appears to make a lot of sense. But beware, though, that, at least for us, the mob programming days were &lt;strong&gt;absolutely exhausting&lt;/strong&gt;. A lot of focus and zero distractions means that at the end of the day you are done!&lt;/p&gt;
&lt;p&gt;It&apos;s worth it, though, give it a spin if you get the chance.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[In love, until it's my turn]]></title><description><![CDATA[Gustav A. Quednau 22.01.1937 - 03.11.2017 In love, until it is my turn Mourning the loss of a loved one is a private matter. This post…]]></description><link>https://realfiction.net/2017/11/25/in-love-until-its-my-turn</link><guid isPermaLink="false">https://realfiction.net/2017/11/25/in-love-until-its-my-turn</guid><pubDate>Sat, 25 Nov 2017 13:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;img src=&quot;/assets/Gustav_1963.jpg&quot; alt=&quot;Gustav Quednau&quot;&gt;&lt;/p&gt;
&lt;h2&gt;Gustav A. Quednau 22.01.1937 - 03.11.2017&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;In love, until it is my turn&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Mourning the loss of a loved one is a private matter. This post, however, wants to focus on a specific subject of public relevance. &lt;em&gt;I have lost the one person I know who has consciously witnessed the second World War.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Reaching the age of 80 is OK, depending on how you live your life. There is no denying, however, that the witnesses of WWII are going away. Soon, the most horrible war in the history of humanity will strike as much fear into the hearts of pupils as the 30 Years&apos; war, the crusades, or any other of the countless wars that occurred in the past.&lt;/p&gt;
&lt;h3&gt;None.&lt;/h3&gt;
&lt;p&gt;My Dad, on the other hand, could never let go of those years in his childhood. The bombs, the burning houses. The dead, the chaos, the despotism, the hate and spitefulness. In retrospect, it&apos;s hard to believe what good person he was with that background. So many people were shattered by the war. I never met one of my granddads. They withered away long before I came to life.&lt;/p&gt;
&lt;p&gt;The upbringing in Germany didn&apos;t leave me untouched. I grew up aware of the atrocities committed by the Nazis. At first, when I came studying to England, it was hard for me to take in how nonchalantly Hitler was built into humour (Fawlty Towers, anyone?). &lt;em&gt;Unpossible&lt;/em&gt; in Germany when I was young. Beyond that, can you actually believe a German studying in the UK, with the aid of EU funding? Just a little more than 20 years ago.&lt;/p&gt;
&lt;p&gt;People like my father made this possible. He was a businessman. So he made business - with Spanish people, French, Belgian, British, Italian, Greek and who knows who else. He enjoyed working with them. Those people are the foundation of the EU we have come to love.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(for the record: I don&apos;t love excessive bureaucracy, but I enjoy going to France to buy cheese and fish, not noticing a border, because there is none, paying the same currency and using internet because there is no fucking roaming! If you force me to choose between a bureaucratic government or dying on the front, I know I&apos;ll choose the former)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;My Dad wouldn&apos;t believe that the same stinking brown sludge is pouring out of the sewers of the nations again. He thought that we&apos;d learned. He mostly despised Germans. He loved the US for having put the final nail into the coffin wherein lies the Nazi regime. &lt;/p&gt;
&lt;p&gt;I couldn&apos;t ask him whether he thought that other nations could be capable of the same atrocities. He may have believed that the Germans were special in that respect.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Me, I don&apos;t think so.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Everywhere where&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Democratic representatives cannot be trusted anymore to do as they say&lt;/li&gt;
&lt;li&gt;The wealthy think that they are actually better than the rest and are entitled to even more&lt;/li&gt;
&lt;li&gt;Institutions fail to rigorously weed out the stinking filth that always forms at the bottom of any living system and begin to show blind eyes towards certain groups of people&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;You will get Nazis&lt;/strong&gt;. If you let them prosper, they will &lt;strong&gt;ensnare you&lt;/strong&gt; by channeling the anger and vile that the above points accumulate in you. They will tap on your &lt;strong&gt;racism&lt;/strong&gt; that is related to a lack of empathy, exposure to different viewpoints and a terrible legacy of our evolutionary background. They will get &lt;strong&gt;cocky&lt;/strong&gt;. They will erode the institutions while sweet-talking you into parting with your morale, your ethics and utimately your soul. They will happily &lt;strong&gt;throw your body into a meat grinder&lt;/strong&gt; if it furthers their Agenda. It is the evil that will consume itself when there is nothing left to burn.&lt;/p&gt;
&lt;p&gt;Hence, if you&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;consider yourself better because your parents provided you with the bootstraps to bootstrap yourself&lt;/li&gt;
&lt;li&gt;look down at refugees from countries where the same atrocities occur that occur in every goddamn war&lt;/li&gt;
&lt;li&gt;look down at people because they look different or think different to you&lt;/li&gt;
&lt;li&gt;justify violence to fellow humans for shallow agendas that are easily seen through&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I have nothing for you here. You are living below your potential and you are a shame to humanity. My parents didn&apos;t help build Europe for Nazis to trample all over it again.&lt;/p&gt;
&lt;p&gt;I haven&apos;t forgotten. Have you?&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Json and local storage with elm]]></title><description><![CDATA[In the quest of porting a react/redux-app named  remorse  to elm, once more I came across the requirement to store the current progress of…]]></description><link>https://realfiction.net/2017/08/29/json-and-local-storage-with-elm</link><guid isPermaLink="false">https://realfiction.net/2017/08/29/json-and-local-storage-with-elm</guid><pubDate>Tue, 29 Aug 2017 13:00:00 GMT</pubDate><content:encoded>&lt;p&gt;In the quest of porting a react/redux-app named &lt;a href=&quot;http://realfiction.net/remorse&quot;&gt;remorse&lt;/a&gt; to elm, once more I came across the requirement to store the current progress of the user to local storage.
Now, dealing with json was easily the least enjoyable part of the port. elm requires you to specify encoders and decoders in order to get from json to your elm code and back.
To me, it does seem repetitive. After all, e.g. in .NET, when I have some instance, reflection allows me to understand the instance and then lets me build a fast encoder / decoder at runtime.
This option isn&apos;t available in elm.&lt;/p&gt;
&lt;p&gt;The one advantage this approach &lt;strong&gt;does&lt;/strong&gt; have is forcing you to think very carefully about what you will put out to json. Your json models will most certainly become independent of your programming models, which is actually a good thing. &lt;em&gt;Still&lt;/em&gt; ...&lt;/p&gt;
&lt;p&gt;Let us start with the user interaction. &lt;a href=&quot;https://github.com/flq/elmorse/blob/8db340ed97ffe00ae075d7cca4236962b8336570/src/Navigation/View.elm#L25-L27&quot;&gt;The user clicks&lt;/a&gt;{:target=&quot;_blank&quot;} on &quot;Save current settings&quot;...&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;a [onClick SaveAppState] [text &amp;quot;Save current settings&amp;quot;]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The message is handled in the &lt;strong&gt;update&lt;/strong&gt; function &lt;a href=&quot;https://github.com/flq/elmorse/blob/8db340ed97ffe00ae075d7cca4236962b8336570/src/Update.elm#L33-L34&quot;&gt;by creating a Command&lt;/a&gt;{:target=&quot;&lt;em&gt;blank&quot;} which will do the job. Let us look at the &lt;a href=&quot;https://github.com/flq/elmorse/blob/8db340ed97ffe00ae075d7cca4236962b8336570/src/StateStorage.elm#L42-L52&quot;&gt;contents of the command&lt;/a&gt;{:target=&quot;&lt;/em&gt;blank&quot;}.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;saveAppState model = 
  let
      map m = 
        {
          userInput = m.userInput,
          lettersInScope = m.lettersInScope,
          morseSpeed = m.morseSpeed,
          trainCount = m.trainCount
        } 
  in
    storeObject (stateKey, encode &amp;lt;| map model)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code class=&quot;language-text&quot;&gt;map&lt;/code&gt; function is a straightforward mapper that extracts just those values that I care about in terms of persisting. That value is passed through an encoder, whose output is then stored.&lt;/p&gt;
&lt;p&gt;Here&apos;s the &lt;a href=&quot;https://github.com/flq/elmorse/blob/8db340ed97ffe00ae075d7cca4236962b8336570/src/StateStorage.elm#L54-L61&quot;&gt;encoder&lt;/a&gt;{:target=&quot;_blank&quot;}:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;import Json.Encode as J exposing (object)
...
encode : Progress -&amp;gt; J.Value
encode p =
  object [
    (&amp;quot;userInput&amp;quot;, J.string p.userInput),
    (&amp;quot;lettersInScope&amp;quot;, J.list &amp;lt;| List.map J.string p.lettersInScope),
    (&amp;quot;morseSpeed&amp;quot;, J.float p.morseSpeed),
    (&amp;quot;trainCount&amp;quot;, J.int p.trainCount)    
  ]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You see, we have to encode all that what we know about the target model into the encoder as well. To an old-fashioned Newtonsoft user this seemed ludicrous, but yes, reflection isn&apos;t really a thing in functional programming, and looking at &lt;strong&gt;Haskell&lt;/strong&gt;, one of the fathers of elm, to pull off something more comfortable than this, it requires the programmer to use certain metaprogramming directives to instruct the compiler to do certain work for us.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;final&lt;/strong&gt; piece in the Puzzle is the &lt;code class=&quot;language-text&quot;&gt;storeObject&lt;/code&gt;, which is an interop function, because elm doesn&apos;t have an in-built API to talk to local storage.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;port storeObject : (String, J.Value) -&amp;gt; Cmd msg&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and &lt;a href=&quot;https://github.com/flq/elmorse/blob/8db340ed97ffe00ae075d7cca4236962b8336570/src/localStoragePort.js#L21-L23&quot;&gt;its implementation&lt;/a&gt;{:target=&quot;_blank&quot;}:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; storage &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;localStorage &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;setItem&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;k&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; v&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;k&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; v&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;getItem&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;k&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;k&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;storeObject&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;key&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; object&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  storage&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setItem&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;key&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;object&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The end result being that the desired values are stored in the browser&apos;s local storage for later retrieval.&lt;/p&gt;
&lt;p&gt;There is no explicit functionality to load the currently stored settings - this happens when the application starts up. How?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The elm application is started, inside the init it is requested to load json from local storage&lt;/li&gt;
&lt;li&gt;Once loaded, the data is made available, decoded and sent into the &lt;code class=&quot;language-text&quot;&gt;update&lt;/code&gt; part of the application.&lt;/li&gt;
&lt;li&gt;If data is available and correctly loaded, the data is taken into the main application model.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let&apos;s go in reverse this time, beginning with the &lt;a href=&quot;https://github.com/flq/elmorse/blob/8db340ed97ffe00ae075d7cca4236962b8336570/src/localStoragePort.js#L10-L17&quot;&gt;retrieval functionality&lt;/a&gt;{:target=&quot;_blank&quot;} implemented in javascript.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;initLocalStoragePort&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;elmApp&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  elmApp&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ports&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;storeObject&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;key&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; state&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;storeObject&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;key&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; state&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  elmApp&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ports&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;retrieveObject&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;key&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; o &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;retrieveObject&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;key&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    elmApp&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ports&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;objectRetrieved&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;key&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; o&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Elm is very strict with regard to values entering your application from the outside. Basically, you perform a request (&lt;em&gt;Command&lt;/em&gt;) and then wait for a response (&lt;em&gt;Subscription&lt;/em&gt;):&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;port retrieveObject : String -&amp;gt; Cmd msg
port objectRetrieved : ((String, J.Value) -&amp;gt; msg) -&amp;gt; Sub msg&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let us look at the &lt;a href=&quot;https://github.com/flq/elmorse/blob/8db340ed97ffe00ae075d7cca4236962b8336570/src/StateStorage.elm#L18-L26&quot;&gt;subscription&lt;/a&gt;{:target=&quot;_blank&quot;}.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;import Json.Decode as D exposing (int, string, float, list, Decoder)

appStateLoaded : Sub Msg
appStateLoaded =
  let
    getModel json = case (D.decodeValue modelDecoder json) of
      Ok m -&amp;gt; Just m
      Err _ -&amp;gt; Nothing
    retrieval (key, json) =
      OnAppStateLoaded (getModel json)
  in
    objectRetrieved retrieval&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Using &lt;a href=&quot;https://github.com/flq/elmorse/blob/8db340ed97ffe00ae075d7cca4236962b8336570/src/StateStorage.elm#L64-L69&quot;&gt;the decoder&lt;/a&gt;{:target=&quot;_blank&quot;} &lt;code class=&quot;language-text&quot;&gt;modelDecoder&lt;/code&gt;, it is attempted to retrieve the data from local storage. The decoder
may fail, which should usually mean that a value has never been stored. Once the decoded model instance is available, it is piped into the system through a message (&lt;code class=&quot;language-text&quot;&gt;OnAppStateLoaded&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Finally, the whole chain is triggered with the &lt;code class=&quot;language-text&quot;&gt;loadAppStateCommand&lt;/code&gt; inside the init function which is called right at the beginning
of the program.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;init location =
    let
        currentRoute = Route.parseLocation location
    in
        (initialModel currentRoute, loadAppState)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;with &lt;code class=&quot;language-text&quot;&gt;loadAppState&lt;/code&gt; being...&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;loadAppState : Cmd msg
loadAppState = retrieveObject stateKey  &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With the end result being, that when the application starts, settings will be loaded from local storage right into the model if there are settings available.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[react/redux to elm feature comparison: playing morse sounds]]></title><description><![CDATA[This post is about how the feature of listening to morse sounds when pressing the button... ...is implemented. react/redux elm react/redux…]]></description><link>https://realfiction.net/2017/08/21/react-redux-to-elm-feature-comparison-playing-morse-sounds</link><guid isPermaLink="false">https://realfiction.net/2017/08/21/react-redux-to-elm-feature-comparison-playing-morse-sounds</guid><pubDate>Mon, 21 Aug 2017 19:56:00 GMT</pubDate><content:encoded>&lt;p&gt;This post is about how the feature of listening to morse sounds when pressing the button...&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/play-morse-button.png&quot; alt=&quot;ts auto-complete&quot;&gt;&lt;/p&gt;
&lt;p&gt;...is implemented.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#reactredux&quot;&gt;react/redux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#elm&quot;&gt;elm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;react/redux&lt;/h3&gt;
&lt;p&gt;Let&apos;s start with the user interaction &lt;a href=&quot;https://github.com/flq/remorse/blob/834762ec8185fa024160c397a07000e6cd7667fd/src/TypingScreen/TypingScreen.js#L37-L43&quot;&gt;in the UI&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;html&quot;&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;input&lt;/span&gt;
    &lt;span class=&quot;token attr-name&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;button&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token attr-name&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;soundButton&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token attr-name&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;token entity&quot; title=&quot;&amp;#128266;&quot;&gt;&amp;amp;#128266;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token attr-name&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;{playSound}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;playSound&lt;/code&gt; is an action that is surfaced through react-redux&apos; &lt;code class=&quot;language-text&quot;&gt;connect&lt;/code&gt;-functionality. The action &lt;a href=&quot;https://github.com/flq/remorse/blob/834762ec8185fa024160c397a07000e6cd7667fd/src/TypingScreen/Actions.js#L23-L28&quot;&gt;looks like that&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;playSound&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;dispatch&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; getState&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; userInput&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; soundSpeed &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;typing&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;textAsMorseSound&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;userInput&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; soundSpeed&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This type of function is supported by the &lt;a href=&quot;https://github.com/gaearon/redux-thunk&quot;&gt;redux-thunk&lt;/a&gt; middleware, which provides the dispatch and getState functions to be able to perform &lt;em&gt;side-effects&lt;/em&gt; within a user-UI interaction. &lt;a href=&quot;https://github.com/flq/remorse/blob/834762ec8185fa024160c397a07000e6cd7667fd/src/components/SoundLib.js#L32&quot;&gt;Digging deeper&lt;/a&gt;: &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;textAsMorseSound&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;input&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; soundSpeed&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; c &lt;span class=&quot;token keyword&quot;&gt;of&lt;/span&gt; Array&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;input&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; code &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;charToMorseCode&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;c&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;asyncPlayMorse&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Array&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;code&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; soundSpeed&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;DASH_LENGTH&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; soundSpeed&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Pause between chars&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;//...&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;millisecs&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; value &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;res&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; rej&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; millisecs&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The async/await, part of ES2017, but already available through babeljs-transpiling, allows you to work with promises much like you do with Tasks in the post .NET 4.5 world.
This makes the code that performs the necessary time delays &lt;a href=&quot;https://github.com/flq/remorse/blob/834762ec8185fa024160c397a07000e6cd7667fd/src/components/SoundLib.js#L40-L64&quot;&gt;much easier to read&lt;/a&gt;. &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// characters: Array of strings like &quot;-&quot; and &quot;.&quot; and &quot; &quot;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;asyncPlayMorse&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;characters&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; soundSpeed &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; c &lt;span class=&quot;token keyword&quot;&gt;of&lt;/span&gt; characters&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;c&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;.&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;startSound&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;DOT_LENGTH&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; soundSpeed&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;stopSound&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;DOT_LENGTH&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; soundSpeed&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;-&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;startSound&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;DASH_LENGTH&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; soundSpeed&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;stopSound&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;DOT_LENGTH&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; soundSpeed&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;PAUSE&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; soundSpeed&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;c&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Finally &lt;code class=&quot;language-text&quot;&gt;startSound&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;stopSound&lt;/code&gt; connect and disconnect the oscillator that &lt;a href=&quot;https://github.com/flq/remorse/blob/834762ec8185fa024160c397a07000e6cd7667fd/src/components/SoundLib.js#L14-L30&quot;&gt;is set up&lt;/a&gt; to the audio output of the browser.&lt;/p&gt;
&lt;h3&gt;elm&lt;/h3&gt;
&lt;p&gt;As you can imagine, not every single browser API is surfaced to elm - hence the concept of defining ports, a subsystem that allows you to interop to plain javascript and its access to all of the browser&apos;s API.
Therefore, we go ahead and &lt;a href=&quot;https://github.com/flq/elmorse/blob/ce330e70098106e988d92059c3762708c43646f5/src/Interop.elm#L5-L6&quot;&gt;define ports&lt;/a&gt; to start and stop the sound:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;port audioOn &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; Cmd msg
port audioOff &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; Cmd msg&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In javascript, we need to fill these ports &lt;a href=&quot;https://github.com/flq/elmorse/blob/ce330e70098106e988d92059c3762708c43646f5/src/Typing/audioPort.js#L23-L35&quot;&gt;with life&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;initAudioPort&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;elmApp&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; isConnected &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  elmApp&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ports&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;audioOn&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;isConnected&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    oscillator&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;audioCtx&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;destination&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    isConnected &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  elmApp&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ports&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;audioOff&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;isConnected&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    oscillator&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;disconnect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;audioCtx&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;destination&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    isConnected &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// which is used like that:&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; app &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Main&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;embed&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;root&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;initAudioPort&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;app&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now that we have this in place, we can stay in elm to implement the functionality. Let&apos;s &lt;a href=&quot;https://github.com/flq/elmorse/blob/ce330e70098106e988d92059c3762708c43646f5/src/Typing/View.elm#L36-L40&quot;&gt;start in the UI&lt;/a&gt; again:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;input &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
  type_ &lt;span class=&quot;token string&quot;&gt;&quot;button&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 
  &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;soundButton&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 
  onClick OnListenToMorse&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  value &lt;span class=&quot;token string&quot;&gt;&quot;Play Morse&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;OnListenToMorse&lt;/code&gt;is a defined message that needs to be handled in the &lt;code class=&quot;language-text&quot;&gt;update&lt;/code&gt; function of your application.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;sql&quot;&gt;&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;update&lt;/span&gt; msg model &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; 
  &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; msg &lt;span class=&quot;token keyword&quot;&gt;of&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;-- stuff&lt;/span&gt;
    OnListenToMorse &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;model&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; Audio&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;playWords model&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;userInput model&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;morseSpeed&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Just like in the redux app, where I didn&apos;t show any reducer code, implying that nothing changes in the application&apos;s model, the only reaction here consists of initiating a &lt;em&gt;side-effect&lt;/em&gt;.
&lt;a href=&quot;https://github.com/flq/elmorse/blob/8db340ed97ffe00ae075d7cca4236962b8336570/src/Typing/MorseAudio.elm#L37-L41&quot;&gt;What happens in&lt;/a&gt; &lt;code class=&quot;language-text&quot;&gt;playWords&lt;/code&gt; ?&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;sql&quot;&gt;&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;playWords : String &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;Float&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; Cmd Msg
playWords words factor &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; 
  stringToMorseSymbols words
  &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; List&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;map &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;convertSymbolToCommands factor&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; bringTogether

&lt;span class=&quot;token comment&quot;&gt;-- type of stringToMorseSymbols: String -&gt; List MorseSymbol&lt;/span&gt;

convertSymbolToCommands: &lt;span class=&quot;token keyword&quot;&gt;Float&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; MorseSymbol &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; List &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Milliseconds&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; Msg&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
convertSymbolToCommands factor symbol &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;
  let
    adapt &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;millisecs&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; msg&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;millisecs &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; factor&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; msg&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    adaptAll &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; List&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;map adapt
  &lt;span class=&quot;token operator&quot;&gt;in&lt;/span&gt;
    adaptAll &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; symbol &lt;span class=&quot;token keyword&quot;&gt;of&lt;/span&gt;
      Dot &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; playDot
      Dash &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; playDash
      ShortPause &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; playBetweenChars
      LongPause &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; playBetweenWords
      Garbled &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; playBetweenWords

&lt;span class=&quot;token comment&quot;&gt;-- example of the &quot;play&quot; functions:&lt;/span&gt;

playDot: List &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Milliseconds&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; Msg&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
playDot &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;  
  &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;SoundMsg StartSound&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;dotLength&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;SoundMsg StopSound&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pauseBetweenChars&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; NoOp&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;-- from tuples to commands&lt;/span&gt;

bringTogether : List &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;List &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; Milliseconds&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; Msg &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; Cmd Msg
bringTogether &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; List&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;concat &lt;span class=&quot;token operator&quot;&gt;&gt;&gt;&lt;/span&gt; List&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;map toSequenceTuple &lt;span class=&quot;token operator&quot;&gt;&gt;&gt;&lt;/span&gt; sequence&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In other words, first the user input is converted to a list of morse symbols.
This is then processed to a &lt;strong&gt;list of list of tuples&lt;/strong&gt; that state at
which relative time in milliseconds which message should be piped into the update function (See e.g. &lt;code class=&quot;language-text&quot;&gt;Dot -&amp;gt; playDot + applying speed factor&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;The final ingredient to this magic is the &lt;strong&gt;sequence&lt;/strong&gt; function from the elm package &lt;a href=&quot;http://package.elm-lang.org/packages/andrewMacmurray/elm-delay/latest/Delay#sequence&quot;&gt;delay&lt;/a&gt;. &lt;a href=&quot;https://github.com/andrewMacmurray/elm-delay/blob/2.0.2/src/Delay.elm&quot;&gt;The code&lt;/a&gt; is actually not super-complex,
it does the necessary plumbing to call out to &lt;strong&gt;Process.sleep&lt;/strong&gt; the elm equivalent to javascript&apos;s &lt;code class=&quot;language-text&quot;&gt;setTimeout&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;What happens then, when the &lt;code class=&quot;language-text&quot;&gt;SoundMsg StartSound&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;StopSound&lt;/code&gt; messages are received?&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;sql&quot;&gt;&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;update&lt;/span&gt; msg model &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; 
  &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; msg &lt;span class=&quot;token keyword&quot;&gt;of&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;-- stuff&lt;/span&gt;
    SoundMsg msg &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; 
      Audio&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;update&lt;/span&gt; msg model

&lt;span class=&quot;token comment&quot;&gt;-- In audio update:&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;update&lt;/span&gt; : SoundMsg &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; Model &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Model&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; Cmd Msg&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;update&lt;/span&gt; msg model &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; msg &lt;span class=&quot;token keyword&quot;&gt;of&lt;/span&gt;
    StartSound &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;model&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; audioOn &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    StopSound &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;model&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; audioOff &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And &lt;a href=&quot;https://github.com/flq/elmorse/blob/8db340ed97ffe00ae075d7cca4236962b8336570/src/Typing/MorseAudio.elm#L17-L21&quot;&gt;here is where&lt;/a&gt; you finally find the calls to the interop ports we defined to connect and disconnect the Oscillator :)&lt;/p&gt;
&lt;p&gt;Which route do you prefer?&lt;/p&gt;</content:encoded></item></channel></rss>
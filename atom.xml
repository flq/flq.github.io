<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Realfiction]]></title><description><![CDATA[Content from Frank Quednau about dev and fields of interest.]]></description><link>https://realfiction.net</link><generator>RSS for Node</generator><lastBuildDate>Thu, 03 Jan 2019 21:34:18 GMT</lastBuildDate><item><title><![CDATA[Clumsy steps towards writing again]]></title><description><![CDATA[Why all the work ?  Why switching to a new site generator?  Is it all just an elaborate strategy for some cultivated procrastination?  This…]]></description><link>https://realfiction.net/2019/01/03/clumsy-steps-towards-writing-again</link><guid isPermaLink="false">https://realfiction.net/2019/01/03/clumsy-steps-towards-writing-again</guid><pubDate>Thu, 03 Jan 2019 15:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;em&gt;Why all the work&lt;/em&gt;? &lt;/p&gt;
&lt;p&gt;Why switching to a new site generator? &lt;/p&gt;
&lt;p&gt;Is it all just an elaborate strategy for some cultivated procrastination? &lt;/p&gt;
&lt;p&gt;This is the amount of posts that I&apos;ve written since 2004.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/posts-over-years.png&quot; alt=&quot;posts per year&quot;&gt;&lt;/p&gt;
&lt;p&gt;I was considering doing some spin doctoring on how things are going downhill, and maybe &lt;em&gt;they are&lt;/em&gt;! &lt;/p&gt;
&lt;p&gt;One side-effect of crossing my &lt;strong&gt;30ies&lt;/strong&gt; and then my &lt;strong&gt;40ies&lt;/strong&gt; is that I think a lot more about where to put my energy. There is my family, and there is responsibility. There is very focused product development and then there is that thing that I&apos;ve written a lot about programming in the previous years, but these days it is &lt;em&gt;also&lt;/em&gt; interesting to think about different things - about how software is developed, and on a grander scale, about where we as a whole are going. &lt;/p&gt;
&lt;p&gt;In terms of developing a product, the technical side of things isn&apos;t incredibly exciting (or maybe we like to keep it that way) - boring decisions and simple programming is a &lt;strong&gt;good thing&lt;/strong&gt; these days. I am not striving for the latest and greatest. I want code to look simple, and boring. If I search for an item, I want to find all occurrences of it. If I have to choose between boilerplate and magic, these days I&apos;d go for boilerplate (unless it gets tedious, but it has to get tedious &lt;em&gt;first&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;Also, development is not about the tech, it is about people. &lt;em&gt;People&lt;/em&gt; write the code, &lt;em&gt;people&lt;/em&gt; read the code, &lt;em&gt;people&lt;/em&gt; maintain the code. This is hardly interesting material and a lot has been written about it. It&apos;s probably a thing about maturity.&lt;/p&gt;
&lt;p&gt;I like to compare this journey to the journey of a musician.  You spend many years honing your skills. You want to play fast, clear, crisp, you learn the mechanics, you play &lt;em&gt;dense&lt;/em&gt;, you &lt;em&gt;go for it&lt;/em&gt;. With maturity comes a renewed sense for what those skills are actually there for. To have a way to communicate the value, the music, to your audience. With this, you reduce your output to that &lt;em&gt;which matters&lt;/em&gt;. Less dense, but providing breathing room. Communicating, seemingly effortless, the worth of your music. Or, as a developer, using your skills, not for the sake of satisfying your puzzle-solving addiction, but for improving the value of those using your software.&lt;/p&gt;
&lt;h4&gt;Am I done? through?&lt;/h4&gt;
&lt;p&gt;I hope not. The questions that go though my mind are ...&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How do you scale a small, professional team to a bigger, still professional team?&lt;/li&gt;
&lt;li&gt;How can you play out the individual strengths of people while maintaining a team effort?&lt;/li&gt;
&lt;li&gt;How can you make sure that you deliver on value and not on something else that is irrelevant or not yet relevant with a limited set of resources?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And then there are the things beyond my work bubble that are currently dominating my mind...&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How can a single child learn best about empathy?&lt;/li&gt;
&lt;li&gt;With what can we replace capitalism?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Between all those things I hope that I&apos;ll get down to writing a little bit (more) again.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[From Jekyll to Gatsby]]></title><description><![CDATA[Without much fanfare my  gatsbyjs -based website is now live. It is also a static website generator, however, it's based on javascript and…]]></description><link>https://realfiction.net/2018/12/30/from-jekyll-to-gatsby</link><guid isPermaLink="false">https://realfiction.net/2018/12/30/from-jekyll-to-gatsby</guid><pubDate>Sun, 30 Dec 2018 20:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Without much fanfare my &lt;a href=&quot;https://www.gatsbyjs.org&quot;&gt;gatsbyjs&lt;/a&gt;-based website is now live. It is also a static website generator, however, it&apos;s based on javascript and react. Since I&apos;m a lot closer to that tech than to ruby (the underlying tech of &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;jekyll&lt;/a&gt;) and I want it easy, this seemed like a nice choice. The regeneration speed while working on the site is blazing fast, so that&apos;s a bonus already. The documentation is also quite decent, and plugins to take over markdown content are available.&lt;/p&gt;
&lt;p&gt;The switch has caused a &lt;em&gt;little&lt;/em&gt; bit of turmoil, but since I have a very small audience, I (and the poor folks who stumble across this place) have to put up with it.&lt;/p&gt;
&lt;h4&gt;Deploy protocol&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;some URLs have changed, so my 404 page shows the links to the content that according to google analytics is the most visited one.&lt;/li&gt;
&lt;li&gt;The &lt;a href=&quot;https://www.gatsbyjs.org/packages/gatsby-remark-embed-gist/&quot;&gt;plugin&lt;/a&gt; to show embedded gists messed with my pages, so right now only links to gists.&lt;/li&gt;
&lt;li&gt;Some files generated by gatsby&apos;s build step are too long for git on Windows. &lt;a href=&quot;https://stackoverflow.com/a/22575737/51428&quot;&gt;This SO answer&lt;/a&gt; helps.&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Primitive Confusion]]></title><description><![CDATA[My last post on primitive obsession has been  a while ago , whose predecessor is  even older . Primitives are still bad. The following…]]></description><link>https://realfiction.net/2018/06/24/primitive-confusion</link><guid isPermaLink="false">https://realfiction.net/2018/06/24/primitive-confusion</guid><pubDate>Sat, 23 Jun 2018 22:00:00 GMT</pubDate><content:encoded>&lt;p&gt;My last post on primitive obsession has been &lt;a href=&quot;/2015/12/30/nmeasure-and-the-global-warming&quot;&gt;a while ago&lt;/a&gt;, whose predecessor is &lt;a href=&quot;/2010/11/30/dealing-with-primitive-obsession-this-time-measurements&quot;&gt;even older&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Primitives are still bad. The following illustrative code just happened to me two days ago (it didn&apos;t reach production, but hey):&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;csharp&quot;&gt;&lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Program&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;string&lt;/span&gt; UserId &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;u-123&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;string&lt;/span&gt; ProductId &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;p-abc&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
	
	&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Order&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;string&lt;/span&gt; userId&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;string&lt;/span&gt; productId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
		&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; System&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;$&lt;span class=&quot;token string&quot;&gt;&quot;User {userId} ordered {productId}&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
	
	&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Order&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ProductId&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; UserId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;See the problem? Because we are the dealing with ids as strings, the compiler can&apos;t help us when we use APIs the wrong way. When you use the API correctly in unit tests it so can happen that confusing such IDs may only turn up in integration or, as the &lt;em&gt;very last resort&lt;/em&gt;, production.&lt;/p&gt;
&lt;p&gt;The same mistake can happen to us in other languages, too. Here&apos;s the example in F#:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;fsharp&quot;&gt;&lt;pre class=&quot;language-fsharp&quot;&gt;&lt;code class=&quot;language-fsharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; getUserId &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;u-123&quot;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; getProductId &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;p-ABC&quot;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; order userId productId &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; 
    printfn &lt;span class=&quot;token string&quot;&gt;&quot;user %s orders %s&quot;&lt;/span&gt; userId productId

&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;EntryPoint&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; main argv &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;
    order getProductId getUserId
    &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The compiler happily does its job, no surprises. Obviously I chose F# as second example for a reason. Here, the barrier to type even singular primitives to provide improved compile time safety is considerably lower. Enter &lt;a href=&quot;https://fsharpforfunandprofit.com/posts/discriminated-unions/&quot;&gt;&lt;strong&gt;Discriminated Unions&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;They are something like the crack of type-safe pattern matching, or state representations on steroids or whatever you like to call them. Let&apos;s use them in our example:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;fsharp&quot;&gt;&lt;pre class=&quot;language-fsharp&quot;&gt;&lt;code class=&quot;language-fsharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; UserId &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; UserId &lt;span class=&quot;token keyword&quot;&gt;of&lt;/span&gt; string
&lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; ProductId &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; ProductId &lt;span class=&quot;token keyword&quot;&gt;of&lt;/span&gt; string

&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; getUserId &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; UserId &lt;span class=&quot;token string&quot;&gt;&quot;u-123&quot;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; getProductId &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; ProductId &lt;span class=&quot;token string&quot;&gt;&quot;p-ABC&quot;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; order &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;UserId userId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ProductId productId&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;
    printfn &lt;span class=&quot;token string&quot;&gt;&quot;user %s orders %s&quot;&lt;/span&gt; userId productId

&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;EntryPoint&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; main argv &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;
    order getUserId getProductId
    &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In this case the &lt;code class=&quot;language-text&quot;&gt;userId&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;productId&lt;/code&gt;are still essentially strings, but you can only get at them by acknowledging the type that is guarding those primitive values. It is hard to conceive and even smaller encoding of semantics with regard to some primitive value, which is why I highly approve of this use case of discriminated unions and often miss them in C#.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Typescript type shenanigans: Conditional Types]]></title><description><![CDATA[The amazing thing about Typescript's type system is not really that it strives to be the most complete type system, or the most formal, but…]]></description><link>https://realfiction.net/2018/06/10/typescript-type-shenanigans-conditional-types</link><guid isPermaLink="false">https://realfiction.net/2018/06/10/typescript-type-shenanigans-conditional-types</guid><pubDate>Sun, 10 Jun 2018 13:00:00 GMT</pubDate><content:encoded>&lt;p&gt;The amazing thing about Typescript&apos;s type system is not really that it strives to be the most complete type system, or the most formal, but in that in its pursue to be able to type all the things that lovers &amp;#x26; haters of javascript do with the language, it explores new avenues and possibilities. This post looks at a use case for a fairly recent addition, &lt;strong&gt;conditional types&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;But before we get there, bask in the glory of this nifty type (I saw it first in the typing for &lt;a href=&quot;https://github.com/reduxjs/redux/blob/619507a0fa46e6b90c5fca26eaf409c38a078faf/index.d.ts#L208&quot;&gt;redux&lt;/a&gt;).&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;typescript&quot;&gt;&lt;pre class=&quot;language-typescript&quot;&gt;&lt;code class=&quot;language-typescript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; DeepPartial&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;K&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; keyof &lt;span class=&quot;token constant&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; DeepPartial&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;K&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;What does it do? - Given some type, it recursively turns itself and all of its properties as optional (remember that the in-built &lt;code class=&quot;language-text&quot;&gt;Partial&amp;lt;T&amp;gt;&lt;/code&gt; does it flat on T).&lt;/p&gt;
&lt;p&gt;You don´t have to remember that. It has no relevance to what follows. It&apos;s &lt;em&gt;just&lt;/em&gt; a cool and useful type that shows off all the parts that Typescript has learned in the past year or so.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Right. &lt;a href=&quot;http://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-8.html&quot;&gt;Conditional Types&lt;/a&gt;. To me it always helps to have some example. This one also involves some react. Sorry. &lt;/p&gt;
&lt;p&gt;Imagine some &lt;strong&gt;UI component&lt;/strong&gt; which you can use in either of two ways.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I give it a list of items which contain links and the component renders the links in some useful and pretty fashion&lt;/li&gt;
&lt;li&gt;I give it a list of items which contain actions (functions to be invoked when some button is clicked), and now the component is to render buttons with the click triggering those actions.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note that the two item types are mutually exclusive. I either want it to render links, or buttons. Ideally I want Typescript to guide me so that I&apos;m filling in the details correctly.&lt;/p&gt;
&lt;p&gt;Let&apos;s encode the two types of functionality:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;typescript&quot;&gt;&lt;pre class=&quot;language-typescript&quot;&gt;&lt;code class=&quot;language-typescript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; ActionableItemType &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;action&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;link&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and the two kinds of items that I want to support:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;typescript&quot;&gt;&lt;pre class=&quot;language-typescript&quot;&gt;&lt;code class=&quot;language-typescript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ActionItem&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  label&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  action&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;LinkItem&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  label&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  link&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we are already ready to define our &lt;strong&gt;conditional type&lt;/strong&gt; 🎉 !&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;typescript&quot;&gt;&lt;pre class=&quot;language-typescript&quot;&gt;&lt;code class=&quot;language-typescript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; ActionableItem&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ActionableItemType&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; 
  &lt;span class=&quot;token constant&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;action&quot;&lt;/span&gt; 
  &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; ActionItem
  &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;link&quot;&lt;/span&gt; 
  &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; LinkItem 
  &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; never&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;what it says is that given some Type &lt;strong&gt;T&lt;/strong&gt;, when T extends the type &lt;strong&gt;&quot;action&quot;&lt;/strong&gt;, &lt;strong&gt;ActionableItem&lt;/strong&gt; is now an &lt;strong&gt;ActionItem&lt;/strong&gt;, otherwise if &lt;strong&gt;T&lt;/strong&gt; is &lt;strong&gt;&quot;link&quot;&lt;/strong&gt;, &lt;strong&gt;ActionableItem&lt;/strong&gt; is &lt;strong&gt;LinkItem&lt;/strong&gt;. To complete the type, we use the &lt;strong&gt;never-Type&lt;/strong&gt;, which is exactly for such cases where you want to use a Type that no instance can have.&lt;/p&gt;
&lt;p&gt;We are now armed to implement a react component that takes advantage of this typing, starting with defining the properties of the component.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;typescript&quot;&gt;&lt;pre class=&quot;language-typescript&quot;&gt;&lt;code class=&quot;language-typescript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ActionableItemComponentProps&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ActionableItemType&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  items&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;ActionableItem&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And the component itself&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;typescript&quot;&gt;&lt;pre class=&quot;language-typescript&quot;&gt;&lt;code class=&quot;language-typescript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ActionableItemComponent&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ActionableItemType&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Component&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;
  ActionableItemComponentProps&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// ... impl to come&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The component itself is now generic, that is when we work with the items passed in we don&apos;t know if these are action or link items (remember the runtime is javascript, so all your type info is pretty much erased at runtime). To get back typings you will make use of &lt;strong&gt;&lt;a href=&quot;http://www.typescriptlang.org/docs/handbook/advanced-types.html&quot;&gt;type guards&lt;/a&gt;&lt;/strong&gt;, a runtime check that gives your code safe areas where you may assume that something is indeed of the type you expect. Here are the two type guards that I will use in the &lt;code class=&quot;language-text&quot;&gt;render&lt;/code&gt;-code&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;typescript&quot;&gt;&lt;pre class=&quot;language-typescript&quot;&gt;&lt;code class=&quot;language-typescript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;isActionsArray&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;items&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; items is ActionItem&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; items&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; items&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;action&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;isItemsArray&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;items&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; items is LinkItem&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; items&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; items&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;link&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can see that I only check the first item of some array to check whether I have action or link types. The underlying assumption is that the call site is &lt;strong&gt;also written in TypeScript&lt;/strong&gt;. You will see that the compile time check will ensure that all items must adhere to the same type.&lt;/p&gt;
&lt;p&gt;Now we are ready to implement a render function for the &lt;code class=&quot;language-text&quot;&gt;ActionableItemComponent&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;typescript&quot;&gt;&lt;pre class=&quot;language-typescript&quot;&gt;&lt;code class=&quot;language-typescript&quot;&gt;&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; items &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Container&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;isActionsArray&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;items&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;renderActionItems&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;items&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;isItemsArray&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;items&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;renderLinkItems&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;items&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;Container&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The implementation of &lt;code class=&quot;language-text&quot;&gt;renderActionItems&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;renderLinkItems&lt;/code&gt; is left to the reader (No, it&apos;s not, you can actually &lt;a href=&quot;https://github.com/flq/ts-react-playground/blob/ac41d388a3746f66f63dd215d65801cac9ceaaaf/src/examples/ActionableItems.tsx#L37&quot;&gt;find it here&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;The only thing left is to make the component readily available to users of the component (The generic in there means we can&apos;t use it easily straight away), so we provide two convenience types to have the two different styles of rendering actionable items:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;typescript&quot;&gt;&lt;pre class=&quot;language-typescript&quot;&gt;&lt;code class=&quot;language-typescript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; ActionItemsComponent &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; ActionableItemComponent&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;action&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; ActionItemsComponent &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; ActionableItemComponent &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; ActionItemsComponent&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; LinkItemsComponent &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; ActionableItemComponent&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;link&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; LinkItemsComponent &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; ActionableItemComponent &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; LinkItemsComponent&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Users of the component can now go ahead and use it as such:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;typescript&quot;&gt;&lt;pre class=&quot;language-typescript&quot;&gt;&lt;code class=&quot;language-typescript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; React &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;react&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; ActionItemsComponent&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; LinkItemsComponent &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;./ActionableItems&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; UsingActions &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function-variable function&quot;&gt;SFC&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;ActionItemsComponent items&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;action&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Hallelujah&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; label&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;alerted&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; UsingLinks &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function-variable function&quot;&gt;SFC&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;LinkItemsComponent items&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;link&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;/#whatever&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; label&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;whatever link&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Depending on either usage, the consumer gets nice type safety on how the items need to be structured, while the implementation can make use of the conditional type to provide a single implementation. &lt;/p&gt;
&lt;p&gt;&lt;em&gt;Of course&lt;/em&gt; there are many ways to encode such functionality, and if the two styles of rendering diverge a lot, you may be better off implementing two different components. Even so, I hope it helps you to consider in what ways conditional types can be useful to you.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Mob Programming - first impressions]]></title><description><![CDATA[I am currently involved in product development with a small but fine team (4 devs, one product designer). We had to  redo  one of the core…]]></description><link>https://realfiction.net/2018/03/25/mob-programming-first-impressions</link><guid isPermaLink="false">https://realfiction.net/2018/03/25/mob-programming-first-impressions</guid><pubDate>Sun, 25 Mar 2018 13:00:00 GMT</pubDate><content:encoded>&lt;p&gt;I am currently involved in product development with a small but fine team (4 devs, one product designer). We had to &lt;em&gt;redo&lt;/em&gt; one of the core components in order to make it fit for its refined and renewed responsibilities. We did not see how we could work separately or even in pairs on this central junction of the application - the decision was made to go forward with &lt;a href=&quot;http://mobprogramming.org&quot;&gt;mob programming&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/mob-programming.jpeg&quot; alt=&quot;mob programming visualization&quot;&gt;&lt;/p&gt;
&lt;h2&gt;how we did it&lt;/h2&gt;
&lt;p&gt;For about 2½ days we were sitting together. Each one brought their laptop along so that we didn&apos;t have to get used to someone else&apos;s dev environment. One was the &quot;driver&quot;, typing what needs to be done and projecting the screen onto the Surface Hub. The others are the &quot;navigators&quot;. We would set the time at 15 minutes for switching the driver, but we usually let the current &quot;step&quot; end before switching over. Switching over meant pushing to the branch, and the next one pulling and carrying on.&lt;/p&gt;
&lt;h2&gt;interesting precondition&lt;/h2&gt;
&lt;p&gt;We did not reinvent the component completely but had the previous incarnation to work with. That way it had characteristics of a code kata.&lt;/p&gt;
&lt;h2&gt;how did it turn out?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Mob programming does not optimize for speed&lt;/strong&gt; - while it is hard to put a number on this, subjectively it feels &lt;em&gt;slower&lt;/em&gt; than working alone or in pair. There is simply more brain in the room and things need to be sorted out!&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Mob programming optimizes for code soundness&lt;/strong&gt; - With all people involved, the solution seemed to converge towards building what is necessary. Hence, there weren&apos;t masses of code involved but that which was written was absolutely &lt;em&gt;necessary&lt;/em&gt;, &lt;em&gt;well named&lt;/em&gt; and &lt;em&gt;sound&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Mob programming optimizes for knowledge transfer and learning&lt;/strong&gt; - You get to see how others write code and run their coding errands. Everybody makes an effort to understand what is happening (since everybody will be driver or navigator at some point). f something is unclear it will be asked straight away, then explained, or the question actually leads to code modifications with regard to naming and clarity. If everybody must understand the code, it must be pretty clear.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Mob programming optimizes for team flow and empathy&lt;/strong&gt; - It provided a sense of shared accomplishment and generally &quot;good vibes&quot; in that the whole team sits in the same boat and everybody can peek into the other&apos;s mind.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;would we do it again?&lt;/h2&gt;
&lt;p&gt;Yes, &lt;strong&gt;absolutely&lt;/strong&gt;. I think there are many tasks that can be &lt;em&gt;done well&lt;/em&gt; alone or in pair. But if you need a concerted effort that requires a number of changes and a lot of thinking, or possibly a situation where you introduce a new concept, this approach appears to make a lot of sense. But beware, though, that, at least for us, the mob programming days were &lt;strong&gt;absolutely exhausting&lt;/strong&gt;. A lot of focus and zero distractions means that at the end of the day you are done!&lt;/p&gt;
&lt;p&gt;It&apos;s worth it, though, give it a spin if you get the chance.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[In love, until it's my turn]]></title><description><![CDATA[Gustav A. Quednau 22.01.1937 - 03.11.2017 In love, until it is my turn Mourning the loss of a loved one is a private matter. This post…]]></description><link>https://realfiction.net/2017/11/25/in-love-until-its-my-turn</link><guid isPermaLink="false">https://realfiction.net/2017/11/25/in-love-until-its-my-turn</guid><pubDate>Sat, 25 Nov 2017 13:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;img src=&quot;/assets/Gustav_1963.jpg&quot; alt=&quot;Gustav Quednau&quot;&gt;&lt;/p&gt;
&lt;h2&gt;Gustav A. Quednau 22.01.1937 - 03.11.2017&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;In love, until it is my turn&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Mourning the loss of a loved one is a private matter. This post, however, wants to focus on a specific subject of public relevance. &lt;em&gt;I have lost the one person I know who has consciously witnessed the second World War.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Reaching the age of 80 is OK, depending on how you live your life. There is no denying, however, that the witnesses of WWII are going away. Soon, the most horrible war in the history of humanity will strike as much fear into the hearts of pupils as the 30 Years&apos; war, the crusades, or any other of the countless wars that occurred in the past.&lt;/p&gt;
&lt;h3&gt;None.&lt;/h3&gt;
&lt;p&gt;My Dad, on the other hand, could never let go of those years in his childhood. The bombs, the burning houses. The dead, the chaos, the despotism, the hate and spitefulness. In retrospect, it&apos;s hard to believe what good person he was with that background. So many people were shattered by the war. I never met one of my granddads. They withered away long before I came to life.&lt;/p&gt;
&lt;p&gt;The upbringing in Germany didn&apos;t leave me untouched. I grew up aware of the atrocities committed by the Nazis. At first, when I came studying to England, it was hard for me to take in how nonchalantly Hitler was built into humour (Fawlty Towers, anyone?). &lt;em&gt;Unpossible&lt;/em&gt; in Germany when I was young. Beyond that, can you actually believe a German studying in the UK, with the aid of EU funding? Just a little more than 20 years ago.&lt;/p&gt;
&lt;p&gt;People like my father made this possible. He was a businessman. So he made business - with Spanish people, French, Belgian, British, Italian, Greek and who knows who else. He enjoyed working with them. Those people are the foundation of the EU we have come to love.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(for the record: I don&apos;t love excessive bureaucracy, but I enjoy going to France to buy cheese and fish, not noticing a border, because there is none, paying the same currency and using internet because there is no fucking roaming! If you force me to choose between a bureaucratic government or dying on the front, I know I&apos;ll choose the former)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;My Dad wouldn&apos;t believe that the same stinking brown sludge is pouring out of the sewers of the nations again. He thought that we&apos;d learned. He mostly despised Germans. He loved the US for having put the final nail into the coffin wherein lies the Nazi regime. &lt;/p&gt;
&lt;p&gt;I couldn&apos;t ask him whether he thought that other nations could be capable of the same atrocities. He may have believed that the Germans were special in that respect.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Me, I don&apos;t think so.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Everywhere where&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Democratic representatives cannot be trusted anymore to do as they say&lt;/li&gt;
&lt;li&gt;The wealthy think that they are actually better than the rest and are entitled to even more&lt;/li&gt;
&lt;li&gt;Institutions fail to rigorously weed out the stinking filth that always forms at the bottom of any living system and begin to show blind eyes towards certain groups of people&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;You will get Nazis&lt;/strong&gt;. If you let them prosper, they will &lt;strong&gt;ensnare you&lt;/strong&gt; by channeling the anger and vile that the above points accumulate in you. They will tap on your &lt;strong&gt;racism&lt;/strong&gt; that is related to a lack of empathy, exposure to different viewpoints and a terrible legacy of our evolutionary background. They will get &lt;strong&gt;cocky&lt;/strong&gt;. They will erode the institutions while sweet-talking you into parting with your morale, your ethics and utimately your soul. They will happily &lt;strong&gt;throw your body into a meat grinder&lt;/strong&gt; if it furthers their Agenda. It is the evil that will consume itself when there is nothing left to burn.&lt;/p&gt;
&lt;p&gt;Hence, if you&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;consider yourself better because your parents provided you with the bootstraps to bootstrap yourself&lt;/li&gt;
&lt;li&gt;look down at refugees from countries where the same atrocities occur that occur in every goddamn war&lt;/li&gt;
&lt;li&gt;look down at people because they look different or think different to you&lt;/li&gt;
&lt;li&gt;justify violence to fellow humans for shallow agendas that are easily seen through&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I have nothing for you here. You are living below your potential and you are a shame to humanity. My parents didn&apos;t help build Europe for Nazis to trample all over it again.&lt;/p&gt;
&lt;p&gt;I haven&apos;t forgotten. Have you?&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Json and local storage with elm]]></title><description><![CDATA[In the quest of porting a react/redux-app named  remorse  to elm, once more I came across the requirement to store the current progress of…]]></description><link>https://realfiction.net/2017/08/29/json-and-local-storage-with-elm</link><guid isPermaLink="false">https://realfiction.net/2017/08/29/json-and-local-storage-with-elm</guid><pubDate>Tue, 29 Aug 2017 13:00:00 GMT</pubDate><content:encoded>&lt;p&gt;In the quest of porting a react/redux-app named &lt;a href=&quot;http://realfiction.net/remorse&quot;&gt;remorse&lt;/a&gt; to elm, once more I came across the requirement to store the current progress of the user to local storage.
Now, dealing with json was easily the least enjoyable part of the port. elm requires you to specify encoders and decoders in order to get from json to your elm code and back.
To me, it does seem repetitive. After all, e.g. in .NET, when I have some instance, reflection allows me to understand the instance and then lets me build a fast encoder / decoder at runtime.
This option isn&apos;t available in elm.&lt;/p&gt;
&lt;p&gt;The one advantage this approach &lt;strong&gt;does&lt;/strong&gt; have is forcing you to think very carefully about what you will put out to json. Your json models will most certainly become independent of your programming models, which is actually a good thing. &lt;em&gt;Still&lt;/em&gt; ...&lt;/p&gt;
&lt;p&gt;Let us start with the user interaction. &lt;a href=&quot;https://github.com/flq/elmorse/blob/8db340ed97ffe00ae075d7cca4236962b8336570/src/Navigation/View.elm#L25-L27&quot;&gt;The user clicks&lt;/a&gt;{:target=&quot;_blank&quot;} on &quot;Save current settings&quot;...&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;a [onClick SaveAppState] [text &amp;quot;Save current settings&amp;quot;]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The message is handled in the &lt;strong&gt;update&lt;/strong&gt; function &lt;a href=&quot;https://github.com/flq/elmorse/blob/8db340ed97ffe00ae075d7cca4236962b8336570/src/Update.elm#L33-L34&quot;&gt;by creating a Command&lt;/a&gt;{:target=&quot;&lt;em&gt;blank&quot;} which will do the job. Let us look at the &lt;a href=&quot;https://github.com/flq/elmorse/blob/8db340ed97ffe00ae075d7cca4236962b8336570/src/StateStorage.elm#L42-L52&quot;&gt;contents of the command&lt;/a&gt;{:target=&quot;&lt;/em&gt;blank&quot;}.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;saveAppState model = 
  let
      map m = 
        {
          userInput = m.userInput,
          lettersInScope = m.lettersInScope,
          morseSpeed = m.morseSpeed,
          trainCount = m.trainCount
        } 
  in
    storeObject (stateKey, encode &amp;lt;| map model)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code class=&quot;language-text&quot;&gt;map&lt;/code&gt; function is a straightforward mapper that extracts just those values that I care about in terms of persisting. That value is passed through an encoder, whose output is then stored.&lt;/p&gt;
&lt;p&gt;Here&apos;s the &lt;a href=&quot;https://github.com/flq/elmorse/blob/8db340ed97ffe00ae075d7cca4236962b8336570/src/StateStorage.elm#L54-L61&quot;&gt;encoder&lt;/a&gt;{:target=&quot;_blank&quot;}:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;import Json.Encode as J exposing (object)
...
encode : Progress -&amp;gt; J.Value
encode p =
  object [
    (&amp;quot;userInput&amp;quot;, J.string p.userInput),
    (&amp;quot;lettersInScope&amp;quot;, J.list &amp;lt;| List.map J.string p.lettersInScope),
    (&amp;quot;morseSpeed&amp;quot;, J.float p.morseSpeed),
    (&amp;quot;trainCount&amp;quot;, J.int p.trainCount)    
  ]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You see, we have to encode all that what we know about the target model into the encoder as well. To an old-fashioned Newtonsoft user this seemed ludicrous, but yes, reflection isn&apos;t really a thing in functional programming, and looking at &lt;strong&gt;Haskell&lt;/strong&gt;, one of the fathers of elm, to pull off something more comfortable than this, it requires the programmer to use certain metaprogramming directives to instruct the compiler to do certain work for us.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;final&lt;/strong&gt; piece in the Puzzle is the &lt;code class=&quot;language-text&quot;&gt;storeObject&lt;/code&gt;, which is an interop function, because elm doesn&apos;t have an in-built API to talk to local storage.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;port storeObject : (String, J.Value) -&amp;gt; Cmd msg&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and &lt;a href=&quot;https://github.com/flq/elmorse/blob/8db340ed97ffe00ae075d7cca4236962b8336570/src/localStoragePort.js#L21-L23&quot;&gt;its implementation&lt;/a&gt;{:target=&quot;_blank&quot;}:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; storage &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;localStorage &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;setItem&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;k&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; v&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;k&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; v&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;getItem&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;k&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;k&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;storeObject&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;key&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; object&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  storage&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setItem&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;key&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;object&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The end result being that the desired values are stored in the browser&apos;s local storage for later retrieval.&lt;/p&gt;
&lt;p&gt;There is no explicit functionality to load the currently stored settings - this happens when the application starts up. How?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The elm application is started, inside the init it is requested to load json from local storage&lt;/li&gt;
&lt;li&gt;Once loaded, the data is made available, decoded and sent into the &lt;code class=&quot;language-text&quot;&gt;update&lt;/code&gt; part of the application.&lt;/li&gt;
&lt;li&gt;If data is available and correctly loaded, the data is taken into the main application model.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let&apos;s go in reverse this time, beginning with the &lt;a href=&quot;https://github.com/flq/elmorse/blob/8db340ed97ffe00ae075d7cca4236962b8336570/src/localStoragePort.js#L10-L17&quot;&gt;retrieval functionality&lt;/a&gt;{:target=&quot;_blank&quot;} implemented in javascript.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;initLocalStoragePort&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;elmApp&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  elmApp&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ports&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;storeObject&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;key&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; state&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;storeObject&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;key&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; state&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  elmApp&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ports&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;retrieveObject&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;key&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; o &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;retrieveObject&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;key&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    elmApp&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ports&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;objectRetrieved&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;key&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; o&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Elm is very strict with regard to values entering your application from the outside. Basically, you perform a request (&lt;em&gt;Command&lt;/em&gt;) and then wait for a response (&lt;em&gt;Subscription&lt;/em&gt;):&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;port retrieveObject : String -&amp;gt; Cmd msg
port objectRetrieved : ((String, J.Value) -&amp;gt; msg) -&amp;gt; Sub msg&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let us look at the &lt;a href=&quot;https://github.com/flq/elmorse/blob/8db340ed97ffe00ae075d7cca4236962b8336570/src/StateStorage.elm#L18-L26&quot;&gt;subscription&lt;/a&gt;{:target=&quot;_blank&quot;}.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;import Json.Decode as D exposing (int, string, float, list, Decoder)

appStateLoaded : Sub Msg
appStateLoaded =
  let
    getModel json = case (D.decodeValue modelDecoder json) of
      Ok m -&amp;gt; Just m
      Err _ -&amp;gt; Nothing
    retrieval (key, json) =
      OnAppStateLoaded (getModel json)
  in
    objectRetrieved retrieval&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Using &lt;a href=&quot;https://github.com/flq/elmorse/blob/8db340ed97ffe00ae075d7cca4236962b8336570/src/StateStorage.elm#L64-L69&quot;&gt;the decoder&lt;/a&gt;{:target=&quot;_blank&quot;} &lt;code class=&quot;language-text&quot;&gt;modelDecoder&lt;/code&gt;, it is attempted to retrieve the data from local storage. The decoder
may fail, which should usually mean that a value has never been stored. Once the decoded model instance is available, it is piped into the system through a message (&lt;code class=&quot;language-text&quot;&gt;OnAppStateLoaded&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Finally, the whole chain is triggered with the &lt;code class=&quot;language-text&quot;&gt;loadAppStateCommand&lt;/code&gt; inside the init function which is called right at the beginning
of the program.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;init location =
    let
        currentRoute = Route.parseLocation location
    in
        (initialModel currentRoute, loadAppState)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;with &lt;code class=&quot;language-text&quot;&gt;loadAppState&lt;/code&gt; being...&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;loadAppState : Cmd msg
loadAppState = retrieveObject stateKey  &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With the end result being, that when the application starts, settings will be loaded from local storage right into the model if there are settings available.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[react/redux to elm feature comparison: playing morse sounds]]></title><description><![CDATA[This post is about how the feature of listening to morse sounds when pressing the button... ...is implemented. react/redux elm react/redux…]]></description><link>https://realfiction.net/2017/08/21/react-redux-to-elm-feature-comparison-playing-morse-sounds</link><guid isPermaLink="false">https://realfiction.net/2017/08/21/react-redux-to-elm-feature-comparison-playing-morse-sounds</guid><pubDate>Mon, 21 Aug 2017 19:56:00 GMT</pubDate><content:encoded>&lt;p&gt;This post is about how the feature of listening to morse sounds when pressing the button...&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/play-morse-button.png&quot; alt=&quot;ts auto-complete&quot;&gt;&lt;/p&gt;
&lt;p&gt;...is implemented.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#reactredux&quot;&gt;react/redux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#elm&quot;&gt;elm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;react/redux&lt;/h3&gt;
&lt;p&gt;Let&apos;s start with the user interaction &lt;a href=&quot;https://github.com/flq/remorse/blob/834762ec8185fa024160c397a07000e6cd7667fd/src/TypingScreen/TypingScreen.js#L37-L43&quot;&gt;in the UI&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;html&quot;&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;input&lt;/span&gt;
    &lt;span class=&quot;token attr-name&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;button&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token attr-name&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;soundButton&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token attr-name&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;token entity&quot; title=&quot;&amp;#128266;&quot;&gt;&amp;amp;#128266;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token attr-name&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;{playSound}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;playSound&lt;/code&gt; is an action that is surfaced through react-redux&apos; &lt;code class=&quot;language-text&quot;&gt;connect&lt;/code&gt;-functionality. The action &lt;a href=&quot;https://github.com/flq/remorse/blob/834762ec8185fa024160c397a07000e6cd7667fd/src/TypingScreen/Actions.js#L23-L28&quot;&gt;looks like that&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;playSound&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;dispatch&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; getState&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; userInput&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; soundSpeed &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;typing&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;textAsMorseSound&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;userInput&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; soundSpeed&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This type of function is supported by the &lt;a href=&quot;https://github.com/gaearon/redux-thunk&quot;&gt;redux-thunk&lt;/a&gt; middleware, which provides the dispatch and getState functions to be able to perform &lt;em&gt;side-effects&lt;/em&gt; within a user-UI interaction. &lt;a href=&quot;https://github.com/flq/remorse/blob/834762ec8185fa024160c397a07000e6cd7667fd/src/components/SoundLib.js#L32&quot;&gt;Digging deeper&lt;/a&gt;: &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;textAsMorseSound&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;input&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; soundSpeed&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; c &lt;span class=&quot;token keyword&quot;&gt;of&lt;/span&gt; Array&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;input&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; code &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;charToMorseCode&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;c&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;asyncPlayMorse&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Array&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;code&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; soundSpeed&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;DASH_LENGTH&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; soundSpeed&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Pause between chars&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;//...&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;millisecs&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; value &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;res&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; rej&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; millisecs&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The async/await, part of ES2017, but already available through babeljs-transpiling, allows you to work with promises much like you do with Tasks in the post .NET 4.5 world.
This makes the code that performs the necessary time delays &lt;a href=&quot;https://github.com/flq/remorse/blob/834762ec8185fa024160c397a07000e6cd7667fd/src/components/SoundLib.js#L40-L64&quot;&gt;much easier to read&lt;/a&gt;. &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// characters: Array of strings like &quot;-&quot; and &quot;.&quot; and &quot; &quot;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;asyncPlayMorse&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;characters&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; soundSpeed &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; c &lt;span class=&quot;token keyword&quot;&gt;of&lt;/span&gt; characters&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;c&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;.&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;startSound&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;DOT_LENGTH&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; soundSpeed&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;stopSound&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;DOT_LENGTH&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; soundSpeed&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;-&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;startSound&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;DASH_LENGTH&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; soundSpeed&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;stopSound&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;DOT_LENGTH&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; soundSpeed&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;PAUSE&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; soundSpeed&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;c&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Finally &lt;code class=&quot;language-text&quot;&gt;startSound&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;stopSound&lt;/code&gt; connect and disconnect the oscillator that &lt;a href=&quot;https://github.com/flq/remorse/blob/834762ec8185fa024160c397a07000e6cd7667fd/src/components/SoundLib.js#L14-L30&quot;&gt;is set up&lt;/a&gt; to the audio output of the browser.&lt;/p&gt;
&lt;h3&gt;elm&lt;/h3&gt;
&lt;p&gt;As you can imagine, not every single browser API is surfaced to elm - hence the concept of defining ports, a subsystem that allows you to interop to plain javascript and its access to all of the browser&apos;s API.
Therefore, we go ahead and &lt;a href=&quot;https://github.com/flq/elmorse/blob/ce330e70098106e988d92059c3762708c43646f5/src/Interop.elm#L5-L6&quot;&gt;define ports&lt;/a&gt; to start and stop the sound:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;port audioOn &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; Cmd msg
port audioOff &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; Cmd msg&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In javascript, we need to fill these ports &lt;a href=&quot;https://github.com/flq/elmorse/blob/ce330e70098106e988d92059c3762708c43646f5/src/Typing/audioPort.js#L23-L35&quot;&gt;with life&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;initAudioPort&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;elmApp&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; isConnected &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  elmApp&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ports&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;audioOn&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;isConnected&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    oscillator&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;audioCtx&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;destination&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    isConnected &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  elmApp&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ports&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;audioOff&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;isConnected&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    oscillator&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;disconnect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;audioCtx&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;destination&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    isConnected &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// which is used like that:&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; app &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Main&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;embed&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;root&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;initAudioPort&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;app&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now that we have this in place, we can stay in elm to implement the functionality. Let&apos;s &lt;a href=&quot;https://github.com/flq/elmorse/blob/ce330e70098106e988d92059c3762708c43646f5/src/Typing/View.elm#L36-L40&quot;&gt;start in the UI&lt;/a&gt; again:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;input &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
  type_ &lt;span class=&quot;token string&quot;&gt;&quot;button&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 
  &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;soundButton&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 
  onClick OnListenToMorse&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  value &lt;span class=&quot;token string&quot;&gt;&quot;Play Morse&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;OnListenToMorse&lt;/code&gt;is a defined message that needs to be handled in the &lt;code class=&quot;language-text&quot;&gt;update&lt;/code&gt; function of your application.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;sql&quot;&gt;&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;update&lt;/span&gt; msg model &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; 
  &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; msg &lt;span class=&quot;token keyword&quot;&gt;of&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;-- stuff&lt;/span&gt;
    OnListenToMorse &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;model&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; Audio&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;playWords model&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;userInput model&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;morseSpeed&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Just like in the redux app, where I didn&apos;t show any reducer code, implying that nothing changes in the application&apos;s model, the only reaction here consists of initiating a &lt;em&gt;side-effect&lt;/em&gt;.
&lt;a href=&quot;https://github.com/flq/elmorse/blob/8db340ed97ffe00ae075d7cca4236962b8336570/src/Typing/MorseAudio.elm#L37-L41&quot;&gt;What happens in&lt;/a&gt; &lt;code class=&quot;language-text&quot;&gt;playWords&lt;/code&gt; ?&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;sql&quot;&gt;&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;playWords : String &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;Float&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; Cmd Msg
playWords words factor &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; 
  stringToMorseSymbols words
  &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; List&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;map &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;convertSymbolToCommands factor&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; bringTogether

&lt;span class=&quot;token comment&quot;&gt;-- type of stringToMorseSymbols: String -&gt; List MorseSymbol&lt;/span&gt;

convertSymbolToCommands: &lt;span class=&quot;token keyword&quot;&gt;Float&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; MorseSymbol &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; List &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Milliseconds&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; Msg&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
convertSymbolToCommands factor symbol &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;
  let
    adapt &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;millisecs&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; msg&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;millisecs &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; factor&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; msg&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    adaptAll &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; List&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;map adapt
  &lt;span class=&quot;token operator&quot;&gt;in&lt;/span&gt;
    adaptAll &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; symbol &lt;span class=&quot;token keyword&quot;&gt;of&lt;/span&gt;
      Dot &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; playDot
      Dash &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; playDash
      ShortPause &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; playBetweenChars
      LongPause &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; playBetweenWords
      Garbled &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; playBetweenWords

&lt;span class=&quot;token comment&quot;&gt;-- example of the &quot;play&quot; functions:&lt;/span&gt;

playDot: List &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Milliseconds&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; Msg&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
playDot &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;  
  &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;SoundMsg StartSound&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;dotLength&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;SoundMsg StopSound&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pauseBetweenChars&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; NoOp&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;-- from tuples to commands&lt;/span&gt;

bringTogether : List &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;List &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; Milliseconds&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; Msg &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; Cmd Msg
bringTogether &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; List&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;concat &lt;span class=&quot;token operator&quot;&gt;&gt;&gt;&lt;/span&gt; List&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;map toSequenceTuple &lt;span class=&quot;token operator&quot;&gt;&gt;&gt;&lt;/span&gt; sequence&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In other words, first the user input is converted to a list of morse symbols.
This is then processed to a &lt;strong&gt;list of list of tuples&lt;/strong&gt; that state at
which relative time in milliseconds which message should be piped into the update function (See e.g. &lt;code class=&quot;language-text&quot;&gt;Dot -&amp;gt; playDot + applying speed factor&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;The final ingredient to this magic is the &lt;strong&gt;sequence&lt;/strong&gt; function from the elm package &lt;a href=&quot;http://package.elm-lang.org/packages/andrewMacmurray/elm-delay/latest/Delay#sequence&quot;&gt;delay&lt;/a&gt;. &lt;a href=&quot;https://github.com/andrewMacmurray/elm-delay/blob/2.0.2/src/Delay.elm&quot;&gt;The code&lt;/a&gt; is actually not super-complex,
it does the necessary plumbing to call out to &lt;strong&gt;Process.sleep&lt;/strong&gt; the elm equivalent to javascript&apos;s &lt;code class=&quot;language-text&quot;&gt;setTimeout&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;What happens then, when the &lt;code class=&quot;language-text&quot;&gt;SoundMsg StartSound&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;StopSound&lt;/code&gt; messages are received?&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;sql&quot;&gt;&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;update&lt;/span&gt; msg model &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; 
  &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; msg &lt;span class=&quot;token keyword&quot;&gt;of&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;-- stuff&lt;/span&gt;
    SoundMsg msg &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; 
      Audio&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;update&lt;/span&gt; msg model

&lt;span class=&quot;token comment&quot;&gt;-- In audio update:&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;update&lt;/span&gt; : SoundMsg &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; Model &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Model&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; Cmd Msg&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;update&lt;/span&gt; msg model &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; msg &lt;span class=&quot;token keyword&quot;&gt;of&lt;/span&gt;
    StartSound &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;model&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; audioOn &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    StopSound &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;model&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; audioOff &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And &lt;a href=&quot;https://github.com/flq/elmorse/blob/8db340ed97ffe00ae075d7cca4236962b8336570/src/Typing/MorseAudio.elm#L17-L21&quot;&gt;here is where&lt;/a&gt; you finally find the calls to the interop ports we defined to connect and disconnect the Oscillator :)&lt;/p&gt;
&lt;p&gt;Which route do you prefer?&lt;/p&gt;</content:encoded></item><item><title><![CDATA['Porting' a react application to elm - starting with a conclusion]]></title><description><![CDATA[As I threatened  over here , my main aim in writing the morse learning app  "remorse"  was to have a baseline to which I can compare ports…]]></description><link>https://realfiction.net/2017/08/19/porting-a-react-application-to-elm-starting-with-a-conclusion</link><guid isPermaLink="false">https://realfiction.net/2017/08/19/porting-a-react-application-to-elm-starting-with-a-conclusion</guid><pubDate>Sat, 19 Aug 2017 21:00:00 GMT</pubDate><content:encoded>&lt;p&gt;As I threatened &lt;a href=&quot;/2017/07/26/react-redux-in-a-real-application-prelude&quot;&gt;over here&lt;/a&gt;, my main aim in writing the morse learning app &lt;a href=&quot;http://realfiction.net/remorse&quot;&gt;&quot;remorse&quot;&lt;/a&gt; was to have a baseline to which I can compare ports to other languages. Now that I have &lt;a href=&quot;https://github.com/flq/elmorse&quot;&gt;done the port&lt;/a&gt; towards &lt;a href=&quot;http://elm-lang.org&quot;&gt;elm&lt;/a&gt;*), I would like to start with a conclusion and only in later posts do some direct comparisons between solutions.&lt;/p&gt;
&lt;p&gt;When you have developed an application based on react and redux, you know a little bit of what&apos;s coming to you in terms of how the UI is the source of messages, which changes the application state as well as triggers activities.&lt;/p&gt;
&lt;p&gt;You will find those architectural components again in elm albeit assembled into a more stringent form.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The UI raises a message&lt;/li&gt;
&lt;li&gt;This message must be handled in an update function.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Handling the message, you return a tuple that contains&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The desired mutation of the application state, if any&lt;/li&gt;
&lt;li&gt;A desired Command to be executed which may produce a new message, if any&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;After which the UI is rendered with the new state&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you happen to have written all your UI as functions in react (which actually happened in remorse without me really aiming for it), you are already in a good mindset to get into elm, since views in elm are pure in that they cannot depend on any sort of &lt;strong&gt;internal state&lt;/strong&gt; but only depend on their input.&lt;/p&gt;
&lt;p&gt;Elm&apos;s rampup is quite excellent and you will be up and running in a short amount of time. I have been developing in vs code with the elm plugin by Sascha Brink, which provides some basic support to display compiler errors in place and helps you a little bit in auto-completion, etc. Granted, considering the static typing nature of elm, more could be done in this area.&lt;/p&gt;
&lt;h3&gt;Elm loves refactoring&lt;/h3&gt;
&lt;p&gt;What I did wrong in a previous experiment but got right this time is to &lt;strong&gt;not overthink your solution&lt;/strong&gt;. That is, start messing around in &lt;em&gt;Main.elm&lt;/em&gt; and when you feel like you have to refactor, do it then. If you have a working application, refactoring in elm is quite straightfoward and when your pieces compile again, the chances of it also working again are pretty high.&lt;/p&gt;
&lt;h3&gt;Right now, I don&apos;t like the Haskell-inspired code formatting&lt;/h3&gt;
&lt;p&gt;This is the standard formatting&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;ul [class &amp;quot;grocery-list&amp;quot;]
  [ li [] [text &amp;quot;Pamplemousse&amp;quot;]
  , li [] [text &amp;quot;Ananas&amp;quot;]
  , li [] [text &amp;quot;Jus d&amp;#39;orange&amp;quot;]
  ]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Right now I&apos;m doing this.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;sql&quot;&gt;&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;ul &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;class &lt;span class=&quot;token string&quot;&gt;&quot;grocery-list&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; 
  li &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Pamplemousse&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  li &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Ananas&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  li &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Jus d&apos;orange&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If I wasn&apos;t working alone, I would have to adapt, and at the end of the day, formatting is only so important, but I sure don&apos;t like it.&lt;/p&gt;
&lt;h3&gt;Json Encode/Decode I don&apos;t even&lt;/h3&gt;
&lt;p&gt;When I first encountered how json must be handled in Elm I was fairly disappointed. If I have defined some type, it would be great to be able to use exactly that information that I have already distilled into said type to be able to get an instance from json or the other way round. However, you will have to define encoders and decoders to perform the feat of moving to / from json.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://tech.noredink.com/post/164185230948/decoding-decoders&quot;&gt;This post&lt;/a&gt;, however, reminded me, that this step will lead you to develop your serialization models independently from your application types (if it&apos;s not clear what I&apos;m saying, have a read through the post). My first attempt to let the user store the current state was to store the complete model, because in javascript it is a no-brainer to store a javascript object like that. This was an uphill battle. The next approach, checking what exactly I need to store and then map the values into the structure to store the data to json, felt much better and more productive.&lt;/p&gt;
&lt;h3&gt;Elm is opinionated&lt;/h3&gt;
&lt;p&gt;Elm gives you very clear guidance on how your application works. It is clear on how you do view changes, how you perform actions and how outside data enters your application. It has an opinion on how to do json and beyond the code, it has clear opinions on how to advance the language and its ecosystem. If you approve of those opinions you should be in for a smooth ride.&lt;/p&gt;
&lt;p&gt;--
*) Without the trainings evaluation and charts for now&lt;/p&gt;</content:encoded></item><item><title><![CDATA[MS ASP.NET MVC Certification course vs ASP.NET core]]></title><description><![CDATA[When you do the MS exams to become a certified developer you may come across the 486 course. The  supporting video  for that is 4 years old…]]></description><link>https://realfiction.net/2017/07/29/ms-asp-net-mvc-certification-course-vs-asp-net-core</link><guid isPermaLink="false">https://realfiction.net/2017/07/29/ms-asp-net-mvc-certification-course-vs-asp-net-core</guid><pubDate>Sat, 29 Jul 2017 21:38:46 GMT</pubDate><content:encoded>&lt;p&gt;When you do the MS exams to become a certified developer you may come across the 486 course. The &lt;a href=&quot;https://channel9.msdn.com/Series/Dev-ASP-MVC4-WebApps&quot;&gt;supporting video&lt;/a&gt; for that is 4 years old and is based on MVC 4. This post keep the notes I made while working through the video&apos;s content based on ASP.NET Core&apos;s capabilities, to see whether the info in there still holds up. The code is &lt;a href=&quot;https://github.com/flq/MS486Core&quot;&gt;checked in&lt;/a&gt;, the commits more or less follow the progress made in the videos on channel 9.&lt;/p&gt;
&lt;!-- START doctoc generated TOC please keep comment here to allow auto update --&gt;
&lt;!-- DON&apos;T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#video-1---introduction&quot;&gt;Video 1 - Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#video-2---models&quot;&gt;Video 2 - Models&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#video-3--controllers&quot;&gt;Video 3- Controllers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#video-4--views&quot;&gt;Video 4- Views&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#video-5---javascript-page-updates-etc&quot;&gt;Video 5 - Javascript, Page updates etc.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#video-6---web-apis&quot;&gt;Video 6 - Web APIs.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#deploying-to-azure&quot;&gt;Deploying to Azure&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#missing-microsoftentityframeworkcoredesign&quot;&gt;Missing &lt;code class=&quot;language-text&quot;&gt;Microsoft.EntityFrameworkCore.Design&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#connection-string-from-_appsettingsjson_-not-found&quot;&gt;Connection string from &lt;em&gt;appsettings.json&lt;/em&gt; not found:&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#config-object-null&quot;&gt;Config object null&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- END doctoc generated TOC please keep comment here to allow auto update --&gt;
&lt;h3&gt;Video 1 - Introduction&lt;/h3&gt;
&lt;p&gt;To get ourselves an mvc app we can do&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;dotnet new web
dotnet add package Microsoft.AspnetCore.Mvc
dotnet add package Microsoft.AspnetCore.StaticFiles&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I deliberately started fom an &lt;em&gt;empty&lt;/em&gt; web project, because I am a purist like that. You could also do &lt;code class=&quot;language-text&quot;&gt;dotnet new mvc&lt;/code&gt; and have a ton of stuff and an application that can run. To be honest, what put me off where the bower references. I am not going to start getting aquainted with bower at this point int time.&lt;/p&gt;
&lt;p&gt;Anyhow, you can hook up the MVC functionality yourself into the basic web application startup:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;csharp&quot;&gt;&lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;//&quot;ConfigureServices&quot;&lt;/span&gt;
services&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;AddMvc&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; 
&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// &quot;Configure&quot;&lt;/span&gt;
app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;UseStaticFiles&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;UseMvc&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;routes &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    routes&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;MapRoute&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
        name&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;default&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
        template&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;{controller=Home}/{action=Index}/{id?}&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then we need&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Controllers&lt;/strong&gt; and &lt;strong&gt;Views&lt;/strong&gt; folders&lt;/li&gt;
&lt;li&gt;A &lt;strong&gt;HomeController&lt;/strong&gt;, an &lt;strong&gt;Index&lt;/strong&gt; view, maybe a &lt;strong&gt;Layout&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;and off you go. So far, pretty much the same stuff.&lt;/p&gt;
&lt;h3&gt;Video 2 - Models&lt;/h3&gt;
&lt;p&gt;Entity Framework, really now?
Oh well, I said I would follow along, so here we go:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;dotnet add package Microsoft.EntityFrameworkCore.SqlServer&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we wire up tha database stuff on Startup...&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;csharp&quot;&gt;&lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// In &quot;ConfigureServices&quot;&lt;/span&gt;
services&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token generic-method&quot;&gt;&lt;span class=&quot;token function&quot;&gt;AddDbContext&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;ConferenceContext&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;opt &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; opt&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;UseSqlServer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&quot;Server=(localdb)\\mssqllocaldb;Database=Conferences;&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&quot;Trusted_Connection=True;MultipleActiveResultSets=true&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That local db file will btw end up in your user directory (i.e. ~), I was too lazy to parse through changing the default,
so I stuck with it (With frameworks &amp;#x26; dependencies like that, just go with the flow, you will thank me when you have time
to go have drinks on the weekend)&lt;/p&gt;
&lt;p&gt;The ConferenceContext is &lt;a href=&quot;https://github.com/flq/MS486Core/blob/master/Database/ConferenceContext.cs&quot;&gt;over here&lt;/a&gt;, then there is some initialization code, &lt;a href=&quot;https://github.com/flq/MS486Core/blob/master/Database/DbInitializer.cs&quot;&gt;hand-written&lt;/a&gt;. I didn&apos;t find that
fancy &lt;strong&gt;DropCreateAlwaysDatabaseInitializer&lt;/strong&gt; thing mentioned in the video, but this is about MVC, not EF, so I didn&apos;t search very hard. The initializer will do fine, I&apos;m sure. We call it in Startup&apos;s &lt;code class=&quot;language-text&quot;&gt;Configure&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;csharp&quot;&gt;&lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Configure&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ConferenceContext&lt;/span&gt; dbContext&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;env&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;IsDevelopment&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;UseDeveloperExceptionPage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        DbInitializer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Initialize&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;dbContext&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;By configuring the EF stuff into the in-built DI Container, we could just let the framework provide us with a db Context.
You will often see in the videos that the context gets instantiated in the controllers. You won&apos;t need to do that anymore. If you want to know more about EF on .NET Core, &lt;a href=&quot;https://docs.microsoft.com/en-us/aspnet/core/data/ef-mvc/intro&quot;&gt;this page&lt;/a&gt; is a good starting point.&lt;/p&gt;
&lt;p&gt;The &lt;code class=&quot;language-text&quot;&gt;ComponentModel&lt;/code&gt; namespace is around, so you can attribute your models like crazy, just like in the video.&lt;/p&gt;
&lt;h3&gt;Video 3- Controllers&lt;/h3&gt;
&lt;p&gt;All still basically the same stuff. There is now also an &lt;code class=&quot;language-text&quot;&gt;IActionResult&lt;/code&gt; interface if you want to implemen the Action Result yourself completely. Also the action / controller filters have more options to choose from...&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Auth filters - user authorisation&lt;/li&gt;
&lt;li&gt;Resource filters - Caching etc.&lt;/li&gt;
&lt;li&gt;Action filters - run code before / after&lt;/li&gt;
&lt;li&gt;Exception filters - as the name implies&lt;/li&gt;
&lt;li&gt;Result filters - only when the wrapped action runs successfully&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are also async variants, it is all nicely explained &lt;a href=&quot;https://docs.microsoft.com/en-us/aspnet/core/mvc/controllers/filters&quot;&gt;over here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Global filters are added in the &lt;strong&gt;Startup&lt;/strong&gt; through the options object that you get when calling the corresponding overload of &lt;code class=&quot;language-text&quot;&gt;services.AddMvc();&lt;/code&gt; inside &lt;code class=&quot;language-text&quot;&gt;ConfigureServices&lt;/code&gt;. &lt;/p&gt;
&lt;h3&gt;Video 4- Views&lt;/h3&gt;
&lt;p&gt;Html Helpers are still around, but what you may probably do these days is using the new &lt;a href=&quot;https://docs.microsoft.com/en-us/aspnet/core/mvc/views/tag-helpers/intro&quot;&gt;Tag Helpers&lt;/a&gt; to write out such a form. This is looking somewhat like that:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;html&quot;&gt;&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;form&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;asp-action&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;Create&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;asp-validation-summary&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;All&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;row&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;one column&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
          &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;label&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;asp-for&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;Name&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;label&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
          &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;span&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;asp-validation-for&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;Name&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;span&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;eight columns&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
          &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;input&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;asp-for&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;Name&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    ...&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;One of the &lt;a href=&quot;https://github.com/flq/MS486Core/commit/7591aa5cdf08e2339a508240acc1d0ac8d23b5c2&quot;&gt;last commits&lt;/a&gt; introduces some custom layout tag helpers to test out the feature.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Partial Views&lt;/strong&gt; seem more or less unchanged.&lt;/p&gt;
&lt;h3&gt;Video 5 - Javascript, Page updates etc.&lt;/h3&gt;
&lt;p&gt;There has been so much change with regard to how to do &amp;#x26; use javascript for UIs in general and ASP.NET MVC in particular lately that I am not going into much detail here. You can still return partial views, but e.g. the Ajax helper you see in the video does not seem to be around.&lt;/p&gt;
&lt;p&gt;Bundling and minification also seems &lt;a href=&quot;https://docs.microsoft.com/en-us/aspnet/core/client-side/bundling-and-minification&quot;&gt;to be supported&lt;/a&gt; as a build step rather than a runtime step. These days you may do this with a tool like &lt;a href=&quot;https://webpack.github.io/&quot;&gt;webpack&lt;/a&gt; anyway, so there isn&apos;t much need to do this via Visual Studio. Also, all that nice javascript out there isn&apos;t made available via Nuget anymore but you&apos;ll rather have to go to npm. Additionally, jQuery just isn&apos;t as important anymore.&lt;/p&gt;
&lt;h3&gt;Video 6 - Web APIs.&lt;/h3&gt;
&lt;p&gt;Quite a few changes over here as well. Web API got folded into the ASP.NET Core effort. Apparently there is a &lt;a href=&quot;https://stackify.com/asp-net-core-web-api-guide/&quot;&gt;compatibility shim&lt;/a&gt; to smooth migration of an existing application. But, if you start from scratch, my repo contains a minimal example of getting all Sessions or Speakers, together with content negotation.&lt;/p&gt;
&lt;p&gt;Out of the box you only get support for json. For xml e.g. you need to &lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;dotnet add package Microsoft.AspNetCore.Mvc.Formatters.Xml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And then in &lt;code class=&quot;language-text&quot;&gt;Startup.ConfigureServices&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;csharp&quot;&gt;&lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;services&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;AddMvc&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;opts &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  opts&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;OutputFormatters&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;XmlSerializerOutputFormatter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then, a simple controller which inherits from Controller, just like the MVC ones:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;csharp&quot;&gt;&lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Route&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;api/[controller]/[action]&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;DataController&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Controller&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ConferenceContext&lt;/span&gt; _ctx&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;DataController&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;ConferenceContext&lt;/span&gt; ctx&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; _ctx &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; ctx&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;HttpGet&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; IEnumerable&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Session&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Sessions&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; _ctx&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Sessions&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ToList&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;HttpGet&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; IEnumerable&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Speaker&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Speakers&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; _ctx&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Speakers&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ToList&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, e.g. with curl you can make calls with the proper accept header:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;curl&lt;/span&gt; localhost:5000/api/data/speakers -v -H &lt;span class=&quot;token string&quot;&gt;&quot;Accept: application/xml&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And, presto, api with content negotiation.&lt;/p&gt;
&lt;h3&gt;Deploying to Azure&lt;/h3&gt;
&lt;p&gt;I won&apos;t go into the actual azure deploying, as there are so many ways to do it (e.g. deploying a container these days, etc.), but in the
light of doing standard MVC apps, one can have a look on how to do Entity Framewrk migrations these days. We will do this in the command line,
and for this we extend the &lt;code class=&quot;language-text&quot;&gt;dotnet&lt;/code&gt;-CLI by adding a &quot;plugin&quot; in the csproj file (don&apos;t forget to &lt;code class=&quot;language-text&quot;&gt;dotnet restore&lt;/code&gt; afterwards):&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;xml&quot;&gt;&lt;pre class=&quot;language-xml&quot;&gt;&lt;code class=&quot;language-xml&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;ItemGroup&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- stuff --&gt;&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;DotNetCliToolReference&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;Include&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;Microsoft.EntityFrameworkCore.Tools.DotNet&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;Version&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;1.0.1&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;ItemGroup&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When all works you should be able to run migration commands via &lt;code class=&quot;language-text&quot;&gt;dotnet ef ...&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;And then, when you are working without Visual Studio you may be subject to a number of issues:&lt;/p&gt;
&lt;h4&gt;Missing &lt;code class=&quot;language-text&quot;&gt;Microsoft.EntityFrameworkCore.Design&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;add it e.g. via &lt;code class=&quot;language-text&quot;&gt;dotnet add package&lt;/code&gt; and restore.&lt;/p&gt;
&lt;h4&gt;Connection string from &lt;em&gt;appsettings.json&lt;/em&gt; not found:&lt;/h4&gt;
&lt;p&gt;The migrations thing actually runs from &lt;code class=&quot;language-text&quot;&gt;bin/...&lt;/code&gt;, so you need to make sure that your settings file ends up there as well.&lt;/p&gt;
&lt;p&gt;Doing this manually, you need to add the following to the csproj file:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;xml&quot;&gt;&lt;pre class=&quot;language-xml&quot;&gt;&lt;code class=&quot;language-xml&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;ItemGroup&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;Content&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;Update&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;appsettings.json&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;CopyToOutputDirectory&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Always&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;CopyToOutputDirectory&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;Content&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;ItemGroup&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;Config object null&lt;/h4&gt;
&lt;p&gt;the migrations tool will actually run your &lt;code class=&quot;language-text&quot;&gt;ConfigureServices&lt;/code&gt; code from your startup, but &lt;strong&gt;NOT&lt;/strong&gt; your Program&apos;s Main.
It is there where I had the code to instantiate a config. To resolve, I check in &lt;code class=&quot;language-text&quot;&gt;ConfigureServices&lt;/code&gt; that the Config object exists:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;csharp&quot;&gt;&lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;//Startup.cs&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;ConfigureServices&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;IServiceCollection&lt;/span&gt; services&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    Program&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;EnsureConfig&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// ...&lt;/span&gt;
    services&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token generic-method&quot;&gt;&lt;span class=&quot;token function&quot;&gt;AddDbContext&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;ConferenceContext&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;opt &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; 
        opt&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;UseSqlServer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
            Program&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Configuration&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;GetConnectionString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;DefaultConnection&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// Program.cs&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;EnsureConfig&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Configuration &lt;span class=&quot;token operator&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; builder &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ConfigurationBuilder&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;SetBasePath&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Directory&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;GetCurrentDirectory&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;AddJsonFile&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;appsettings.json&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    Configuration &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; builder&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Build&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;From there on I was able to use the tool. Then we can create the initial setup:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;dotnet ef migrations add InitialCreate
dotnet ef database update&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;which sets up a migration file (as well as a .designer.cs file? No idea...). Btw, for a documentation of the tool&apos;s capabilities go to
the &lt;a href=&quot;https://docs.microsoft.com/en-us/aspnet/core/data/ef-mvc/migrations&quot;&gt;Migrations docs&lt;/a&gt;&lt;/p&gt;</content:encoded></item></channel></rss>
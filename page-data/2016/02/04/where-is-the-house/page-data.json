{"componentChunkName":"component---src-templates-article-template-js","path":"/2016/02/04/where-is-the-house","result":{"data":{"markdownRemark":{"html":"<p>After quite some time there were lifesigns from Eric Lippert, whose blog output\nis usually a great pleasure to read and understand.\n<a href=\"http://ericlippert.com/2016/02/01/west-of-house/\">He is embarking</a> an an adventure to write a so-called Z-machine with the following\nconstraints:</p>\n<ul>\n<li>Written in OCaml</li>\n<li>Embracing functional programming (e.g. immutability, side-effect-free functions,...)</li>\n</ul>\n<p>As far as my understanding goes OCaml is F#'s mother, syntax-wise, and me, looking\nfor an excuse to have some fun with F#, thought <em>ok, I'll go along, see how far I get</em>.</p>\n<p>For trodding along on my MBP I am using the atom editor with the <a href=\"http://ionide.io\">ionide plugin</a>.</p>\n<p>The page explains pretty well the steps you need to do. On OSX it is a good thing if you've got <strong>brew</strong> such that you can do <code class=\"language-text\">brew install mono</code>.\nThis will also bring F# onto the system, which should then be available on the path (and to the plugin). Bear in mind that the main executables are called slightly different to their Windows counterparts. You get</p>\n<ul>\n<li>fsi -> fsharpi</li>\n<li>fsc -> fsharpc</li>\n</ul>\n<p>If you have npm on your system it is also very nice that there is a project generator (<em>fsharp-project</em>) available under <a href=\"http://yeoman.io\">yeoman</a> - it can generate you the basic structure of your project with all the goodies that the F# community has come up with, things like FAKE and Paket..</p>\n<p>The code created will be available in <a href=\"https://github.com/flq/ionized-z-machine\">runnable form on github</a>, and I will introduce a tag after every post in case anybody cares to go back to a specific commit associated with a blog post.</p>\n<p>Coming to Eric's <a href=\"http://ericlippert.com/2016/02/03/north-of-house/#more-3446\">second post</a>, the method to get the top bits of a 16-bit word looks...very similar, just that\nin F# we have operators that look a bit like their C-style counterparts.</p>\n<div class=\"gatsby-highlight\" data-language=\"fsharp\"><pre class=\"language-fsharp\"><code class=\"language-fsharp\"><span class=\"token keyword\">let</span> fetch_bits high length word <span class=\"token operator\">=</span>\n  <span class=\"token keyword\">let</span> mask <span class=\"token operator\">=</span> <span class=\"token operator\">~~~</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;&lt;</span> length<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span>\n  <span class=\"token punctuation\">(</span>word <span class=\"token operator\">>>></span> <span class=\"token punctuation\">(</span>high <span class=\"token operator\">-</span> length <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;&amp;</span> mask</code></pre></div>","fields":{"slug":"/2016/02/04/where-is-the-house"},"frontmatter":{"date":"February 04, 2016","path":null,"title":"Where is the house","tags":["fsharp"]}}},"pageContext":{"title":"Where is the house","previous":{"fields":{"slug":"/2015/12/30/nmeasure-and-the-global-warming","published":true},"frontmatter":{"title":"NMeasure and the global warming","tags":["physics","own-software","dotnet","site"],"date":"2015/12/30"}},"next":{"fields":{"slug":"/2016/02/06/more-a-tree-than-a-forest","published":true},"frontmatter":{"title":"More a tree than a forest","tags":["fsharp"],"date":"2016/02/06"}}}}}
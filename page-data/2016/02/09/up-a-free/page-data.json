{
    "componentChunkName": "component---src-templates-article-template-js",
    "path": "/2016/02/09/up-a-free",
    "result": {"data":{"mdx":{"excerpt":"Eric's  latest post  has some more code to chew upon. Here is where we find the first slight deviations in syntax and used modules. Generic types theâ€¦","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Up a Free\",\n  \"layout\": \"post\",\n  \"tags\": [\"fsharp\"],\n  \"date\": \"2016-02-09T20:00:00.000Z\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Eric's \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"http://ericlippert.com/2016/02/09/up-a-tree/\"\n  }, \"latest post\"), \" has some more code to chew upon. Here is where we find the first slight deviations in syntax and used modules.\"), mdx(\"h3\", null, \"Generic types\"), mdx(\"p\", null, \"the generic IntMap is defined as such...\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"text\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-text\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-text\"\n  }, \"type IntMap<'t> = Map<int,'t>\"))), mdx(\"p\", null, \"It looks like F# deviated from the unusual type argument placement in OCaml.\"), mdx(\"h3\", null, \"The bucket\"), mdx(\"p\", null, \"for the \", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"original_bytes\"), \" value I actually chose a \", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"byte array\")), mdx(\"p\", null, \"In \", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"read_bytes\"), \" it seemed more idiomatic to me to use \", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"Map.tryFind\"), \" which returns an option value on which you can match whether something was found or not:\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"fsharp\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-fsharp\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-fsharp\"\n  }, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, \"match\"), \" Map\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \".\"), \"tryFind addr bytes\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \".\"), \"edits \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, \"with\"), \"\\n\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \"|\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"(\"), \"Some value\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \")\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \"->\"), \" value\\n\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \"|\"), \" None \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \"->\"), \" bytes\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \".\"), \"originalBytes\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \".\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"[\"), \"addr\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"]\")))), mdx(\"h3\", null, \"The rest\"), mdx(\"p\", null, \"All other bits stay more or less the same.\"), mdx(\"p\", null, \"As a side note, the byte array that probably uses the .NET type for Array in the background already has an int index. I assume that such a structure is not available in OCaml. In some functional languages finding the element at index x is an O(n) operation in a typical list-like structure, that may also be the case in OCaml.\"), mdx(\"p\", null, \"The code for this post is at \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/flq/ionized-z-machine/tree/up_a_tree\"\n  }, \"this tag\"), \".\"));\n}\n;\nMDXContent.isMDXComponent = true;","fields":{"slug":"/2016/02/09/up-a-free"},"frontmatter":{"date":"2016-02-09","path":null,"title":"Up a Free","tags":["fsharp"]}}},"pageContext":{"title":"Up a Free","previous":{"fields":{"slug":"/2016/02/06/more-a-tree-than-a-forest","published":true},"frontmatter":{"title":"More a tree than a forest","tags":["fsharp"],"date":"2016/02/06"}},"next":{"fields":{"slug":"/2016/02/25/codename-reax-redux-ish-appflow-rxjs-based","published":true},"frontmatter":{"title":"codename reax - redux-ish appflow, rxjs-based","tags":["own-software","javascript","libs-and-frameworks","react"],"date":"2016/02/25"}}}},
    "staticQueryHashes": ["256249292","2581731408"]}
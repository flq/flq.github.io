{"componentChunkName":"component---src-templates-article-template-js","path":"/2009/03/11/cycling-through-a-number-range","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"cycling through a number range\",\n  \"layout\": \"post\",\n  \"tags\": [\"programming\", \"dotnet\", \"geekdom\", \"mathematics\", \"csharp\"],\n  \"date\": \"2009-03-11T21:36:30.000Z\",\n  \"redirect_from\": \"/go/140/\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"What I really wanted to do was to play a round of quakelive. But right now, \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"http://www.quakelive.com/\"\n  }, \"quakelive\"), \" is down (well, it's Beta, isn't it?). Quakelive pointed me to their \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"http://twitter.com/quakelive\"\n  }, \"twitter feed\"), \". \"), mdx(\"p\", null, \"Next I wondered what other people are suffering from this outage and went to \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"http://twitterfall.com/\"\n  }, \"twitterfall\"), \", doing a search on \\\"quake\\\" and \\\"quakelive\\\". I found a completely unrelated entry on some Quake Engine \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"http://fabiensanglard.net/quakeSource/quakeSourceNetWork.php\"\n  }, \"code review of their networking code\"), \" (sweet) and at the end a cute little piece of code which I wanted to try in C# straight away. \"), mdx(\"p\", null, \"I hesitated, for my home PC has no Visual Studio. Alas, the trusty ol' csc is part of the .NET Framework runtime on Windows and after adding the relevant path to the %PATH% I was happily programming away with Notepad (by now you don't need syntax completion, do you? ;)\"), mdx(\"p\", null, \"With the following code you can count up an index and let it roll over once it hits a limit and start with 0 again. Once you \\\"get\\\" the code you will understand that \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"limit\"), \" can be any number of the form 2\", mdx(\"sup\", null, \"n\"), \"-1...\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"text\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-text\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-text\"\n  }, \"int limit = 1; int count = 0;\\n\\nwhile (true) {\\n  System.Threading.Thread.Sleep(300);\\n  Console.WriteLine(count);\\n  count = (count + 1) & limit;\\n}\"))), mdx(\"p\", null, \"It really isn't a big deal, but it's a nice reminder of binary arithmetics and if you are a performance geek (insert statement of premature optimization etc. here) you will like the fact that this counter is consistently faster than doing it with a modulo (%) operation. In fact, up to 4ms...repeating it 10'000'000 times. ;)\"));\n}\n;\nMDXContent.isMDXComponent = true;","fields":{"slug":"/2009/03/11/cycling-through-a-number-range"},"frontmatter":{"date":"2009-03-11","path":null,"title":"cycling through a number range","tags":["programming","dotnet","geekdom","mathematics","csharp"]}}},"pageContext":{"title":"cycling through a number range","previous":{"fields":{"slug":"/2009/03/07/another-beacon-in-a-sea-of-expressions","published":true},"frontmatter":{"title":"Another beacon in a sea of expressions","tags":["software-development","download","dotnet","libs-and-frameworks"],"date":"2009/03/07"}},"next":{"fields":{"slug":"/2009/03/27/comfortable-command-line-argument-parsing","published":true},"frontmatter":{"title":"Comfortable command line argument parsing","tags":["software-development","dotnet"],"date":"2009/03/27"}}}},"staticQueryHashes":["256249292","2581731408"]}
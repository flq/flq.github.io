{"componentChunkName":"component---src-templates-article-template-js","path":"/2009/03/11/cycling-through-a-number-range","result":{"data":{"markdownRemark":{"html":"<p>What I really wanted to do was to play a round of quakelive. But right now, <a href=\"http://www.quakelive.com/\">quakelive</a> is down (well, it's Beta, isn't it?). Quakelive pointed me to their <a href=\"http://twitter.com/quakelive\">twitter feed</a>. </p>\n<p>Next I wondered what other people are suffering from this outage and went to <a href=\"http://twitterfall.com/\">twitterfall</a>, doing a search on \"quake\" and \"quakelive\". I found a completely unrelated entry on some Quake Engine <a href=\"http://fabiensanglard.net/quakeSource/quakeSourceNetWork.php\">code review of their networking code</a> (sweet) and at the end a cute little piece of code which I wanted to try in C# straight away. </p>\n<p>I hesitated, for my home PC has no Visual Studio. Alas, the trusty ol' csc is part of the .NET Framework runtime on Windows and after adding the relevant path to the %PATH% I was happily programming away with Notepad (by now you don't need syntax completion, do you? ;)</p>\n<p>With the following code you can count up an index and let it roll over once it hits a limit and start with 0 again. Once you \"get\" the code you will understand that <em>limit</em> can be any number of the form 2<sup>n</sup>-1...</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">int limit = 1; int count = 0;\n\nwhile (true) {\n  System.Threading.Thread.Sleep(300);\n  Console.WriteLine(count);\n  count = (count + 1) &amp; limit;\n}</code></pre></div>\n<p>It really isn't a big deal, but it's a nice reminder of binary arithmetics and if you are a performance geek (insert statement of premature optimization etc. here) you will like the fact that this counter is consistently faster than doing it with a modulo (%) operation. In fact, up to 4ms...repeating it 10'000'000 times. ;)</p>","fields":{"slug":"/2009/03/11/cycling-through-a-number-range"},"frontmatter":{"date":"March 11, 2009","path":null,"title":"cycling through a number range","tags":["programming","dotnet","geekdom","mathematics","csharp"]}}},"pageContext":{"title":"cycling through a number range","previous":{"fields":{"slug":"/2009/03/07/another-beacon-in-a-sea-of-expressions","published":true},"frontmatter":{"title":"Another beacon in a sea of expressions","tags":["software-development","download","dotnet","libs-and-frameworks"],"date":"2009/03/07"}},"next":{"fields":{"slug":"/2009/03/27/comfortable-command-line-argument-parsing","published":true},"frontmatter":{"title":"Comfortable command line argument parsing","tags":["software-development","dotnet"],"date":"2009/03/27"}}}}}
{"componentChunkName":"component---src-templates-article-template-js","path":"/2012/03/23/strengtening-caliburn-micro-conversion-capabilities-with-scal","result":{"data":{"markdownRemark":{"html":"<p>If one looks into how <a href=\"http://caliburnmicro.codeplex.com/\">Caliburn.Micro</a> performs binding between models and views, a number of methods must be considered that play a role.</p>\n<ul>\n<li>Conventions play a role how bindings are derived from naming and involved elements</li>\n<li>VM getter / setter situation plays a role about the supported Binding directions</li>\n<li>Does the VM implement anything Validation-specific?</li>\n<li>Is there a type mismatch between the binding source and target? (classic example: Boolean -> Visibility)</li>\n</ul>\n<p>Especially for the last one Scal introduces a configuration hook to provide your own Value Converters. Check out the usage in the sample application:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">Converters<span class=\"token punctuation\">.</span><span class=\"token function\">ApplyDefaults</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">ConverterConfiguration</span> <span class=\"token function\">ApplyDefaults</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token class-name\">ConverterConfiguration</span> config<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    config\n        <span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Add</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">bool</span><span class=\"token punctuation\">,</span> Visibility<span class=\"token punctuation\">,</span> BooleanToVisibilityConverter<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Add</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">,</span> ImageSource<span class=\"token punctuation\">,</span> PathToImageSourceConverter<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> config<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This is supported by replacing a certain method deep in the bowels of <a href=\"https://github.com/flq/scal\">Scal</a>:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ValueConverterManagement</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">Dictionary<span class=\"token punctuation\">&lt;</span>Tuple<span class=\"token punctuation\">&lt;</span>Type<span class=\"token punctuation\">,</span> Type<span class=\"token punctuation\">></span><span class=\"token punctuation\">,</span> IValueConverter<span class=\"token punctuation\">></span></span> _converters<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">ValueConverterManagement</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AppModel</span> model<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        ConventionManager<span class=\"token punctuation\">.</span>ApplyValueConverter <span class=\"token operator\">=</span> ApplyConverter<span class=\"token punctuation\">;</span>\n        _converters <span class=\"token operator\">=</span>  model<span class=\"token punctuation\">.</span>Converters<span class=\"token punctuation\">.</span><span class=\"token function\">ToDictionary</span><span class=\"token punctuation\">(</span>k <span class=\"token operator\">=></span> Tuple<span class=\"token punctuation\">.</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">.</span>Item1<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">.</span>Item2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> v <span class=\"token operator\">=></span> v<span class=\"token punctuation\">.</span>Item3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">ApplyConverter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Binding</span> binding<span class=\"token punctuation\">,</span> <span class=\"token class-name\">DependencyProperty</span> dProp<span class=\"token punctuation\">,</span> <span class=\"token class-name\">PropertyInfo</span> vmProp<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> t <span class=\"token operator\">=</span> Tuple<span class=\"token punctuation\">.</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span>vmProp<span class=\"token punctuation\">.</span>PropertyType<span class=\"token punctuation\">,</span> dProp<span class=\"token punctuation\">.</span>PropertyType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        _converters<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Do</span><span class=\"token punctuation\">(</span>v <span class=\"token operator\">=></span> binding<span class=\"token punctuation\">.</span>Converter <span class=\"token operator\">=</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The <strong>ConventionManager</strong> is a Caliburn.Micro class that (<em>through the CM-typical override mechanism of replacing static Func-fields</em>) provides a hook into the binding operations. The key to a value converter is the pair of bound ViewModel-Type to the target UIElement type.</p>\n<p>An additional way to leverage Caliburn.Micro's Binding routine is through the <strong>ScalBinding</strong> markup extension:</p>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>TextBlock</span> <span class=\"token attr-name\"><span class=\"token namespace\">x:</span>Name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Hello<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Visibility</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>{svc:ScalBinding IsVisible}<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>TextBlock</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>This markup extension will call into the relevant CM Binding-related methods beyond those that deal with the Convention-based binding. That way, the binding shown above will use Scal's knowledge of known value converters to map the <strong>Visibility</strong> property to the <strong>IsVisible</strong> bool.</p>","fields":{"slug":"/2012/03/23/strengtening-caliburn-micro-conversion-capabilities-with-scal"},"frontmatter":{"date":"March 23, 2012","path":null,"title":"Strengtening Caliburn.Micro conversion capabilities with Scal","tags":["own-software","dotnet","csharp","WPF","libs-and-frameworks"]}}},"pageContext":{"title":"Strengtening Caliburn.Micro conversion capabilities with Scal","previous":{"fields":{"slug":"/2012/03/22/membus-v2-news","published":true},"frontmatter":{"title":"membus v2 news","tags":["own-software","dotnet","membus"],"date":"2012/03/22"}},"next":{"fields":{"slug":"/2013/02/26/objectivity-does-not-exist","published":true},"frontmatter":{"title":"Objectivity does not exist","tags":["physics","loosely-coupled"],"date":"2013/02/26"}}}}}
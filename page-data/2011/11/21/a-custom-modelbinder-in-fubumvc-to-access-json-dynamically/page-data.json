{"componentChunkName":"component---src-templates-article-template-js","path":"/2011/11/21/a-custom-modelbinder-in-fubumvc-to-access-json-dynamically","result":{"data":{"mdx":{"excerpt":"One aspect of my new web site is the admin interface which allows me to write new posts and post them to my site via a simple HTTP-based \ninterfaceâ€¦","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"A custom ModelBinder in FubuMVC to access JSON dynamically\",\n  \"layout\": \"post\",\n  \"tags\": [\"software-development\", \"web\", \"libs-and-frameworks\"],\n  \"date\": \"2011-11-21T20:46:00.000Z\",\n  \"redirect_from\": \"/go/207/\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"One aspect of my new web site is the admin interface which allows me to write new posts and post them to my site via a simple HTTP-based\\ninterface. The posting of a new entry happens with the HTTP content-type \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"application/json\"), \".\"), mdx(\"p\", null, \"Short of specifying what exactly the structure of the JSON should be, I wanted to keep this fairly dynamic. Literally.\\nThis meant to somehow translate the incoming request to a dynamic object that allows access to the parsed JSON. The parse and access bit was relatively simple to come up with by using \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"http://dynamicjson.codeplex.com/\"\n  }, \"DynamicJson\"), \". The project boils down to a single class inheriting from \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"DynamicObject\"), \", allowing Json to be parsed and accessed in C# syntax style.\"), mdx(\"p\", null, \"Armed with that, the ideal situation from a FubuMVC perspective would be that the input model of an Action is an object of type \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"dynamic\"), \":\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"text\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-text\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-text\"\n  }, \"[UrlRegistryCategory(\\\"Admin\\\")]\\npublic void Post(dynamic content)\\n{\\n    var newId = _contentAdministration.InsertContent(content);\\n    _request.Set(new InsertInfo(_urls.UrlFor(new ContentId(newId), \\\"Admin\\\")));\\n}\"))), mdx(\"p\", null, \"One way to give Fubu the chance to handle this kind of input model is to provide custom model binding capabilities, wired up in the Fuburegistry with \", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"Models.BindModelsWith<T>() where T : IModelBinder\"), \". An implementation of \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"IModelBinder\"), \" requires us to match for what types of models this new binding occurs. It turns out that the dynamic input object comes along as an object of type...\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"object\"), \".\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"text\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-text\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-text\"\n  }, \"public bool Matches(Type type)\\n{\\n    return type == typeof(object);\\n}\"))), mdx(\"p\", null, \"As soon as that's clear to FubuMVC, our Model binder gets the chance to do its work, i.e. to translate the bits of the current request to a model that will be passed on to any interested Action.\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"text\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-text\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-text\"\n  }, \"public object Bind(Type type, IBindingContext context)\\n{\\n    var rd = context.Service<IRequestData>();\\n    var cType = (string)rd.Value(\\\"Content-Type\\\");\\n    if (!new[] { \\\"application/json\\\", \\\"application/jsonrequest\\\", \\\"application/x-javascript\\\" }.Any(ct => ct.Equals(cType)))\\n        throw new DynamicBindException(\\\"Content-Type\\\");\\n    var data = context.Service<IStreamingData>().InputText();\\n    try\\n    {\\n        return DynamicJson.Parse(data);\\n    }\\n    catch\\n    {\\n        throw new DynamicBindException(\\\"Parse\\\");\\n    }\\n}\"))), mdx(\"p\", null, \"The \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"binding context\"), \" allows us to access all those dependencies that are valid in the scope of the application as well as the scope of the current request.\\n\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"IRequestData\"), \" is an abstraction that allows us to access relevant information about the current request. In the above example we attempt to read the Content-Type part of the HTTP header of the incoming request and only carry on when the content type fits to what the type for which we will do the conversion. \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"IStreamingData\"), \" gives us access to the incoming request text\"), mdx(\"p\", null, \"The shown implementation is harsh in that it will only work with the shown content type. One could imagine an implementation that can also handle XML Content and\\ncreate \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"DynamicObject\"), \" instance that supports accessing the data stored in the XML dynamically.\"));\n}\n;\nMDXContent.isMDXComponent = true;","fields":{"slug":"/2011/11/21/a-custom-modelbinder-in-fubumvc-to-access-json-dynamically"},"frontmatter":{"date":"2011-11-21","path":null,"title":"A custom ModelBinder in FubuMVC to access JSON dynamically","tags":["software-development","web","libs-and-frameworks"]}}},"pageContext":{"title":"A custom ModelBinder in FubuMVC to access JSON dynamically","previous":{"fields":{"slug":"/2011/11/18/the-wpf-stack-du-jour","published":true},"frontmatter":{"title":"The WPF stack du jour","tags":["dotnet","libs-and-frameworks"],"date":"2011/11/18"}},"next":{"fields":{"slug":"/2011/11/27/in-built-conventions-in-fubumvc","published":true},"frontmatter":{"title":"In-built conventions in Fubumvc","tags":["software-development","dotnet","web","libs-and-frameworks"],"date":"2011/11/27"}}}},"staticQueryHashes":["256249292","2581731408"]}
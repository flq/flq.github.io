{"componentChunkName":"component---src-templates-article-template-js","path":"/2011/02/14/coding-katas-–-improving-the-mechanics-of-coding","result":{"data":{"mdx":{"excerpt":"If only one could code straight from the brain – Alas, we aren’t there yet. If you want to reduce the impedance between a programming idea in your…","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Coding Katas – Improving the mechanics of coding\",\n  \"layout\": \"post\",\n  \"tags\": [\"software-development\"],\n  \"date\": \"2011-02-14T11:13:00.000Z\",\n  \"redirect_from\": \"/go/197/\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"If only one could code straight from the brain \\u2013 Alas, we aren\\u2019t there yet. If you want to reduce the impedance between a programming idea in your mind and the act of coding you can do exercises that concentrate on reducing that impedance. This is what \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"http://codekata.pragprog.com/\"\n  }, \"Code Katas\"), \" are: \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"http://en.wikipedia.org/wiki/Kata\"\n  }, \"exercises\"), \" whose problem domain are understood by you, and which by repetition you can concentrate on the mechanics of coding. After all, you don\\u2019t expect a musician to only ever play her instrument on a gig, right?\"), mdx(\"p\", null, \"The past day I\\u2019ve gone through \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"http://www.osherove.com/tdd-kata-1/\"\n  }, \"this small coding Kata\"), \" posted by Roy Osherove, the String Calculator.\"), mdx(\"p\", null, \"One important aspect of improving the mechanics is knowing well the tools you\\u2019re using. I must admit that I\\u2019d never attempt this exercise without resharper. In preparation for a \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"http://www.katacasts.com/\"\n  }, \"Katacast\"), \" I also had to improve some of the tooling that I commonly use:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Using Alt+ArrowUp, ArrowDown to move between members of a type\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Defining two live templates\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"one \\u201Ctest\\u201D file template that defines a test class as Test fixture with a setup and a first test\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"one \\u201Ctest\\u201D template to use inside a test class to define the correctly attributed method for a test*   In VS Under Tools/Options/Environment/Keyboard, define a shortcut for the command \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Resharper.ReSharper_UnitTest_ContextRun\"), \". That will allow you to use the shortcut in a test class to run the test in the current context. Depending on cursor position it will run all tests in a test class or the one test the cursor is in.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"If the solution explorer is necessary e.g. to create a new file, you can Press Alt+V,P (View Menu \\u2013\", \">\", \" Explorer) to jump into the solution explorer. \"))), mdx(\"p\", null, \"In combination with the shortcuts I\\u2019m already using + the awesome resharper functionality it allows for pretty long runs of mouseless development in red-green-refactor cycles.\"));\n}\n;\nMDXContent.isMDXComponent = true;","fields":{"slug":"/2011/02/14/coding-katas-–-improving-the-mechanics-of-coding"},"frontmatter":{"date":"2011-02-14","path":null,"title":"Coding Katas – Improving the mechanics of coding","tags":["software-development"]}}},"pageContext":{"title":"Coding Katas – Improving the mechanics of coding","previous":{"fields":{"slug":"/2011/01/31/suggestions-to-improve-your-wpf-viewmodels","published":true},"frontmatter":{"title":"Suggestions to improve your WPF ViewModels","tags":["dotnet","patterns","libs-and-frameworks"],"date":"2011/01/31"}},"next":{"fields":{"slug":"/2011/02/18/more-datatemplates-in-wpf","published":true},"frontmatter":{"title":"More. DataTemplates. In. WPF.","tags":["dotnet","libs-and-frameworks","WPF"],"date":"2011/02/18"}}}},"staticQueryHashes":["256249292","2581731408"]}
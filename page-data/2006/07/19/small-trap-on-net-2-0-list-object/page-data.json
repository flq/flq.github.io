{"componentChunkName":"component---src-templates-article-template-js","path":"/2006/07/19/small-trap-on-net-2-0-list-object","result":{"data":{"mdx":{"excerpt":"Consider the following small c# 2.0 program: The delegate passed into the  TrueForAll  method has to return either true or false and is called forâ€¦","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Small trap on .NET 2.0 List object\",\n  \"layout\": \"post\",\n  \"tags\": [\"software-development\", \"dotnet\"],\n  \"date\": \"2006-07-19T19:54:06.000Z\",\n  \"redirect_from\": \"/go/46/\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Consider the following small c# 2.0 program:\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"text\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-text\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-text\"\n  }, \"class Program {\\n  static void Main(string[] args) {\\n    List<int> l = new List<int>();\\n    int i = 0;\\n    bool truth = l.TrueForAll(delegate(int z) { i++; return false; });\\n    Console.WriteLine(\\\"i is {0} and truth is {1}\\\", i, truth);\\n    Console.ReadKey();\\n  }\\n}\"))), mdx(\"p\", null, \"The delegate passed into the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"TrueForAll\"), \" method has to return either true or false and is called for each element of the list. If all calls return true, the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"TrueForAll\"), \" method will itself return true.\"), mdx(\"p\", null, \"As you can see, the list contains no elements, so you can probably guess what the value of \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"i\"), \" will be. But can you guess the value of \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"truth\"), \"? Well, here's the output:\"), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"i is 0 and truth is True\"), \".\"), mdx(\"p\", null, \"Indeed, what is it supposed to return, since after all no answer can be given, and in a way any statement applied to nothing can be true. Even so, I would think that it could also be considered false, and that the way this method may be used, returning False may have been a better option.\"), mdx(\"p\", null, \"In my concrete trap, I was asking whether a list HasData, which in turned was supposed to ask each of its elements if it contains any data...\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"text\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-text\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-text\"\n  }, \"class Program {\\n\\n  static void Main(string[] args) {\\n    DataHolderSet set = new DataHolderSet();\\n    Console.WriteLine(\\\"set has data? {0}\\\", set.HasData);\\n    Console.ReadKey();\\n  }\\n}\\n\\ninterface IDataHolder {\\n  bool HasData { get; }\\n}\\n\\nclass DataHolder : IDataHolder {\\n  public bool HasData {\\n    get { return false; }\\n  }\\n}\\n\\nclass DataHolderSet : List<IDataHolder>, IDataHolder {\\n  public bool HasData {\\n    get { \\n      return TrueForAll(delegate(IDataHolder z) \\n      { return z.HasData; }); \\n    }\\n  }\\n}\"))), mdx(\"p\", null, \"Obviously we get true, although I have lured myself into expecting that the response should be false. Anyway, just something to be aware of...\"));\n}\n;\nMDXContent.isMDXComponent = true;","fields":{"slug":"/2006/07/19/small-trap-on-net-2-0-list-object"},"frontmatter":{"date":"2006-07-19","path":null,"title":"Small trap on .NET 2.0 List object","tags":["software-development","dotnet"]}}},"pageContext":{"title":"Small trap on .NET 2.0 List object","previous":{"fields":{"slug":"/2006/07/17/-log-entry-2711-07-15-2","published":true},"frontmatter":{"title":" Log Entry 2711.07.15-2","tags":["sci-fi"],"date":"2006/07/17"}},"next":{"fields":{"slug":"/2006/07/24/unit-testing-events-with-anonymous-delegates","published":true},"frontmatter":{"title":"Unit testing events with anonymous delegates","tags":["software-development","dotnet"],"date":"2006/07/24"}}}},"staticQueryHashes":["256249292","2581731408"]}
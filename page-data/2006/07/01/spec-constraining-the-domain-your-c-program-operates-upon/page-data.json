{"componentChunkName":"component---src-templates-article-template-js","path":"/2006/07/01/spec-constraining-the-domain-your-c-program-operates-upon","result":{"data":{"mdx":{"excerpt":"I found this at Microsoft ' s research downloads:  Spec#  is an extension to the c# programming language and brings multiple ways of adding explicitâ€¦","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Spec# - Constraining the domain your c# program operates upon\",\n  \"layout\": \"post\",\n  \"tags\": [\"software-development\", \"dotnet\"],\n  \"date\": \"2006-07-01T14:23:49.000Z\",\n  \"redirect_from\": \"/go/37/\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"I found this at Microsoft\", \"'\", \"s research downloads: \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"http://research.microsoft.com/specsharp/\"\n  }, \"Spec#\"), \" is an extension to the c# programming language and brings multiple ways of adding explicit constraints to what is essentially the data your c# program works upon. One nice example from the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"http://research.microsoft.com/specsharp/papers/krml136.pdf\"\n  }, \"overview[pdf]\"), \" presented there:\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"csharp\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-csharp\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, \"class\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token class-name\"\n  }, \"ArrayList\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"{\"), \"\\n  \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, \"public\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, \"virtual\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token return-type class-name\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"token keyword\"\n  }, \"void\")), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token function\"\n  }, \"Insert\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"(\"), \"intindex\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \",\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token class-name\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"token keyword\"\n  }, \"object\")), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, \"value\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \")\"), \"\\n    requires \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token number\"\n  }, \"0\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \"<=\"), \" index \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \"&&\"), \" index \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \"<=\"), \" Count\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \";\"), \"\\n    requires \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \"!\"), \"IsReadOnly \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \"&&\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \"!\"), \"IsFixedSize\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \";\"), \"\\n    \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token class-name\"\n  }, \"ensures\"), \" Count \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \"==\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token function\"\n  }, \"old\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"(\"), \"Count\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \")\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \"+\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token number\"\n  }, \"1\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \";\"), \"\\n  \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"{\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token comment\"\n  }, \"/*...*/\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"}\")))), mdx(\"p\", null, \"Means that some preconditions are required: index is bigger than 0 and smaller than the current value of Count. Furthermore the fields IsReadonly and IsFixedSize should be false. The postcondition of the call is that the count field should have increased by 1.\"), mdx(\"p\", null, \"This is just one of the features available. Those who like constraining their objects with pre- and post conditions (values and exceptions), more specific avoidance of null references and ways to state invariants should have fun with this (Does this include me? I s'ppose it depends on the project!)\"));\n}\n;\nMDXContent.isMDXComponent = true;","fields":{"slug":"/2006/07/01/spec-constraining-the-domain-your-c-program-operates-upon"},"frontmatter":{"date":"2006-07-01","path":null,"title":"Spec# - Constraining the domain your c# program operates upon","tags":["software-development","dotnet"]}}},"pageContext":{"title":"Spec# - Constraining the domain your c# program operates upon","previous":{"fields":{"slug":"/2006/06/29/having-a-laugh-at-myself","published":true},"frontmatter":{"title":"Having a laugh at myself...","tags":["software-development","javascript"],"date":"2006/06/29"}},"next":{"fields":{"slug":"/2006/07/02/realfiction-goodies-net-stuff-you-may-like-to-use","published":true},"frontmatter":{"title":"Realfiction Goodies - .NET Stuff you may like to use","tags":["software-development","download","dotnet"],"date":"2006/07/02"}}}},"staticQueryHashes":["256249292","2581731408"]}
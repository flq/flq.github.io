{"componentChunkName":"component---src-templates-article-template-js","path":"/2006/07/24/unit-testing-events-with-anonymous-delegates","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Unit testing events with anonymous delegates\",\n  \"layout\": \"post\",\n  \"tags\": [\"software-development\", \"dotnet\"],\n  \"date\": \"2006-07-24T19:19:52.000Z\",\n  \"redirect_from\": \"/go/47/\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"The other day I figured out that anonymous delegates can also help you to test an event while staying nicely contained within a single test method. \"), mdx(\"p\", null, \"The following is one of the unit tests of the FixedUndoStack class which you can find at my downloads section:\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"text\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-text\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-text\"\n  }, \"  [Test]\\n  public void TestOnPopEvent() {\\n\\n  string stackElement = \\\"\\\";\\n  int wasCalled = 0;\\n\\n  stack.OnPop += delegate(object o, OnPopEventArguments<string> e) {\\n    Assert.AreEqual(stackElement, e.Item);\\n    wasCalled++;\\n  };\\n\\n  stackElement = \\\"three\\\";\\n  stack.Pop();\\n  Assert.AreEqual(1,wasCalled);\\n\\n  stackElement = \\\"two\\\";\\n  stack.Pop();\\n  Assert.AreEqual(2, wasCalled);\\n\\n  stackElement = \\\"one\\\";\\n  stack.Pop();\\n  Assert.AreEqual(3, wasCalled);\\n\\n  // The next pop should not raise an event anymore\\n  stackElement = \\\"asjhgdvb\\\"; \\n  stack.Pop();\\n  Assert.AreEqual(3, wasCalled);\\n}\"))), mdx(\"p\", null, \"Since anonymous methods run in the context of the enclosing method, you can modify locals of the test function. \"), mdx(\"p\", null, \"The int wasCalled is used to check whether the event really fired, while the test needs to prepare any ensuing comparisons just before you expect the event.\"));\n}\n;\nMDXContent.isMDXComponent = true;","fields":{"slug":"/2006/07/24/unit-testing-events-with-anonymous-delegates"},"frontmatter":{"date":"July 24, 2006","path":null,"title":"Unit testing events with anonymous delegates","tags":["software-development","dotnet"]}}},"pageContext":{"title":"Unit testing events with anonymous delegates","previous":{"fields":{"slug":"/2006/07/19/small-trap-on-net-2-0-list-object","published":true},"frontmatter":{"title":"Small trap on .NET 2.0 List object","tags":["software-development","dotnet"],"date":"2006/07/19"}},"next":{"fields":{"slug":"/2006/07/24/-log-entry-2711-07-16","published":true},"frontmatter":{"title":" Log Entry 2711.07.16","tags":["sci-fi"],"date":"2006/07/24"}}}},"staticQueryHashes":["256249292","2581731408","3764592887"]}
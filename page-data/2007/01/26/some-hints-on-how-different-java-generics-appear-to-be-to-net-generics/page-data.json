{"componentChunkName":"component---src-templates-article-template-js","path":"/2007/01/26/some-hints-on-how-different-java-generics-appear-to-be-to-net-generics","result":{"data":{"mdx":{"excerpt":"A tss entry caught my curiosity as it was talking about a  \" generics puzzle \"  in JAVA. Finally, I thought, an example-based look at how JAVAâ€¦","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Some hints on how different JAVA generics appear to be to .NET generics\",\n  \"layout\": \"post\",\n  \"tags\": [\"software-development\", \"dotnet\", \"java\"],\n  \"date\": \"2007-01-26T14:06:33.000Z\",\n  \"redirect_from\": \"/go/58/\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"A tss entry caught my curiosity as it was talking about a \", \"\\\"\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"http://stuffthathappens.com/blog/2007/01/25/java-generics-puzzler/\"\n  }, \"generics puzzle\"), \"\\\"\", \" in JAVA. Finally, I thought, an example-based look at how JAVA generics differ from their .NET pendant? Indeed, the puzzle turns out to not be one in e.g. C#.\"), mdx(\"p\", null, \"If the intent is to be able to create instances of a provided type argument, we need a constrain on the provided type argument to provide a parameterless constructor... \"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"text\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-text\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-text\"\n  }, \"class GenericCheck<T> where T : new() {\\n  public T Instance {\\n    get {\\n      return Activator.CreateInstance<T>();\\n    }\\n  }\\n}\"))), mdx(\"p\", null, \"Beware, though that if T has no default constructor, construction will fail with a MissingMethodException. Funny enough though, the Activator's method has no constraint on T, which it could easily implement:\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"text\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-text\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-text\"\n  }, \"public V CreateInstance<V>() where V : new() ...\"))), mdx(\"p\", null, \"Apart from that you could also construct types that have no default constructor. Just sprinkle in some reflection. The type in question is easily accessed with typeof(T)...\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"text\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-text\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-text\"\n  }, \"class GenericCheck<T> {\\n\\n  public T Instance(string name, int age) {\\n      Type t = typeof(T);\\n      ConstructorInfo info = t.GetConstructor(\\n         new Type[] { typeof(string), typeof(int) });\\n      if (info != null) {\\n        return (T)info.Invoke(BindingFlags.CreateInstance,\\n           null,new object[] { name, age },null);\\n      }\\n      return default(T);\\n  }\\n\\n}\\n\\npublic static void Test() {\\n  GenericCheck<Person> gp = new GenericCheck<Person>();\\n  Person p = gp.Instance(\\\"martha\\\", 24);\\n}\"))), mdx(\"p\", null, \"What you don't get with this approach is type safety, and you'll probably have a performance penalty, but that's another subject.\\nSo, no puzzles to be seen...\"));\n}\n;\nMDXContent.isMDXComponent = true;","fields":{"slug":"/2007/01/26/some-hints-on-how-different-java-generics-appear-to-be-to-net-generics"},"frontmatter":{"date":"2007-01-26","path":null,"title":"Some hints on how different JAVA generics appear to be to .NET generics","tags":["software-development","dotnet","java"]}}},"pageContext":{"title":"Some hints on how different JAVA generics appear to be to .NET generics","previous":{"fields":{"slug":"/2007/01/22/state-design-pattern-simplified","published":true},"frontmatter":{"title":"State design pattern, simplified?","tags":["patterns","programming","dotnet","csharp"],"date":"2007/01/22"}},"next":{"fields":{"slug":"/2007/02/19/update-to-drupal-5-1-check","published":true},"frontmatter":{"title":"Update to Drupal 5.1 - Check!","tags":["meta","tools"],"date":"2007/02/19"}}}},"staticQueryHashes":["256249292","2581731408"]}
{"componentChunkName":"component---src-templates-article-template-js","path":"/2007/01/26/some-hints-on-how-different-java-generics-appear-to-be-to-net-generics","result":{"data":{"markdownRemark":{"html":"<p>A tss entry caught my curiosity as it was talking about a \"<a href=\"http://stuffthathappens.com/blog/2007/01/25/java-generics-puzzler/\">generics puzzle</a>\" in JAVA. Finally, I thought, an example-based look at how JAVA generics differ from their .NET pendant? Indeed, the puzzle turns out to not be one in e.g. C#.</p>\n<p>If the intent is to be able to create instances of a provided type argument, we need a constrain on the provided type argument to provide a parameterless constructor... </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">class GenericCheck&lt;T&gt; where T : new() {\n  public T Instance {\n    get {\n      return Activator.CreateInstance&lt;T&gt;();\n    }\n  }\n}</code></pre></div>\n<p>Beware, though that if T has no default constructor, construction will fail with a MissingMethodException. Funny enough though, the Activator's method has no constraint on T, which it could easily implement:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">public V CreateInstance&lt;V&gt;() where V : new() ...</code></pre></div>\n<p>Apart from that you could also construct types that have no default constructor. Just sprinkle in some reflection. The type in question is easily accessed with typeof(T)...</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">class GenericCheck&lt;T&gt; {\n\n  public T Instance(string name, int age) {\n      Type t = typeof(T);\n      ConstructorInfo info = t.GetConstructor(\n         new Type[] { typeof(string), typeof(int) });\n      if (info != null) {\n        return (T)info.Invoke(BindingFlags.CreateInstance,\n           null,new object[] { name, age },null);\n      }\n      return default(T);\n  }\n\n}\n\npublic static void Test() {\n  GenericCheck&lt;Person&gt; gp = new GenericCheck&lt;Person&gt;();\n  Person p = gp.Instance(&quot;martha&quot;, 24);\n}</code></pre></div>\n<p>What you don't get with this approach is type safety, and you'll probably have a performance penalty, but that's another subject.\nSo, no puzzles to be seen...</p>","fields":{"slug":"/2007/01/26/some-hints-on-how-different-java-generics-appear-to-be-to-net-generics"},"frontmatter":{"date":"January 26, 2007","path":null,"title":"Some hints on how different JAVA generics appear to be to .NET generics","tags":["software-development","dotnet","java"]}}},"pageContext":{"title":"Some hints on how different JAVA generics appear to be to .NET generics","previous":{"fields":{"slug":"/2007/01/22/state-design-pattern-simplified","published":true},"frontmatter":{"title":"State design pattern, simplified?","tags":["patterns","programming","dotnet","csharp"],"date":"2007/01/22"}},"next":{"fields":{"slug":"/2007/02/19/update-to-drupal-5-1-check","published":true},"frontmatter":{"title":"Update to Drupal 5.1 - Check!","tags":["meta","tools"],"date":"2007/02/19"}}}}}
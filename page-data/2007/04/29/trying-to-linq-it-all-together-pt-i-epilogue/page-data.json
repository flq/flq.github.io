{"componentChunkName":"component---src-templates-article-template-js","path":"/2007/04/29/trying-to-linq-it-all-together-pt-i-epilogue","result":{"data":{"mdx":{"excerpt":"In the  last post  I said that I thought I'd have a bug in the keyword-based LINQ expression building. Of course, this is bollocks and not of the dogâ€¦","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Trying to LINQ it all together (Pt. I) - Epilogue\",\n  \"layout\": \"post\",\n  \"tags\": [\"software-development\", \"dotnet\", \"libs-and-frameworks\"],\n  \"date\": \"2007-04-29T19:22:03.000Z\",\n  \"redirect_from\": \"/go/83/\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"In the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/2007/04/25/trying-to-linq-it-all-together-pt-i\"\n  }, \"last post\"), \" I said that I thought I'd have a bug in the keyword-based LINQ expression building. Of course, this is bollocks and not of the dog variety.\"), mdx(\"p\", null, \"In my defense, the documentation I had read was getting it wrong, too, but other Microsoft online documentation gets it right. The following code shows the previous example written with the LINQ keywords.\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"text\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-text\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-text\"\n  }, \"Person[] pees = Person.CreatePeopleList();\\nvar salarySums =\\n  from p in pees group p by p.Posn into groups\\n  select new { Position = groups.Key, TotalSalary = (from p in groups select p.Salary).Sum() };\"))), mdx(\"p\", null, \"Works like a treat. In retrospect it is quite clear why my attempt wouldn't work. I was starting an iteration on the elements of groups and then doing a select on those. A select, though, acts on every element of the passed in object. Those were, quite rightfully, things of the Person type.\"));\n}\n;\nMDXContent.isMDXComponent = true;","fields":{"slug":"/2007/04/29/trying-to-linq-it-all-together-pt-i-epilogue"},"frontmatter":{"date":"2007-04-29","path":null,"title":"Trying to LINQ it all together (Pt. I) - Epilogue","tags":["software-development","dotnet","libs-and-frameworks"]}}},"pageContext":{"title":"Trying to LINQ it all together (Pt. I) - Epilogue","previous":{"fields":{"slug":"/2007/04/25/trying-to-linq-it-all-together-pt-i","published":true},"frontmatter":{"title":"Trying to LINQ it all together (Pt. I)","tags":["software-development","dotnet","libs-and-frameworks"],"date":"2007/04/25"}},"next":{"fields":{"slug":"/2007/05/10/how-much-haskell-can-i-squeeze-out-of-c","published":true},"frontmatter":{"title":"How much Haskell can I squeeze out of C#?","tags":["software-development","dotnet","haskell"],"date":"2007/05/10"}}}},"staticQueryHashes":["256249292","2581731408"]}
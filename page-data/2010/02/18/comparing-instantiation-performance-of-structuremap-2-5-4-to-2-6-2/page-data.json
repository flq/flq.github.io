{"componentChunkName":"component---src-templates-article-template-js","path":"/2010/02/18/comparing-instantiation-performance-of-structuremap-2-5-4-to-2-6-2","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Comparing instantiation performance of StructureMap 2.5.4 to 2.6.2\",\n  \"layout\": \"post\",\n  \"tags\": [\"dotnet\", \"patterns\", \"libs-and-frameworks\"],\n  \"date\": \"2010-02-18T18:30:00.000Z\",\n  \"redirect_from\": \"/go/156/\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Some weeks ago Jeremy \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"http://codebetter.com/blogs/jeremy.miller/archive/2010/02/04/structuremap-2-6-and-2-5-4-is-released.aspx\"\n  }, \"released StructureMap 2.6.x\"), \" . An interesting change is the apparent ditching of Reflection.Emit code in favour of using Expressions to do the \\u201Cinstance instantiation\\u201D (sic). Almost 2 years ago I wrote a post on \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/Content/Entry/109\"\n  }, \"instantiation performance of DI containers\"), \". I never checked up on StructureMap (SM). Now it\\u2019s time to do just that. \"), mdx(\"p\", null, \"My focus was on comparing SM 2.5.4 to SM 2.6.2, assuming that the 2.5 version still has the Emit code in it (pretty sure of it because there was some emit-related bug in it once). I extended the solution used for the performance comparison and set it up exactly the same for the two StructureMap versions.\"), mdx(\"p\", null, \"The only line of code that changes is the definition of the dependency. While in StructureMap 2.5.x you say:\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"csharp\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-csharp\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-csharp\"\n  }, mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token class-name\"\n  }, \"IContainer\"), \" c \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \"=\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token keyword\"\n  }, \"new\"), \" \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token constructor-invocation class-name\"\n  }, \"Container\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"(\"), \"e \", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token operator\"\n  }, \"=>\"), \" e\", mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \".\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token generic-method\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"token function\"\n  }, \"ForRequestedType\"), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"token generic class-name\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"token punctuation\"\n  }, \"<\"), \"IExchangeRateEngine\", mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"token punctuation\"\n  }, \">\"))), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"(\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \")\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \".\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token generic-method\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"token function\"\n  }, \"TheDefaultIsConcreteType\"), mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"token generic class-name\"\n  }, mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"token punctuation\"\n  }, \"<\"), \"SimpleExchangeRateEngine\", mdx(\"span\", {\n    parentName: \"span\",\n    \"className\": \"token punctuation\"\n  }, \">\"))), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \"(\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \")\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \")\"), mdx(\"span\", {\n    parentName: \"code\",\n    \"className\": \"token punctuation\"\n  }, \";\")))), mdx(\"p\", null, \"The current version gives you this syntax:\\n\", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"IContainer c = new Container(e=>e.For<IExchangeRateEngine>().Use<SimpleExchangeRateEngine>());\"), \" \"), mdx(\"p\", null, \"I was after comparative figures, hence I just ran the 2 projects from within Visual Studio as debug build. The times are noted in milliseconds / instantiation and denote the shortest / longest measured time:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"StructureMap 2.5.4 : 0.0058 / 0.0087  \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"StructureMap 2.6.2 : 0.0068 / 0.0104 \")), mdx(\"p\", null, \"This is a performance loss of roughly 17% / 19% . Therefore, there \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"is\"), \" some loss. However, it is far away from any order of magnitude and should not matter much at all in all but the most devious cases of excessive instantiating.\"));\n}\n;\nMDXContent.isMDXComponent = true;","fields":{"slug":"/2010/02/18/comparing-instantiation-performance-of-structuremap-2-5-4-to-2-6-2"},"frontmatter":{"date":"2010-02-18","path":null,"title":"Comparing instantiation performance of StructureMap 2.5.4 to 2.6.2","tags":["dotnet","patterns","libs-and-frameworks"]}}},"pageContext":{"title":"Comparing instantiation performance of StructureMap 2.5.4 to 2.6.2","previous":{"fields":{"slug":"/2010/02/06/getting-fubumvc-from-github-and-building-it-from-the-command-line","published":true},"frontmatter":{"title":"Getting FubuMVC from github and building it from the command line","tags":["ruby","dotnet","web","libs-and-frameworks"],"date":"2010/02/06"}},"next":{"fields":{"slug":"/2010/02/28/proposal-for-open-source-software-usage-in-net-as-comfy-as-rubygems","published":true},"frontmatter":{"title":"Proposal for Open Source Software usage in .NET (as comfy as rubygems)","tags":["dotnet","own-software"],"date":"2010/02/28"}}}},"staticQueryHashes":["256249292","2581731408"]}
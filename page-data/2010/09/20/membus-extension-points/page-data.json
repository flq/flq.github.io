{"componentChunkName":"component---src-templates-article-template-js","path":"/2010/09/20/membus-extension-points","result":{"data":{"markdownRemark":{"html":"<h2>ISubscription</h2>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">ISubscription</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Push</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">object</span></span> message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token return-type class-name\">Type</span> Handles <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This is the basic structure of a subscription. There is also a typed version:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">IHandles</span><span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span>T<span class=\"token operator\">&amp;</span>gt<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">:</span> ISubscription\n<span class=\"token punctuation\">{</span>\n    <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Push</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>If you want to write a handler, you can inherit from the Handles class:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">MsgAHandler</span> <span class=\"token punctuation\">:</span> Handles<span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span>MessageA<span class=\"token operator\">&amp;</span>gt<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MessageA</span> msg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Do stuff.</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>How can you introduce subscriptions into MemBus apart from method-based subscriptions? In the setup, either directly through _IConfigurableBus.AddSubscription(ISubscription subscription) _or more universal by adding an implementation of </p>\n<h2>ISubscriptionResolver</h2>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">ISubscriptionResolver</span>\n<span class=\"token punctuation\">{</span>\n    IEnumerable<span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span>ISubscription<span class=\"token operator\">&amp;</span>gt<span class=\"token punctuation\">;</span> <span class=\"token function\">GetSubscriptionsFor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">object</span></span> message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token return-type class-name\"><span class=\"token keyword\">bool</span></span> <span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ISubscription</span> subscription<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>A resolver must provide subscriptions for a given message and it may accept subscriptions. The boolean return value states whether the subscription was accepted or not.</p>\n<h2>IPublishPipelineMember</h2>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PublishToken</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">object</span></span> Message <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">private</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> IEnumerable<span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span>ISubscription<span class=\"token operator\">&amp;</span>gt<span class=\"token punctuation\">;</span> Subscriptions <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">private</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">IPublishPipelineMember</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">LookAt</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PublishToken</span> token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The “act” of publishing is the execution of the publish pipeline, which may consist of many pipeline members. You can participate in the publishing pipeline by implementing the above interface.</p>\n<h2>ISubscriptionShaper</h2>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">ISubscriptionShaper</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token return-type class-name\">ISubscription</span> <span class=\"token function\">EnhanceSubscription</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ISubscription</span> subscription<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This allows you to provide instances that “shape” subscriptions. This interface is best explained by an example:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ShapeToFilter<span class=\"token punctuation\">&lt;</span>M<span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">ISubscriptionShaper</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">Func<span class=\"token punctuation\">&lt;</span>M<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span><span class=\"token punctuation\">></span></span> filter<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">ShapeToFilter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Func<span class=\"token punctuation\">&lt;</span>M<span class=\"token punctuation\">,</span><span class=\"token keyword\">bool</span><span class=\"token punctuation\">></span></span> filter<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>filter <span class=\"token operator\">=</span> filter<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">ISubscription</span> <span class=\"token function\">EnhanceSubscription</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ISubscription</span> subscription<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">FilteredSubscription<span class=\"token punctuation\">&lt;</span>M<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>filter<span class=\"token punctuation\">,</span> subscription<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Consider that a subscription can interact with another instance implementing ISubscription in the “Push” method. A shaper is the abstraction of enhacing an existing subscription. It is used internally for making a subscription disposable, making it filtered, making it dispatch on the UI, etc.</p>","fields":{"slug":"/2010/09/20/membus-extension-points"},"frontmatter":{"date":"September 20, 2010","path":null,"title":"MemBus extension points","tags":["own-software","patterns","csharp","membus"]}}},"pageContext":{"title":"MemBus extension points","previous":{"fields":{"slug":"/2010/09/15/membus-rich-client-showcase-a-wpf-twitter-client","published":true},"frontmatter":{"title":"MemBus Rich Client showcase: A WPF Twitter Client","tags":["software-development","dotnet","membus"],"date":"2010/09/15"}},"next":{"fields":{"slug":"/2010/09/27/membus-using-an-ioc-container-to-provide-subscribers","published":true},"frontmatter":{"title":"MemBus: Using an IoC Container to provide subscribers","tags":["software-development","patterns","membus"],"date":"2010/09/27"}}}}}
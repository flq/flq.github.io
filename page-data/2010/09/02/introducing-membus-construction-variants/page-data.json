{
    "componentChunkName": "component---src-templates-article-template-js",
    "path": "/2010/09/02/introducing-membus-construction-variants",
    "result": {"data":{"mdx":{"excerpt":"I have used the “Conservative” class several times now. It is a concrete example of how to set up MemBus. Let us have a look at what it does:   A…","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Introducing MemBus: Construction Variants\",\n  \"layout\": \"post\",\n  \"tags\": [\"csharp\", \"membus\"],\n  \"date\": \"2010-09-02T14:16:00.000Z\",\n  \"topic\": \"membus\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"I have used the \\u201CConservative\\u201D class several times now. It is a concrete example of how to set up MemBus. Let us have a look at what it does:\"), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"/assets/image_35f48b02-c5a5-4090-9a9d-122b6268b256.png\",\n    \"alt\": \"image\",\n    \"title\": \"image\"\n  }), \"\\xA0\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A default publishpipeline is added by specifying a IPublishPipelineMember: It\\u2019s the sequential publisher which takes all resolved subscriptions and pushes the message to them\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A resolver is added which stores subscriptions in a hash table, resolving them via the message\\u2019s Type.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A subscription shaper is associated with the subscribing activity. Its job will be to take care that a newly added subscription can be disposed. \")), mdx(\"p\", null, \"There isn\\u2019t anything more you need to get a MemBus instance up and running. Compare this with a setup for a rich client (WPF or Windows Forms)\"), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"/assets/image_6fd22de0-dda4-40d7-af17-74cc4a188340.png\",\n    \"alt\": \"image\",\n    \"title\": \"image\"\n  }), \" \"), mdx(\"p\", null, \"You will see 2 major differences: \"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A different publisher gets used. The \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"ParallelBlockingPublisher\"), \" will use several threads to publish a message, but will block until all subscriptions return (as opposed to the \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"ParallelNonBlockingPublisher\"), \").\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A task scheduler is added that can be used to ensure that receiving a message happens on a specific thread: An essential feature when programming multi-threaded in a rich client to ensure that UI changes happen on the UI thread.\")));\n}\n;\nMDXContent.isMDXComponent = true;","fields":{"slug":"/2010/09/02/introducing-membus-construction-variants"},"frontmatter":{"date":"2010-09-02","path":null,"title":"Introducing MemBus: Construction Variants","tags":["csharp","membus"]}}},"pageContext":{"title":"Introducing MemBus: Construction Variants","previous":{"fields":{"slug":"/2010/08/30/introducing-membus-constructing-it","published":true},"frontmatter":{"title":"Introducing MemBus: Constructing it","tags":["software-development","dotnet","patterns","membus"],"date":"2010/08/30"}},"next":{"fields":{"slug":"/2010/09/06/membus-a-more-complex-rich-client-setup","published":true},"frontmatter":{"title":"MemBus: A more complex rich client setup","tags":["software-development","dotnet","patterns","membus"],"date":"2010/09/06"}}}},
    "staticQueryHashes": ["256249292","2581731408"]}
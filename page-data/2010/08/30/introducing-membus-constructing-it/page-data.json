{"componentChunkName":"component---src-templates-article-template-js","path":"/2010/08/30/introducing-membus-constructing-it","result":{"data":{"mdx":{"excerpt":"as you might have guessed, MemBus isn’t a single class. A number of different responsibilities are tucked nicely behind the IBus interface. Those…","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Introducing MemBus: Constructing it\",\n  \"layout\": \"post\",\n  \"tags\": [\"software-development\", \"dotnet\", \"patterns\", \"membus\"],\n  \"date\": \"2010-08-30T08:01:00.000Z\",\n  \"topic\": \"membus\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"as you might have guessed, MemBus isn\\u2019t a single class. A number of different responsibilities are tucked nicely behind the IBus interface. Those responsibilities want to be configured, which is done through the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"BusSetup\"), \" class.\"), mdx(\"p\", null, \"The BusSetup either takes a class that interacts with, or it allows you to interact directly with the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"IConfigurableBus\"), \". \"), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"/assets/image_288bb54a-ea88-4197-a4e9-5fe13d7f6b76.png\",\n    \"alt\": \"BusSetup\",\n    \"title\": \"BusSetup\"\n  }), \" \"), mdx(\"p\", null, \" Let\\u2019s talk about those responsibilities by looking at the interface:\"), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"/assets/ebe64f99-efa7-4c46-b66a-46eb7d74fb2a_4c6b7c23-511e-4fc4-b265-11d69c2dbbf9.png\",\n    \"alt\": \"IConfigurableBus_interface\",\n    \"title\": \"IConfigurableBus_interface\"\n  })), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"ConfigurePublishing\"), \": Given a Message and a number of subscriptions, configure how the message is published on the subscriptions\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"ConfigureSubscribing\"), \": Given a subscription, configure how those subscriptions are shaped when a message is to be published to them\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"ConfigureBubbling\"), \": Given a Bus, which may be a child or a parent of some other bus (the concept will be explained in a later post), configures if messages bubble up to a parent or are pushed down to a child\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"AddResolver\"), \": A subscription resolver\\u2019s job is to provide subscriptions for a given message\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"AddSubscription\"), \": Pretty clear thing.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"AddAutomaton\"), \": An automaton can be anything whose lifetime should be closely related to the Bus.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"AddService\"), \": Similar to an automaton, these are rather instances that serve some purpose in making other parts of the Bus work. \")), mdx(\"p\", null, \"MemBus doesn\\u2019t provide you with any singleton or anything. Being essentially a service to your application, it is your responsibility to keep as many instances of IBus as long as you want, although it is likely that you\\u2019ll usually have one instance around.\"));\n}\n;\nMDXContent.isMDXComponent = true;","fields":{"slug":"/2010/08/30/introducing-membus-constructing-it"},"frontmatter":{"date":"2010-08-30","path":null,"title":"Introducing MemBus: Constructing it","tags":["software-development","dotnet","patterns","membus"]}}},"pageContext":{"title":"Introducing MemBus: Constructing it","previous":{"fields":{"slug":"/2010/08/24/introducing-membus-in-memory-publish-subscribe-messaging","published":true},"frontmatter":{"title":"Introducing MemBus: In-Memory Publish/Subscribe Messaging","tags":["software-development","dotnet","patterns","membus"],"date":"2010/08/24"}},"next":{"fields":{"slug":"/2010/09/02/introducing-membus-construction-variants","published":true},"frontmatter":{"title":"Introducing MemBus: Construction Variants","tags":["csharp","membus"],"date":"2010/09/02"}}}},"staticQueryHashes":["256249292","2581731408"]}
{"componentChunkName":"component---src-templates-article-template-js","path":"/2010/10/01/membus-caliburn-micro-lean-screen","result":{"data":{"markdownRemark":{"html":"<p>To be honest, without <a href=\"http://www.rudigrobler.net/Blog/screen-conductor-101\">this blog post</a> on <a href=\"http://caliburnmicro.codeplex.com/\">Caliburn.Micro</a> I was kind of stuck. But now I ended up with my Screen conductor, and it’s likely that it is not going to change a lot:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Single</span></span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ShellViewModel</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">Conductor<span class=\"token punctuation\">&lt;</span>Screen<span class=\"token punctuation\">></span></span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">IDisposable</span> screenStreamDispose<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">ShellViewModel</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IObservable<span class=\"token punctuation\">&lt;</span>RequestToActivateScreen<span class=\"token punctuation\">></span></span> screenStream<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        screenStreamDispose <span class=\"token operator\">=</span> screenStream\n            <span class=\"token punctuation\">.</span><span class=\"token function\">SubscribeOnDispatcher</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">Where</span><span class=\"token punctuation\">(</span>msg<span class=\"token operator\">=></span>msg<span class=\"token punctuation\">.</span>ScreenAvailable<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">Subscribe</span><span class=\"token punctuation\">(</span>onNextScreenRequest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">onNextScreenRequest</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RequestToActivateScreen</span> request<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">ActivateItem</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>Screen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnDeactivate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> close<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        screenStreamDispose<span class=\"token punctuation\">.</span><span class=\"token function\">Dispose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">base</span><span class=\"token punctuation\">.</span><span class=\"token function\">OnDeactivate</span><span class=\"token punctuation\">(</span>close<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The Observable is constructed based on <strong>MemBus</strong>. The screenStream is shaped with the aid of the reactive framework while “<strong>ActivateItem</strong>” loads the corresponding view for the given Screen. Overriding <strong>OnDeactivate</strong> gives a nice place to dispose of a subscription. The whole code is to be found in the <a href=\"http://github.com/flq/MemBus/tree/master//Membus.WpfTwitterClient/\">MemBus “Hello World” App</a>.</p>","fields":{"slug":"/2010/10/01/membus-caliburn-micro-lean-screen"},"frontmatter":{"date":"October 01, 2010","path":null,"title":"MemBus + Caliburn.Micro = Lean Screen","tags":["software-development","dotnet","membus","libs-and-frameworks","WPF"]}}},"pageContext":{"title":"MemBus + Caliburn.Micro = Lean Screen","previous":{"fields":{"slug":"/2010/09/27/membus-using-an-ioc-container-to-provide-subscribers","published":true},"frontmatter":{"title":"MemBus: Using an IoC Container to provide subscribers","tags":["software-development","patterns","membus"],"date":"2010/09/27"}},"next":{"fields":{"slug":"/2010/10/11/useful-extension-methods-for-points-and-friends-in-wpf","published":true},"frontmatter":{"title":"Useful Extension Methods for Points and friends in WPF","tags":["WPF","csharp","libs-and-frameworks"],"date":"2010/10/11"}}}}}
{"componentChunkName":"component---src-templates-article-template-js","path":"/2010/11/30/dealing-with-primitive-obsession-this-time-measurements","result":{"data":{"markdownRemark":{"html":"<p>Jeremy Miller on Twitter pointed out a blog post that aged well, because it is valid information: “<a href=\"http://grabbagoft.blogspot.com/2007/12/dealing-with-primitive-obsession.html\">Dealing with primitive obsession</a>”. Have a go through. The basic thing is: Value Objects make your code expressive! (<a href=\"http://realfiction.net/go/191\">Book of Greg, psalm 11</a>).</p>\n<p>Instead of having doubles and what-have-you floating around, introduce Zipcodes, or Money, or…Measures. This subject came up at a customer whose software has to deal with measurements. While they may not be moving towards this way to express measurements, I could not resist pushing the idea a bit.</p>\n<p>Measures are essentially numbers with Units attached to it. Units are things like Kilometers, Meters, Seconds, and many many more. Try typing in “1 yard/second in miles/fortnight” in Google and you will find that “<strong>1 (yard / second) = 687.272727 miles / fortnight</strong>” </p>\n<p>Here you have already learned one interesting concept. Units can be compatible such that a Measure in one Unit is convertible to a measure in another unit without losing its meaning. Compatibility means that the <strong>Physical Units</strong> are the same. In the above example the physical unit of yard / second and mile / fortnight is <strong>Length / Time</strong>.</p>\n<p>Basic mathematical operations are also applicable to Units. While addition and subtraction have no impact on Units (they are invariant under addition and subtraction), multiplication and division change a Unit:</p>\n<ul>\n<li>If you multiply meter by meter you get a new Unit, m².</li>\n<li>If you divide meter by second, you get a new Unit with its own significance: velocity in m/sec </li>\n</ul>\n<p>Divisions may cancel out Units:</p>\n<ul>\n<li>m * (inch / m) gives you the unit <strong>Inch</strong></li>\n<li>m/sec * sec/m would give you no unit. </li>\n</ul>\n<p>The rules governing measures and units can also be expressed in software. The current result of this can be found at github as <a href=\"https://github.com/flq/NMeasure\">NMeasure</a>. Let me give you some examples of how to use the stuff.</p>\n<p>Any double is explicitly convertible to a Measure:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> m <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Measure<span class=\"token punctuation\">)</span><span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\nm<span class=\"token punctuation\">.</span>Unit<span class=\"token punctuation\">.</span>IsDimensionless<span class=\"token punctuation\">;</span> <span class=\"token comment\">//true</span></code></pre></div>\n<p>Any measure can be multiplied with Units:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> m <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Measure<span class=\"token punctuation\">)</span><span class=\"token number\">100</span> <span class=\"token operator\">*</span> U<span class=\"token punctuation\">.</span>Meter<span class=\"token punctuation\">;</span>\nm<span class=\"token punctuation\">.</span>Unit<span class=\"token punctuation\">.</span><span class=\"token function\">Equals</span><span class=\"token punctuation\">(</span>Unit<span class=\"token punctuation\">.</span><span class=\"token function\">From</span><span class=\"token punctuation\">(</span>U<span class=\"token punctuation\">.</span>Meter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true&lt;/pre>&lt;/div></span></code></pre></div>\n<p><strong>U</strong> is a special Enum that contains numerous Unit names, while Unit is our actual Unit class.</p>\n<p>Basic mathematical operations cause no troubles for NMeasure. Well, almost. For instance, it won’t let you add apples to oranges if you try:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> m1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Measure</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> U<span class=\"token punctuation\">.</span>Foot<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> m2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Measure</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> U<span class=\"token punctuation\">.</span>Gram<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//\"These measures cannot be sensibly added to a single new measure\"</span>\nAssert<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Throws</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>InvalidOperationException<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> m3 <span class=\"token operator\">=</span> m1 <span class=\"token operator\">+</span> m2<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>But multiplication (and division) works:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> m1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Measure</span><span class=\"token punctuation\">(</span><span class=\"token number\">6.0</span><span class=\"token punctuation\">,</span> U<span class=\"token punctuation\">.</span>Meter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> m2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Measure</span><span class=\"token punctuation\">(</span><span class=\"token number\">2.0</span><span class=\"token punctuation\">,</span> U<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> m3 <span class=\"token operator\">=</span> m1 <span class=\"token operator\">/</span> m2<span class=\"token punctuation\">;</span>\nm3<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">.</span><span class=\"token function\">IsEqualTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">3.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nm3<span class=\"token punctuation\">.</span>Unit<span class=\"token punctuation\">.</span><span class=\"token function\">IsEqualTo</span><span class=\"token punctuation\">(</span>U<span class=\"token punctuation\">.</span>Meter<span class=\"token punctuation\">.</span><span class=\"token function\">Per</span><span class=\"token punctuation\">(</span>U<span class=\"token punctuation\">.</span>Second<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Of course, the nice stuff is converting, and especially converting without having to write a conversion function between every conceivable conversion. Check out this Unit test that shows part of the Technical DSL to describe Units, their specifics and their conversions:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">AdHocConfig<span class=\"token punctuation\">.</span><span class=\"token function\">Use</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">=></span> c<span class=\"token punctuation\">.</span><span class=\"token function\">Unit</span><span class=\"token punctuation\">(</span>U<span class=\"token punctuation\">.</span>Millimeter<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">IsPhysicalUnit</span><span class=\"token punctuation\">(</span>U<span class=\"token punctuation\">.</span>_LENGTH<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">StartScale</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">To</span><span class=\"token punctuation\">(</span>U<span class=\"token punctuation\">.</span>Centimeter<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">To</span><span class=\"token punctuation\">(</span>U<span class=\"token punctuation\">.</span>Meter<span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">To</span><span class=\"token punctuation\">(</span>U<span class=\"token punctuation\">.</span>Kilometer<span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> m <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Measure</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span> U<span class=\"token punctuation\">.</span>Kilometer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> m2 <span class=\"token operator\">=</span> m<span class=\"token punctuation\">.</span><span class=\"token function\">ConvertTo</span><span class=\"token punctuation\">(</span>U<span class=\"token punctuation\">.</span>Millimeter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nm2<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">.</span><span class=\"token function\">IsEqualTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The conversion bit is still work in progress, but as you can see, the rules of calculating with measurements are becoming transparent and explicit!</p>","fields":{"slug":"/2010/11/30/dealing-with-primitive-obsession-this-time-measurements"},"frontmatter":{"date":"November 30, 2010","path":null,"title":"Dealing with primitive obsession (this time: Measurements)","tags":["dotnet","patterns","csharp","own-software"]}}},"pageContext":{"title":"Dealing with primitive obsession (this time: Measurements)","previous":{"fields":{"slug":"/2010/11/29/links-around-øredev-2010","published":true},"frontmatter":{"title":"Links around Øredev 2010","tags":["conferences"],"date":"2010/11/29"}},"next":{"fields":{"slug":"/2010/12/19/my-bare-minimum-ndepend-rules-and-how-to-get-them-into-a-new-project","published":true},"frontmatter":{"title":"My bare minimum NDepend rules (and how to get them into a new project)","tags":["software-development","tools"],"date":"2010/12/19"}}}}}
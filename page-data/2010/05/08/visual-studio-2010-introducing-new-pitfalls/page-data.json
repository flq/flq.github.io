{"componentChunkName":"component---src-templates-article-template-js","path":"/2010/05/08/visual-studio-2010-introducing-new-pitfalls","result":{"data":{"mdx":{"excerpt":"A couple of days ago I installed Visual Studio 2010 on my machine. In general it seems to be a fine release, especially when beefed up with Resharperâ€¦","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Visual Studio 2010: Introducing new pitfalls\",\n  \"layout\": \"post\",\n  \"tags\": [\"software-development\", \"dotnet\", \"tools\"],\n  \"date\": \"2010-05-07T22:37:00.000Z\",\n  \"redirect_from\": \"/go/167/\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"A couple of days ago I installed Visual Studio 2010 on my machine. In general it seems to be a fine release, especially when beefed up with Resharper V5 (I very, very much like the new Ctrl + Shift + Alt + A).\"), mdx(\"p\", null, \"However, the new release managed to drive me nuts yesterday when I started a new demo project with the good old Console Project. It so appears that the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Target Framework\"), \" set in the Project properties is by default the new \\u201C.Net Framework 4 Client Profile\\u201D. \"), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"/assets/image_3.png\",\n    \"alt\": \"image\",\n    \"title\": \"image\"\n  }), \" \"), mdx(\"p\", null, \"This is a limited subset which, if you can restrict yourself to the assemblies contained, allows for a smaller redistribution footprint.\"), mdx(\"p\", null, \"However, as outlined in this \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"http://msdn.microsoft.com/en-gb/library/cc656912.aspx\"\n  }, \"msdn document\"), \" (which also lists the available assemblies), when using this Target, \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"you cannot reference any other assembly as those contained in the Client profile\"), \". Imagine my not-understanding-the-world-face when I added a reference, let R# do my code-completion and then realize that the compiler complained about a missing assembly reference ! Here, then a warning. If you intend to reference anything that is not contained in the client profile.\"), mdx(\"p\", null, \"The second pitfall in using the Command line profile is the very controversially discussed decision to have a Console App default to x86 processor\"), mdx(\"p\", null, \"\\xA0\", mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"/assets/image_063ac2d2-5e6a-4e49-a5b4-391b8297e427.png\",\n    \"alt\": \"image\",\n    \"title\": \"image\"\n  }), \" \"), mdx(\"p\", null, \"This setting is not changeable through the Visual studio IDE anymore once you add additional projects to your solution. I learned it the hard way (is there any other way?) when writing Unit Tests in a separate class library project and referencing the console project. The only thing that the R# task runner was able to say was a \\u201CBadImageFormatException\\u201D which under the circumstances absolutely makes sense since the class library is allowed to run in any processor mode. \"), mdx(\"p\", null, \"See also \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"http://blogs.msdn.com/rmbyers/archive/2009/06/08/anycpu-exes-are-usually-more-trouble-then-they-re-worth.aspx\"\n  }, \"Rick Byers - AnyCPU Exes are usually more trouble than they're worth\"), \" (btw, \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/go/153\"\n  }, \"I know the issues\"), \", thank you very much) and \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"http://connect.microsoft.com/VisualStudio/feedback/details/455103/new-c-console-application-targets-x86-by-default\"\n  }, \"New C# Console application targets x86 by default\"), \" (Microsoft Connect)\"), mdx(\"p\", null, \"Personally I don\\u2019t get why Microsoft makes such a decision if there quite obviously are a large number of developers who want to \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"decide for themselves\"), \" what processor architecture to target. If you want to change it \\u2013 bad luck. You can enter the .sln with an editor though an add the line as shown in the following screenshot...\"), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"/assets/image_b4b6799f-0ce4-4b72-b03b-17df7e356909.png\",\n    \"alt\": \"image\",\n    \"title\": \"image\"\n  })));\n}\n;\nMDXContent.isMDXComponent = true;","fields":{"slug":"/2010/05/08/visual-studio-2010-introducing-new-pitfalls"},"frontmatter":{"date":"2010-05-07","path":null,"title":"Visual Studio 2010: Introducing new pitfalls","tags":["software-development","dotnet","tools"]}}},"pageContext":{"title":"Visual Studio 2010: Introducing new pitfalls","previous":{"fields":{"slug":"/2010/04/17/a-http-file-server-in-130-lines-of-code","published":true},"frontmatter":{"title":"A HTTP file server in 130 lines of code","tags":["software-development","dotnet","web"],"date":"2010/04/17"}},"next":{"fields":{"slug":"/2010/05/22/assimilose","published":true},"frontmatter":{"title":"Assimilose","tags":["loosely-coupled","geekdom"],"date":"2010/05/22"}}}},"staticQueryHashes":["256249292","2581731408"]}
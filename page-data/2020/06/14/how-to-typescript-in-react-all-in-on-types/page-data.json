{"componentChunkName":"component---src-templates-article-template-js","path":"/2020/06/14/how-to-typescript-in-react-all-in-on-types","result":{"data":{"markdownRemark":{"html":"<p>After a crazy long hiatus in getting something written I would like to give you an update on how Typescript and react is being used while building the <a href=\"https://aheadintranet.com\">ahead</a> UI. The example here is inspired by an upcoming feature of the ahead\nintranet which is always nice to have around - a simple poll to get quick feedback on a question.</p>\n<p>Given these helpers here:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> SimpleAction<span class=\"token operator\">&lt;</span><span class=\"token constant\">K</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">V</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">void</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token constant\">V</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">void</span> <span class=\"token operator\">?</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">type</span><span class=\"token operator\">:</span> <span class=\"token constant\">K</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">type</span><span class=\"token operator\">:</span> <span class=\"token constant\">K</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">&amp;</span> <span class=\"token constant\">V</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> switchDefaultGuard<span class=\"token operator\">&lt;</span><span class=\"token constant\">S</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>state<span class=\"token operator\">:</span> <span class=\"token constant\">S</span><span class=\"token punctuation\">,</span> action<span class=\"token operator\">:</span> <span class=\"token builtin\">never</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">S</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>You can define a <a href=\"https://www.typescriptlang.org/docs/handbook/advanced-types.html#union-types\">Typescript Union Type</a> to be used in a reducer of your choice:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> PollAction <span class=\"token operator\">=</span>\n  <span class=\"token operator\">|</span> SimpleAction<span class=\"token operator\">&lt;</span><span class=\"token string\">\"POLL_LOADING\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> pollId<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">|</span> SimpleAction<span class=\"token operator\">&lt;</span><span class=\"token string\">\"POLL_LOADED\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> poll<span class=\"token operator\">:</span> Poll <span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">|</span> SimpleAction<span class=\"token operator\">&lt;</span><span class=\"token string\">\"VOTE_PLACED\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> choice<span class=\"token operator\">:</span> PollChoice <span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>What this means is that in a reducer you can definea switch statement that is compile-time safe with regard to the structure of handled actions as well as whether you're handling all cases:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">pollStateReducer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token operator\">:</span> PollState<span class=\"token punctuation\">,</span> action<span class=\"token operator\">:</span> PollEvent</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> PollState <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span><span class=\"token keyword\">type</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"POLL_LOADING\"</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token operator\">...</span>state\n        mode<span class=\"token operator\">:</span> <span class=\"token string\">\"POLL_LOADING\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"POLL_LOADED\"</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token operator\">...</span>state<span class=\"token punctuation\">,</span>\n        mode<span class=\"token operator\">:</span> <span class=\"token string\">\"POLL_NOT_VOTED\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token operator\">...</span>poll\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"VOTE_PLACED\"</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token operator\">...</span>state<span class=\"token punctuation\">,</span>\n        choice<span class=\"token operator\">:</span> action<span class=\"token punctuation\">.</span>choice\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> <span class=\"token function\">switchDefaultGuard</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>so far, so <em>been there, done that</em>. But, why not using a union type for the UI state as well? After all, a certain piece of UI is often in one of several states in which different values may be relevant at time. Let's try this out - The Poll component may be in one of two different states: loading and unvoted state.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> PollState <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> question<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">|</span> <span class=\"token punctuation\">{</span>\n    mode<span class=\"token operator\">:</span> <span class=\"token string\">\"POLL_LOADING\"</span><span class=\"token punctuation\">;</span>\n    pollId<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">|</span> <span class=\"token punctuation\">{</span>\n    mode<span class=\"token operator\">:</span> <span class=\"token string\">\"POLL_NOT_VOTED\"</span>\n    choices<span class=\"token operator\">:</span> Choice<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    choice<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">|</span> PollChoice\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>What does the state tell us?</p>\n<ul>\n<li>In any mode, a question is available</li>\n<li>In the loading mode, there is a poll id</li>\n<li>In the mode where the user hasn't voted, there is a list of choices and the current choice taken</li>\n</ul>\n<p>This is only a subset of the set of possible states that a poll component will sensibly display, but for the discussin it should be enough.</p>\n<p>In our react component we can render the UI based on the mode-property of the state:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">PollComponent</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* Stuff like useReducer or similar */</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">.</span>mode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">case</span> <span class=\"token string\">\"POLL_LOADING\"</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>Here we have the <span class=\"token punctuation\">{</span>state<span class=\"token punctuation\">.</span>pollId<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n      <span class=\"token keyword\">case</span> <span class=\"token string\">\"POLL_NOT_VOTED\"</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>Here we have <span class=\"token punctuation\">{</span>state<span class=\"token punctuation\">.</span>choices<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">}</span> and our current choice<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>state<span class=\"token punctuation\">.</span>choice<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n      \n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Sadly, we <a href=\"https://esdiscuss.org/topic/proposal-switch-expressions\">do not have switch expressions in js/ts</a>, so we create a function and call it straight away to get a value.\nYou can see that based on the discriminating mode-property, we get access to those parts of the state that are properly defined in a given mode. This gives you less runtime failure modes and more type-checking.</p>\n<p>This is all fairly nice, but there's always a sour taste - I jumped some problems in this kind of setup. Let's revisit the reducer that handles the <strong>VOTE_PLACED</strong> action. There the type of the <code class=\"language-text\">state</code> argument will be <code class=\"language-text\">PollState</code> - this isn't enough to specify the return value from your function. In order to be able to define it, Typescript must know which part of the union type you are defining, therefore you need to respecify the mode:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">case</span> <span class=\"token string\">\"VOTE_PLACED\"</span><span class=\"token operator\">:</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>state<span class=\"token punctuation\">,</span>\n    mode<span class=\"token operator\">:</span> <span class=\"token string\">\"POLL_NOT_VOTED\"</span><span class=\"token punctuation\">,</span>\n    choice<span class=\"token operator\">:</span> action<span class=\"token punctuation\">.</span>choice\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>so far, so cute - but we're still not there yet. The <code class=\"language-text\">state</code> is not constrained enough to be usable as a spread, because there are valid PollState sub-states that may have the <code class=\"language-text\">choices</code>-property missing which is nonetheless mandatory in the state object we are constructing. What we want is telling the compiler that our state is already of the type where <strong>mode = \"POLL<em>NOT</em>VOTED\"</strong>. How can we achieve that? <code class=\"language-text\">Extract</code> to the rescue!</p>\n<p>Extract is a built-in type which we can use to extract the proper sub-type from the discriminated union. It's signature is remarkably simple, the explanation also:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">/**\n * Extract from T those types that are assignable to U\n */</span>\n<span class=\"token keyword\">type</span> Extract<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">U</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">U</span> <span class=\"token operator\">?</span> <span class=\"token constant\">T</span> <span class=\"token operator\">:</span> <span class=\"token builtin\">never</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>We can use it e.g. like such:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> PollNotVoted <span class=\"token operator\">=</span> Extract<span class=\"token operator\">&lt;</span>PollState<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>mode<span class=\"token operator\">:</span> <span class=\"token string\">\"POLL_NOT_VOTED\"</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span></code></pre></div>\n<p>which gives us the final version that compiles of the case-branch in the reducer above:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">case</span> <span class=\"token string\">\"VOTE_PLACED\"</span><span class=\"token operator\">:</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span><span class=\"token punctuation\">(</span>state <span class=\"token keyword\">as</span> PollNotVoted<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    choice<span class=\"token operator\">:</span> action<span class=\"token punctuation\">.</span>choice\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Note that the cast has now removed the need to specify the mode in the return explicitly. The casted spread ensures that you stay in the proper sub-type of the discriminated union.</p>\n<p>The basic idea that this code expressed is:</p>\n<ul>\n<li>Think about the different modes that your UI can be in</li>\n<li>Think about what the state encompasses in each mode</li>\n<li>If you feel like it, encode it in your type :)</li>\n</ul>","fields":{"slug":"/2020/06/14/how-to-typescript-in-react-all-in-on-types"},"frontmatter":{"date":"June 14, 2020","path":null,"title":"How to typescript in react: All-in on types!","tags":["programming","typescript","react"]}}},"pageContext":{"title":"How to typescript in react: All-in on types!","previous":{"fields":{"slug":"/2019/07/14/migrating-data-while-being-always-on","published":true},"frontmatter":{"title":"Migrating data while being 'always on'","tags":["software-development"],"date":"2019/07/14"}},"next":null}}}
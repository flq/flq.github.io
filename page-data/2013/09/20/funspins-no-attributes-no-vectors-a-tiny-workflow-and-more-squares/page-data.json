{"componentChunkName":"component---src-templates-article-template-js","path":"/2013/09/20/funspins-no-attributes-no-vectors-a-tiny-workflow-and-more-squares","result":{"data":{"markdownRemark":{"html":"<h3>Functional space-invaders series</h3>\n<ol>\n<li><a href=\"/2013/09/17/funspins-a-recap-of-rob-ashtons-lessons-das-intro\">A recap of Rob Ashton's lessons - Das Intro</a></li>\n<li><a href=\"/2013/09/18/funspins-drawing-a-rectangle\">Drawing a Rectangle</a></li>\n<li><a href=\"/2013/09/19/funspins-moving-a-rectangle\">Moving a Rectangle</a></li>\n<li>No attributes, No vectors, A tiny Workflow and more squares</li>\n<li><a href=\"/2013/09/23/funspins-state-the-world-the-loop\">State, the World, the Loop</a></li>\n<li><a href=\"/2013/09/24/funspins-the-hero-must-move-the-enemies-must-move-smarter\">The hero must move, the enemies must move smarter</a></li>\n<li><a href=\"/2013/09/25/funspins-the-hero-shoots\">The hero shoots</a></li>\n<li><a href=\"/2013/09/26/funspins-collisions-the-dead-and-a-not-so-grateful-ending\">Collisions, the dead, and a (not so) grateful ending</a></li>\n</ol>\n<blockquote>\n<p>Inspired by Rob Ashton's series \"<a href=\"http://codeofrob.com/entries/learn-functional-programming-with-me---attributes-and-vectors.html\">Learn</a> <a href=\"http://codeofrob.com/entries/learn-functional-programming-with-me---improving-my-workflow.html\">functional</a> <a href=\"http://codeofrob.com/entries/learn-functional-programming-with-me---adding-lots-more-state.html\">programming with me</a>\"</p>\n</blockquote>\n<p>This post kind of covers 3 of Rob's posts, as, frankly, I can't say much about attributes - in Rob's case it refers to the DOM, which we don't have here.\nWhy he would mention Vectors? I don't know, maybe to sound fancy ;)  </p>\n<p>When it comes to the working workflow in Haskell, my tool of choice right now is the interactive haskell (<em>ghci</em>) - saying <strong><em>:load game</em></strong> (provided I have a game.hs lying around) will either tell me that all is cool or throw relevant compiler errors at me, which usually is some form of elaborate type mismatch (<em>90%</em>) or a syntax error (<em>9%</em>) with an error margin of Â±1%.</p>\n<p>As to drawing lots of enemies, functional approaches should be somewhat similar. The permutation thing that Rob does with the <strong>(for [x [...]] [y [...]])</strong> is also achieved with list comprehensions, just that you have to specify two ranges to feed the output. Here is a function to give us a grid of squares:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\">\t<span class=\"token hvariable\">enemyGrid</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">originX</span><span class=\"token punctuation\">,</span><span class=\"token hvariable\">originY</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">rows</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">cols</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> \n\t  <span class=\"token builtin\">map</span> <span class=\"token hvariable\">toRect</span> <span class=\"token punctuation\">[</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">x</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">y</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> <span class=\"token hvariable\">x</span> <span class=\"token operator\">&lt;-</span> <span class=\"token builtin\">take</span> <span class=\"token hvariable\">cols</span> <span class=\"token punctuation\">[</span><span class=\"token hvariable\">originX</span><span class=\"token punctuation\">,</span><span class=\"token hvariable\">originX</span><span class=\"token operator\">+</span><span class=\"token number\">60</span><span class=\"token operator\">..</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">y</span> <span class=\"token operator\">&lt;-</span> <span class=\"token builtin\">take</span> <span class=\"token hvariable\">rows</span> <span class=\"token punctuation\">[</span><span class=\"token hvariable\">originY</span><span class=\"token punctuation\">,</span><span class=\"token hvariable\">originY</span><span class=\"token operator\">+</span><span class=\"token number\">30</span><span class=\"token operator\">..</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n\t  <span class=\"token keyword\">where</span>\n\t    <span class=\"token hvariable\">toRect</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">x</span><span class=\"token punctuation\">,</span><span class=\"token hvariable\">y</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token constant\">Rect</span> <span class=\"token hvariable\">x</span> <span class=\"token hvariable\">y</span> <span class=\"token number\">20</span> <span class=\"token number\">10</span></code></pre></div>\n<p>Providing two comma-separated values to the Haskell range (the <strong>[n..m]</strong> thing, or here, the <strong>[n, n+s, ..]</strong>) defines the step of the range. Due to the lazy nature of Haskell,\nI can leave the range open ended. The <em>breaking condition</em> is that I just <strong>take</strong> as many values as I want (columns and rows, respectively).</p>\n<p>These little buggers need to be fed into the drawing API, which we can do as such:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">canvas</span> <span class=\"token operator\">&lt;-</span> <span class=\"token hvariable\">FX.getVideoSurface</span>\n<span class=\"token builtin\">mapM</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">\\</span><span class=\"token hvariable\">r</span> <span class=\"token operator\">-></span> <span class=\"token hvariable\">FX.fillRect</span> <span class=\"token hvariable\">canvas</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">Just</span> <span class=\"token hvariable\">r</span><span class=\"token punctuation\">)</span> <span class=\"token hvariable\">white</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">$</span> <span class=\"token hvariable\">enemyGrid</span> <span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n<span class=\"token constant\">FX</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">flip</span> <span class=\"token hvariable\">canvas</span></code></pre></div>\n<p><strong>mapM</strong> is again the monadic version of map<sup>*)</sup>, required to create something wrapped in IO context. The <strong>(\\r -></strong> denotes the start of a lambda, while <strong>$</strong> influences associativity such that I spare myself surrounding the <strong>enemyGrid</strong> call with brackets.</p>\n<p><sup>*) or Select, for the LINQ folks crazy enough to have followed this so far)</sup> </p>","fields":{"slug":"/2013/09/20/funspins-no-attributes-no-vectors-a-tiny-workflow-and-more-squares"},"frontmatter":{"date":"September 20, 2013","path":null,"title":"FunSpIns - No attributes, No vectors, A tiny Workflow and more squares","tags":["programming","haskell","fun-spin"]}}},"pageContext":{"title":"FunSpIns - No attributes, No vectors, A tiny Workflow and more squares","previous":{"fields":{"slug":"/2013/09/19/funspins-moving-a-rectangle","published":true},"frontmatter":{"title":"FunSpIns - Moving a Rectangle","tags":["programming","haskell","fun-spin"],"date":"2013/09/19"}},"next":{"fields":{"slug":"/2013/09/23/funspins-state-the-world-the-loop","published":true},"frontmatter":{"title":"FunSpIns - State, the World, the Loop","tags":["programming","haskell","fun-spin"],"date":"2013/09/23"}}}}}
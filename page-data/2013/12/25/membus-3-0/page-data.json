{"componentChunkName":"component---src-templates-article-template-js","path":"/2013/12/25/membus-3-0","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"MemBus 3.0\",\n  \"tags\": [\"own-software\", \"membus\"],\n  \"date\": \"2013-12-25T14:00:00.000Z\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"MemBus finally got the maintenance it deserves.\\nWhat's new?\"), mdx(\"h2\", null, \"Portable Class Library\"), mdx(\"p\", null, \"The latest incarnation of MemBus requires .NET 4.5 to run. It targets a Pcl profile for standard Windows and Windows Store profile. Expect the WP8 to also be targetted in a future minor release. The only thing stopping me for now is the missing \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"ConcurrentDictionary\"), \" - I will need a replacement for that. There are some \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"http://stackoverflow.com/questions/18367839/alternative-to-concurrentdictionary-for-portable-class-library\"\n  }, \"promising leads\"), \", but I need a proper testbed to see what performance impact a switch in that area of the code has.\"), mdx(\"p\", null, \"To people sticking to previous versions of the .NET framework I am afraid that things will just stay as they were pre-V3.\"), mdx(\"h2\", null, \"New publishing features.\"), mdx(\"p\", null, \"The \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"IPublisher\"), \" interface now provides additional publishing capabilities via\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"An Observable - MemBus will start consuming the observable and feeding the resulting messages into its infrastructure.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"In an awaitable fashion. Here, configuration of how to process certain messages is short-circuited such that the awaitable pattern works as expected, i.e. the \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"continuation\"), \" will be called once all subscriptions have processed the message that was sent.\")), mdx(\"h2\", null, \"FlexibleSubscriptionAdapter\"), mdx(\"p\", null, \"All possibilities to configure method registration has been merged into a single \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"\\\"RegisterMethods\\\"\"), \" call. This is because the signature of the method sufficiently defines what you want to happen. Allowed are the following method signatures...\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"T Method(Z msg): This method receives messages and can send one out as a reaction. If the return value implements IEnumerable it will be enumerated and all messages will be put onto the bus.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"void Method(Z msg): Just accepts messages.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"void Method(IObservable\", \"<\", \"T\", \">\", \" msgs) : Get an observable from MemBus much like you would call \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"Observe\"), \" on the Bus.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"IObservable\", \"<\", \"Z\", \">\", \" Method(IObservable\", \"<\", \"T\", \">\", \" msgs): Return an Observable after accepting one from MemBus. This is ideal to set up some transformations, e.g. with the set of methods provided by the Rx libraries.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"IObservable\", \"<\", \"Z\", \">\", \" Method() : Provide observables to MemBus, much like calling Publish with an observable. Ideal to set up message sources with MemBus, e.g. a Timer.\")), mdx(\"p\", null, \"I hope you'll enjoy the new capabilities. Next on the roadmap is, as mentioned, the WP8 profile and then some investigations how well MemBus plays together with \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/reactiveui/ReactiveUI\"\n  }, \"ReactiveUI\")));\n}\n;\nMDXContent.isMDXComponent = true;","fields":{"slug":"/2013/12/25/membus-3-0"},"frontmatter":{"date":"December 25, 2013","path":null,"title":"MemBus 3.0","tags":["own-software","membus"]}}},"pageContext":{"title":"MemBus 3.0","previous":{"fields":{"slug":"/2013/12/10/c-6-language-features-5-cents","published":true},"frontmatter":{"title":"C# 6 language features? 5 cents.","tags":["csharp"],"date":"2013/12/10"}},"next":{"fields":{"slug":"/2013/12/27/get-periodic-messages-into-membus","published":true},"frontmatter":{"title":"Get periodic messages into MemBus","tags":["own-software","membus"],"date":"2013/12/27"}}}},"staticQueryHashes":["256249292","2581731408","3764592887"]}
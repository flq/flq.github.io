{
    "componentChunkName": "component---src-templates-article-template-js",
    "path": "/2013/08/19/simple-model-of-a-politician-in-haskell",
    "result": {"data":{"mdx":{"excerpt":"Here is a simple model of a politician in Haskell, which you can use to create arbitrary politician instances.\nYou only need to provide thatâ€¦","body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Simple model of a politician in Haskell\",\n  \"layout\": \"post\",\n  \"tags\": [\"geekdom\", \"humour\", \"haskell\"],\n  \"date\": \"2013-08-19T20:28:57.000Z\",\n  \"redirect_from\": \"/go/229/\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Gist = makeShortcode(\"Gist\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Here is a simple model of a politician in Haskell, which you can use to create arbitrary politician instances.\\nYou only need to provide that particular politician's body of knowledge and its individual mapping between a statement and a corresponding fallacy. The answering is already implemented.\"), mdx(Gist, {\n    id: \"6273665\",\n    file: \"politician.hs\",\n    mdxType: \"Gist\"\n  }), mdx(\"p\", null, \"Please note that the list of fallacies is \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"very\"), \" incomplete and needs expansion. Pull request, anyone? ;)\"));\n}\n;\nMDXContent.isMDXComponent = true;","fields":{"slug":"/2013/08/19/simple-model-of-a-politician-in-haskell"},"frontmatter":{"date":"2013-08-19","path":null,"title":"Simple model of a politician in Haskell","tags":["geekdom","humour","haskell"]}}},"pageContext":{"title":"Simple model of a politician in Haskell","previous":{"fields":{"slug":"/2013/08/13/what-id-have-wished-windows-8-to-be","published":true},"frontmatter":{"title":"What I'd have wished Windows 8 to be","tags":["windows"],"date":"2013/08/13"}},"next":{"fields":{"slug":"/2013/09/17/funspins-a-recap-of-rob-ashtons-lessons-das-intro","published":true},"frontmatter":{"title":"FunSpIns - a recap of Rob Ashton's lessons - Das Intro","tags":["programming","haskell"],"date":"2013/09/17"}}}},
    "staticQueryHashes": ["256249292","2581731408"]}
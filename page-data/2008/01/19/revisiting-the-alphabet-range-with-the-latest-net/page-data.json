{"componentChunkName":"component---src-templates-article-template-js","path":"/2008/01/19/revisiting-the-alphabet-range-with-the-latest-net","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Revisiting the Alphabet Range with the latest .NET\",\n  \"layout\": \"post\",\n  \"tags\": [\"software-development\", \"dotnet\", \"libs-and-frameworks\"],\n  \"date\": \"2008-01-19T22:58:48.000Z\",\n  \"redirect_from\": \"/go/112/\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"While Richard Bushnell was showing off how old problems can be \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"http://richardbushnell.net/index.php/2008/01/18/using-linqpad-to-create-a-time-selector-drop-down-list/\"\n  }, \"implemented very concise with LINQ\"), \" he also made use of an extension method to the int Type.\"), mdx(\"p\", null, \"It has been quite some time since I did an update to the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/go/54\"\n  }, \".NET goodies\"), \". In there there was an implementation to be able to iterate over the letters of the alphabet.\"), mdx(\"p\", null, \"Extension methods and LINQ allow the provision of a concise implementation that can be easily used to obtain character ranges over the alphabet.\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"text\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-text\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-text\"\n  }, \"static class CharStuff\\n{\\n    static char[] content =\\n        new char[] {\\n            'a','b','c','d','e','f','g',\\n            'h','i','j','k','l','m',\\n            'n','o','p','q','r','s',\\n            't','u','v','w','x','y','z'\\n        };\\n\\n    public static char[] To(this char start, char end)\\n    {\\n        char[] space = content;\\n        char[] boundaries = new char[] { start, end };\\n        if (start > end)\\n        {\\n            space = content.Reverse().ToArray();\\n            // start, end = end, start; GRR, why not like in Ruby?\\n            boundaries = boundaries.Reverse().ToArray();\\n        }\\n\\n        var result = from c in space\\n                     where c >= boundaries[0] && c <= boundaries[1]\\n                     select c;\\n        return result.ToArray();\\n    }\\n}\"))), mdx(\"p\", null, \"Most code deals with the ability to get an array with alphabet elements ordered backwards. I.e. you can use this extension like that:\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"text\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-text\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-text\"\n  }, \"Array.ForEach('f'.To('l'), Console.WriteLine);\\nArray.ForEach('l'.To('a'), Console.WriteLine);\"))), mdx(\"p\", null, \"Far from being feature complete, all those examples just show that Microsoft is doing something right: We are writing less lines of code that are more readable in order to get things done.\"));\n}\n;\nMDXContent.isMDXComponent = true;","fields":{"slug":"/2008/01/19/revisiting-the-alphabet-range-with-the-latest-net"},"frontmatter":{"date":"2008-01-19","path":null,"title":"Revisiting the Alphabet Range with the latest .NET","tags":["software-development","dotnet","libs-and-frameworks"]}}},"pageContext":{"title":"Revisiting the Alphabet Range with the latest .NET","previous":{"fields":{"slug":"/2008/01/04/firefox-3-beta-and-your-favourite-extensions","published":true},"frontmatter":{"title":"Firefox 3 Beta and your favourite extensions","tags":["windows","web"],"date":"2008/01/04"}},"next":{"fields":{"slug":"/2008/01/30/the-no-frills-bare-bones-example-to-duplex-wcf","published":true},"frontmatter":{"title":"The no frills, bare-bones example to Duplex WCF","tags":["download","dotnet","libs-and-frameworks"],"date":"2008/01/30"}}}},"staticQueryHashes":["256249292","2581731408"]}
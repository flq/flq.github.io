{"componentChunkName":"component---src-templates-article-template-js","path":"/2008/01/19/revisiting-the-alphabet-range-with-the-latest-net","result":{"data":{"markdownRemark":{"html":"<p>While Richard Bushnell was showing off how old problems can be <a href=\"http://richardbushnell.net/index.php/2008/01/18/using-linqpad-to-create-a-time-selector-drop-down-list/\">implemented very concise with LINQ</a> he also made use of an extension method to the int Type.</p>\n<p>It has been quite some time since I did an update to the <a href=\"/go/54\">.NET goodies</a>. In there there was an implementation to be able to iterate over the letters of the alphabet.</p>\n<p>Extension methods and LINQ allow the provision of a concise implementation that can be easily used to obtain character ranges over the alphabet.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">static class CharStuff\n{\n    static char[] content =\n        new char[] {\n            &#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;,&#39;e&#39;,&#39;f&#39;,&#39;g&#39;,\n            &#39;h&#39;,&#39;i&#39;,&#39;j&#39;,&#39;k&#39;,&#39;l&#39;,&#39;m&#39;,\n            &#39;n&#39;,&#39;o&#39;,&#39;p&#39;,&#39;q&#39;,&#39;r&#39;,&#39;s&#39;,\n            &#39;t&#39;,&#39;u&#39;,&#39;v&#39;,&#39;w&#39;,&#39;x&#39;,&#39;y&#39;,&#39;z&#39;\n        };\n\n    public static char[] To(this char start, char end)\n    {\n        char[] space = content;\n        char[] boundaries = new char[] { start, end };\n        if (start &gt; end)\n        {\n            space = content.Reverse().ToArray();\n            // start, end = end, start; GRR, why not like in Ruby?\n            boundaries = boundaries.Reverse().ToArray();\n        }\n\n        var result = from c in space\n                     where c &gt;= boundaries[0] &amp;&amp; c &lt;= boundaries[1]\n                     select c;\n        return result.ToArray();\n    }\n}</code></pre></div>\n<p>Most code deals with the ability to get an array with alphabet elements ordered backwards. I.e. you can use this extension like that:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Array.ForEach(&#39;f&#39;.To(&#39;l&#39;), Console.WriteLine);\nArray.ForEach(&#39;l&#39;.To(&#39;a&#39;), Console.WriteLine);</code></pre></div>\n<p>Far from being feature complete, all those examples just show that Microsoft is doing something right: We are writing less lines of code that are more readable in order to get things done.</p>","fields":{"slug":"/2008/01/19/revisiting-the-alphabet-range-with-the-latest-net"},"frontmatter":{"date":"January 19, 2008","path":null,"title":"Revisiting the Alphabet Range with the latest .NET","tags":["software-development","dotnet","libs-and-frameworks"]}}},"pageContext":{"title":"Revisiting the Alphabet Range with the latest .NET","previous":{"fields":{"slug":"/2008/01/04/firefox-3-beta-and-your-favourite-extensions","published":true},"frontmatter":{"title":"Firefox 3 Beta and your favourite extensions","tags":["windows","web"],"date":"2008/01/04"}},"next":{"fields":{"slug":"/2008/01/30/the-no-frills-bare-bones-example-to-duplex-wcf","published":true},"frontmatter":{"title":"The no frills, bare-bones example to Duplex WCF","tags":["download","dotnet","libs-and-frameworks"],"date":"2008/01/30"}}}}}
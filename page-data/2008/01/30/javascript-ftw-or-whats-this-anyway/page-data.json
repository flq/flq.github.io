{"componentChunkName":"component---src-templates-article-template-js","path":"/2008/01/30/javascript-ftw-or-whats-this-anyway","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Javascript FTW or what's 'this' anyway?\",\n  \"layout\": \"post\",\n  \"tags\": [\"software-development\", \"javascript\"],\n  \"date\": \"2008-01-30T20:48:39.000Z\",\n  \"redirect_from\": \"/go/114/\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"It has been itching for a while now. I may love .NET, but every once in a while I need to escape into something else. Primordial soups of programming, dynamic chaos...well, ok, I am exaggerating, I wasn't doing \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"http://www.madore.org/~david/programs/unlambda/\"\n  }, \"unlambda\"), \", just javascript.\"), mdx(\"p\", null, \"Arguably, javascript may be the most abused language out there, with millions of unknowing folks falling over it and torturing it until...\"), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"/assets/unresponsive.jpg\",\n    \"alt\": null\n  })), mdx(\"p\", null, \"Sometimes people are also quite brutal. They teach him \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"http://www.asp.net/ajax/documentation/live/tutorials/EnhancingJavaScriptTutorial.aspx\"\n  }, \"all sorts of tricks\"), \" like interfaces, namespaces, private and public members...Probably quite useful and all but for many applications outrageously complicated.\"), mdx(\"p\", null, \"You know, javascript is a bit like a grandfather. He plays with your grandchildren, and they're having fun and all, but he's actually a kind, intelligent and cunning person, too, with whom you can have excellent and deep conversations. Provided you use a \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"http://jquery.com/\"\n  }, \"nice framework\"), \" that does not get in the way and you realize that Javascript is the poor man's functional programming language of choice, you're off writing cool stuff in few lines of code.\"), mdx(\"p\", null, \"Let me talk through the example with which I satisfied my longing for some functional mayhem. \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/assets/ValidationTest.htm\"\n  }, \"You can have a look at it here\"), \". It is basically a nano-framework,quite incomplete, to express client-side validation of HTML form fields in a very unobtrusive fashion.\"), mdx(\"p\", null, \"What is this unobtrusive java scripting anyway? It all boils down to separation of concerns again. The HTML structures your document, much like xml. Interspersing it with funny javascript calls (like onclick=\\\"dofunkyStuff(1, '23')\\\") is not necessarily your friend when it comes down to maintaining your page. Meanwhile most people seem to have grasped the idea of separating structure and styling with the aid of CSS. While in HTML you still tend to have a reference to your CSS, you can inject your programmable logic without any notion of javascript in your HTML code.\"), mdx(\"p\", null, \"The idea is simple. I add some metadata to the HTML which I can find once the DOM is fully setup on the client-side.\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"text\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-text\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-text\"\n  }, \"<input type=\\\"text\\\" validation=\\\"numeric\\\" >\\n<input type=\\\"text\\\" validation=\\\"/cool/i\\\" >\"))), mdx(\"p\", null, \"The validation attribute is not part of the known HTML attributes, but it is part of the DOM accessible by javascript. I am not sure how people's opinion is on doing this sort of thing, but from a functional perspective it works pretty well. If you feel this is slightly hackish you could write your document as XHTML, add a new XML-namespace and use elements of that namespace in your document:\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"text\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-text\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-text\"\n  }, \"<html xmlns=\\\"http://www.w3.org/1999/xhtml\\\" xmlns:rf=\\\"http://rf.scripting/validation\\\">\\n...\\n<rf:validation type=\\\"numeric\\\">\\n  <input type=\\\"text\\\" />\\n</rf:validation>\"))), mdx(\"p\", null, \"Since all javascript that would be hacked right into HTML reacts to events probably triggered by the page's user, I may as well attach the event handlers after the DOM has loaded and before the user interacts with it. The jQuery library allows us to do the outlined things quite easily. jQuery provides the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"ready\"), \" function to which you can pass a function that is called at the right moment. This is a perfect hook to attach your javascript in said unobtrusive fashion:\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"text\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-text\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-text\"\n  }, \"validator = new Validation(errorFeedback,passFeedback);\\n$(document).ready(validator.setup);\"))), mdx(\"p\", null, \"validator is the \\\"instance\\\" of the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Validation\"), \" function which we'll look at later. Its constructor would like two arguments: functions that will be called either when an input field passes validation or when it fails. Here we also have separation of concerns: The validation system has nothing to do with the display of possible validation failures, so we provide it with the means to display or remove visual cues about the error. In this example, these are the functions:\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"text\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-text\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-text\"\n  }, \"function errorFeedback(element,msg) {\\n\\t$(element).removeClass(\\\"ok\\\").addClass(\\\"error\\\").attr(\\\"title\\\",msg);\\n}\\n\\nfunction passFeedback(element) {\\n\\t$(element).removeClass(\\\"error\\\").addClass(\\\"ok\\\").removeAttr(\\\"title\\\");\\n}\"))), mdx(\"p\", null, \"Here, jQuery helps to streamline the necessary DOM modifications to display/clear an error.\"), mdx(\"p\", null, \"Back to the validator. We passed something called setup to the ready function. Let us have a look:\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"text\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-text\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-text\"\n  }, \"function Validation(errorStyler,passStyler) {\\n\\n  validationFeedBack.errorFeedbackFunc = errorStyler;\\n  validationFeedBack.passFeedbackFunc = passStyler;\\n\\n  this.setup = function() {\\n    $(\\\"input[type='text'][validation]\\\").each(function(idx) {\\n      $(this).blur(\\n        new Validation.validatorCallBack(Validation.returnValidator(this))\\n      );\\n    });\\n  }\\n}\"))), mdx(\"p\", null, \"One can see that setup is a function itself. As it does not really refer to its outside scope (seeing that \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"setup _is an inner function of _validation\"), \") it could be outside. In fact, setup cannot easily refer to this scope because the \\\"this\\\" keyword will refer to an altogether different scope once things get actually called.\"), mdx(\"p\", null, \"So what \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"setup\"), \" does is to iterate over all input fields with a validation attribute and attach to the \", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"onblur\"), \" event of every such element a function. It will be called in the context of an input field once it gets blurred. Inside the each-block \\\"this\\\" refers to said element (jQuery ensures that).\"), mdx(\"p\", null, \"We know that \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"blur\"), \" necessitates a function, let's then look at what is called in turn. First the \", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"returnValidator\"), \"-call:\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"text\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-text\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-text\"\n  }, \"Validation.returnValidator = function(inspectedElement) {\\n  var identifier = $(inspectedElement).attr(\\\"validation\\\")\\n  if (identifier == 'numeric')\\n    return Validation.numericValidator;\\n  else if (identifier.substr(0,1) == '/')\\n    return Validation.regexValidator;\\n  else\\n    return Validation.nullCallback;\\n}\"))), mdx(\"p\", null, \"Here we have a hard-coded interpretation of what is contained in the validation attribute of the inspected input field. One could think of some approach using eval, but even though I'm no expert in hacking into a javascript application it sounds to me like this would be open to abuse by using some tool in your browser to change the contents of the attribute to whatever you like. The \", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"returnValidator\"), \" therefore returns functions. They fit to the desired type of validation. Here are those implemented in the example:\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"text\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-text\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-text\"\n  }, \"Validation.numericValidator = function(inputElement) {\\n  if (isNaN(inputElement.value))\\n    throw \\\"Input is not a number\\\";\\n}\\n\\nValidation.regexValidator = function(inputElement){\\n  var regexstring = $(inputElement).attr(\\\"validation\\\");\\n  var re = eval(regexstring);\\n  if (!re.test(inputElement.value))\\n    throw \\\"Field failed to match pattern \\\" + regexstring;\\n}\\n\\nValidation.nullCallback = function(inputElement) {\\n  // Unrecognized validation\\n}\"))), mdx(\"p\", null, \"The setup implementation now obtained a validation function, but it does some more. It wraps it into a call to   \", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"Validation.validatorCallBack\"), \", whose implementation looks like this:\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"text\"\n  }, mdx(\"pre\", {\n    parentName: \"div\",\n    \"className\": \"language-text\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-text\"\n  }, \"Validation.validatorCallBack = function(validatorFunc) {\\n  var valFunc = validatorFunc;\\n\\n  return function(eventObj){\\n    try {\\n      valFunc(this);\\n      validationFeedBack.passFeedbackFunc(this);\\n    }\\n    catch (x) {\\n      validationFeedBack.errorFeedbackFunc(this,x);\\n    }\\n  }\\n}\"))), mdx(\"p\", null, \"Here I make use of a closure. We return once more a function that is defined in the scope of an outer function. Once that inner function is called (when the input field blurs) it will be able to refer to values defined in said scope. That way we can actually remember the validation function and call it once the \", mdx(\"code\", {\n    parentName: \"p\",\n    \"className\": \"language-text\"\n  }, \"validatorCallback\"), \" return function is called. If you think I've written the word function too much, don't worry, it'll probably pass after a while.\"), mdx(\"p\", null, \"I would not deem myself an expert in javascript - even so I hope you get the feeling that javascript works nicely with functions and the notion of closures and that writing unobtrusive javascript is actually quite fun.\"));\n}\n;\nMDXContent.isMDXComponent = true;","fields":{"slug":"/2008/01/30/javascript-ftw-or-whats-this-anyway"},"frontmatter":{"date":"January 30, 2008","path":null,"title":"Javascript FTW or what's 'this' anyway?","tags":["software-development","javascript"]}}},"pageContext":{"title":"Javascript FTW or what's 'this' anyway?","previous":{"fields":{"slug":"/2008/01/30/the-no-frills-bare-bones-example-to-duplex-wcf","published":true},"frontmatter":{"title":"The no frills, bare-bones example to Duplex WCF","tags":["download","dotnet","libs-and-frameworks"],"date":"2008/01/30"}},"next":{"fields":{"slug":"/2008/02/25/evolutions-intelligence","published":true},"frontmatter":{"title":"Evolution's intelligence","tags":["hesitan-and-miracles","biology"],"date":"2008/02/25"}}}},"staticQueryHashes":["256249292","2581731408","3764592887"]}
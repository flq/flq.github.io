{"componentChunkName":"component---src-templates-article-template-js","path":"/2008/01/30/the-no-frills-bare-bones-example-to-duplex-wcf","result":{"data":{"markdownRemark":{"html":"<p>Can a WCF client call a WCF service and have the server call back with whatever? Oh, yes. Can you get an example how it's done? Indeed.</p>\n<p>Are these good examples? Well, you can get <a href=\"http://www.microsoft.com/downloads/thankyou.aspx?familyId=2611a6ff-fd2d-4f5b-a672-c002f1c09ccd&#x26;displayLang=en\">MS samples for WCF</a> (which in their entirety are really helpful) or <a href=\"http://dotnetaddict.dotnetdevelopersjournal.com/wcf_alarmclock.htm\">another blog post</a> on the subject. Don't get me wrong, they work, but in my humble opinion they have shortcomings.</p>\n<ul>\n<li>They have funny classes and interfaces generated by svcutil with some really horrid artefacts  </li>\n<li>The interfaces are not shared among client &#x26; server which annoys my desire for harmony and DRYness, which should be followed even in an example (or, maybe, especially in an example). </li>\n</ul>\n<p>Anyway, here's my version, which is quite reduced to just the duplex stuff.</p>\n<h2>Common bits</h2>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">ServiceContract</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span>Namespace <span class=\"token operator\">=</span> <span class=\"token string\">\"rf.services\"</span><span class=\"token punctuation\">,</span> \n     CallbackContract <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">IDataOutputCallback</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> \n     SessionMode <span class=\"token operator\">=</span> SessionMode<span class=\"token punctuation\">.</span>Required<span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">IServerWithCallback</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">OperationContract</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span>IsOneWay<span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n        <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">StartDataOutput</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>That's the Server interface which the client will use to talk to the server. Please note the _CallBackContract _property of the _ServiceContract _attribute. That's the interface that will have to be implemented by the client. The server will use it to call back.</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">IDataOutputCallback</span> <span class=\"token punctuation\">{</span> \n  <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">OperationContract</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span>IsOneWay <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span> \n  <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">SendDataPacket</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>All this <em>IsOneWay</em> business is one way to avoid issues when you're calling back a client within the method that is being called by the client. The issues are described <a href=\"http://www.codeproject.com/KB/WCF/WCF_Duplex_UI_Threads.aspx\">here</a>.</p>\n<h2>Server</h2>\n<p>Of course we need an implementation of the service (d'oh): </p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ServerWCallbackImpl</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">IServerWithCallback</span></span> <span class=\"token punctuation\">{</span> \n  \n  <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">StartDataOutput</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n    <span class=\"token class-name\">IDataOutputCallback</span> callback <span class=\"token operator\">=</span> OperationContext<span class=\"token punctuation\">.</span>Current<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">GetCallbackChannel</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>IDataOutputCallback<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n      <span class=\"token class-name\">Random</span> r <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n      <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> interval <span class=\"token operator\">=</span> r<span class=\"token punctuation\">.</span><span class=\"token function\">Next</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">,</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n      System<span class=\"token punctuation\">.</span>Threading<span class=\"token punctuation\">.</span>Thread<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span>interval<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n      callback<span class=\"token punctuation\">.</span><span class=\"token function\">SendDataPacket</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Packet \"</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token punctuation\">}</span> \n    callback<span class=\"token punctuation\">.</span><span class=\"token function\">SendDataPacket</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Last packet is this one :)\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n  <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The important line is the very first one. The rest is just a crappy example to get some funny callback side-effects. Next we have the configuration of the thing...</p>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>system.serviceModel</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>services</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>service</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>ServerPart.ServerWCallbackImpl<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>endpoint</span> <span class=\"token attr-name\">address</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>net.tcp://localhost:9080/DataService<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">binding</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>netTcpBinding<span class=\"token punctuation\">\"</span></span>\n              <span class=\"token attr-name\">bindingConfiguration</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>DataEndpoint<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">contract</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>CommonParts.IServerWithCallback<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>service</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>services</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>system.serviceModel</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>And some boilerplate to get it running e.g. in a command-line:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\">ServiceHost</span> svc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ServiceHost</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">ServerWCallbackImpl</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \nsvc<span class=\"token punctuation\">.</span><span class=\"token function\">Open</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Listening according to configuration\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">ReadKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </code></pre></div>\n<p>If you want to save yourself the configuration etry in the app.config file, you can also set up the ServiceHost programmatically:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\">ServiceHost</span> duplex <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ServiceHost</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">ServerWCallbackImpl</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \nduplex<span class=\"token punctuation\">.</span><span class=\"token function\">AddServiceEndpoint</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">IServerWithCallback</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">NetTcpBinding</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"net.tcp://localhost:9080/DataService\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \nduplex<span class=\"token punctuation\">.</span><span class=\"token function\">Open</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Client</h2>\n<p>Want to call the server? Well, first you could go and configure it:</p>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>system.serviceModel</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>client</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>endpoint</span> <span class=\"token attr-name\">address</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>net.tcp://localhost:9080/DataService<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">binding</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>netTcpBinding<span class=\"token punctuation\">\"</span></span>\n            <span class=\"token attr-name\">bindingConfiguration</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">contract</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>CommonParts.IServerWithCallback<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Callback<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>endpoint</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>client</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>system.serviceModel</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Then it'll make sense to provide an implementation of the Callback interface:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">CallbackImpl</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">IDataOutputCallback</span></span> <span class=\"token punctuation\">{</span> \n\n  <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">SendDataPacket</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> #endregion \n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Brill! Finally the boilerplate to kickstart the thing:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\">DuplexChannelFactory<span class=\"token punctuation\">&lt;</span>IServerWithCallback<span class=\"token punctuation\">></span></span> cf <span class=\"token operator\">=</span> \n  <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">DuplexChannelFactory<span class=\"token punctuation\">&lt;</span>IServerWithCallback<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">CallbackImpl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Callback\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token class-name\">IServerWithCallback</span> srv <span class=\"token operator\">=</span> cf<span class=\"token punctuation\">.</span><span class=\"token function\">CreateChannel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \nsrv<span class=\"token punctuation\">.</span><span class=\"token function\">StartDataOutput</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </code></pre></div>\n<p>Again, if you prefer working without a configuration entry, you can set this up programmatically, too:</p>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\">DuplexChannelFactory<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>IServerWithCallback</span><span class=\"token punctuation\">></span></span> cf = \n  new DuplexChannelFactory<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>IServerWithCallback</span><span class=\"token punctuation\">></span></span>(\n  new CallbackImpl(), \n  new NetTcpBinding(), \n  new EndpointAddress(\"net.tcp://localhost:9080/DataService\"));</code></pre></div>\n<p>That's it, you shouldn't need more, honest, dude. No generated class in sight, all interfaces are the same throughout Client and Server. Distribute over projects/threads/app domains at your leisure and enjoy.</p>\n<p><strong>Update</strong>: <a href=\"/assets/RF.WCF.Callback.zip\">Here is a small vs2008 solution</a> that shows the programmatic setup of this blog post.</p>","fields":{"slug":"/2008/01/30/the-no-frills-bare-bones-example-to-duplex-wcf"},"frontmatter":{"date":"January 30, 2008","path":null,"title":"The no frills, bare-bones example to Duplex WCF","tags":["download","dotnet","libs-and-frameworks"]}}},"pageContext":{"title":"The no frills, bare-bones example to Duplex WCF","previous":{"fields":{"slug":"/2008/01/19/revisiting-the-alphabet-range-with-the-latest-net","published":true},"frontmatter":{"title":"Revisiting the Alphabet Range with the latest .NET","tags":["software-development","dotnet","libs-and-frameworks"],"date":"2008/01/19"}},"next":{"fields":{"slug":"/2008/01/30/javascript-ftw-or-whats-this-anyway","published":true},"frontmatter":{"title":"Javascript FTW or what's 'this' anyway?","tags":["software-development","javascript"],"date":"2008/01/30"}}}}}
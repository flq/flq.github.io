{"componentChunkName":"component---src-templates-article-template-js","path":"/2008/05/22/some-more-on-the-implicit-operator","result":{"data":{"markdownRemark":{"html":"<p>Elaborating on my <a href=\"/go/104\">past post</a> on the implicit operator in C#, here some additional information to round this thing up.</p>\n<ul>\n<li>Can you inherit the implicit operator(s)? </li>\n</ul>\n<p> No, you cannot. Within a type you could write as many implicit operator implementations as you like, but any of the two types referenced must be the enclosing type. The compiler will tell you that:\n<code class=\"language-text\">error CS0556: User-defined conversion must convert to or from the enclosing type</code>  </p>\n<p>As an example:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Foo</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> Value <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">implicit</span> <span class=\"token keyword\">operator</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Foo</span> theFoo<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> theFoo<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">implicit</span> <span class=\"token keyword\">operator</span> <span class=\"token function\">Foo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> theValue<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> Value <span class=\"token operator\">=</span> theValue <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Bar</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">Foo</span></span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The type \"Bar\" cannot do anything with the operators defined on \"Foo\", hence you cannot write</p>\n<p><code class=\"language-text\">Bar b = &quot;hi&quot;;</code></p>\n<p>What compiles is this:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\">Bar</span> b <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Bar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>Foo<span class=\"token punctuation\">)</span><span class=\"token string\">\"hi\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>But, as you might have guessed, you will get a runtime error. A \"Foo\" instance cannot be cast to\na \"Bar\" instance.</p>\n<ul>\n<li>Any chance to do that with generics?</li>\n</ul>\n<p>This contrived example will not work either:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Implicitable<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">,</span> V<span class=\"token punctuation\">></span></span> <span class=\"token keyword\">where</span> <span class=\"token class-name\">V</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">Implicitable<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">,</span>V<span class=\"token punctuation\">></span></span></span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token return-type class-name\">T</span> Value <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">implicit</span> <span class=\"token keyword\">operator</span> <span class=\"token function\">T</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">V</span> theImplicitable<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> theImplicitable<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>same error.</p>\n<p>A different restriction with its own error is when you would try this:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">  <span class=\"token keyword\">class</span> <span class=\"token class-name\">Bar</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">Foo</span></span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">implicit</span> <span class=\"token keyword\">operator</span> <span class=\"token function\">Foo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Bar</span> theValue<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> Value <span class=\"token operator\">=</span> theValue <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\">error</span> CS0553<span class=\"token punctuation\">:</span> '<span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span>'<span class=\"token punctuation\">:</span> user<span class=\"token operator\">-</span>defined conversions to or <span class=\"token keyword\">from</span> a <span class=\"token keyword\">base</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">are</span> not allowed</code></pre></div>\n<p>Which makes sense after all, as it kind of leads polymorphism ad absurdum.</p>\n<p>Lately I have come across a pattern where it appears useful to me to provide implicit operators.\nIt is the case for generic utility classes that enhance a given type in a sort of decorator style.\nYou can find an example here with the <a href=\"https://realfiction.net/2008/04/29/singletons-are-boring-hence-factor-out-the-concern\">SingletonOf&#x3C;T></a>. Further examples are</p>\n<ul>\n<li>Monitored<T> : It provides a decorator around a value of type T that, when changed through a property raises a ValueChanged event.</li>\n<li>Historized&#x3C;T&#x26;> : It provides a decorator around a value of type T that keeps track in a Dictionary with timestamp when the value is changed and could be rolled back to some point in time.</li>\n</ul>\n<p>All of those provide this pattern:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Utility<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token return-type class-name\">T</span> Value <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">implicit</span> <span class=\"token keyword\">operator</span> <span class=\"token function\">T</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Utility<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">></span></span> u<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> u<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">implicit</span> <span class=\"token keyword\">operator</span> <span class=\"token generic-method\"><span class=\"token function\">Utility</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> theValue<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Utility<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> Value <span class=\"token operator\">=</span> theValue <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The boilerplate enables a simple instantiation like Utility&#x3C;int> i = 3; as well as enables the Utility\nto behave pretty much like the type it decorates, e.g. z = i + 5;\nHowever, that is at far as it goes. To actually enable their additional behaviour you will have to keep\nthe reference alive:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\">Utility<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">></span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\ni <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//bad</span>\ni<span class=\"token punctuation\">.</span>Value <span class=\"token operator\">=</span> <span class=\"token number\">7</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// good</span></code></pre></div>\n<p>That's it for now. Next time, the explicit operator :)</p>","fields":{"slug":"/2008/05/22/some-more-on-the-implicit-operator"},"frontmatter":{"date":"May 22, 2008","path":null,"title":"Some more on the implicit operator","tags":["software-development","dotnet"]}}},"pageContext":{"title":"Some more on the implicit operator","previous":{"fields":{"slug":"/2008/05/20/a-simple-way-to-start-your-code-in-a-different-appdomain","published":true},"frontmatter":{"title":"A simple way to start your code in a different AppDomain","tags":["software-development","dotnet"],"date":"2008/05/20"}},"next":{"fields":{"slug":"/2008/06/16/wpf-inotifypropertychanged-proxy-success","published":true},"frontmatter":{"title":"WPF + INotifyPropertyChanged Proxy = success!","tags":["dotnet","libs-and-frameworks"],"date":"2008/06/16"}}}}}
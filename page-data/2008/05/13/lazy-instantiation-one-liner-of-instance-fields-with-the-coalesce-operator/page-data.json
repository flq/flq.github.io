{"componentChunkName":"component---src-templates-article-template-js","path":"/2008/05/13/lazy-instantiation-one-liner-of-instance-fields-with-the-coalesce-operator","result":{"data":{"markdownRemark":{"html":"<p>It is hardly worth blogging, but...</p>\n<p>Did you know that the return value of an assignment is the assignment? i.e.</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> Name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span>\n<span class=\"token class-name\">Person</span> p<span class=\"token punctuation\">;</span>\nConsole<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>And did you know there is a coalesce operator since .NET 2.0 that will return the left-hand side if not null, or the right-hand side if the left-hand is null?</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">a <span class=\"token operator\">??</span> b<span class=\"token punctuation\">;</span></code></pre></div>\n<p>If you combine these information snippets you get the modern one-liner for lazy instantiation of instance fields:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\">Person</span> p<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Person</span> Example <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">get</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> p <span class=\"token operator\">??</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","fields":{"slug":"/2008/05/13/lazy-instantiation-one-liner-of-instance-fields-with-the-coalesce-operator"},"frontmatter":{"date":"May 13, 2008","path":null,"title":"Lazy instantiation one-liner of instance fields with the coalesce operator","tags":["software-development","dotnet"]}}},"pageContext":{"title":"Lazy instantiation one-liner of instance fields with the coalesce operator","previous":{"fields":{"slug":"/2008/05/08/wpf-inotifypropertychanged-proxy-epic-fail","published":true},"frontmatter":{"title":"WPF + INotifyPropertyChanged Proxy = Epic Fail!","tags":["download","dotnet","libs-and-frameworks","WPF"],"date":"2008/05/08"}},"next":{"fields":{"slug":"/2008/05/20/a-simple-way-to-start-your-code-in-a-different-appdomain","published":true},"frontmatter":{"title":"A simple way to start your code in a different AppDomain","tags":["software-development","dotnet"],"date":"2008/05/20"}}}}}
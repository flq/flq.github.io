{"componentChunkName":"component---src-templates-article-template-js","path":"/2014/02/22/fixie-and-resharper-smooth-sailing-on-the-agenda","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"fixie and resharper, smooth sailing on the Agenda.\",\n  \"tags\": [\"dotnet\", \"programming\"],\n  \"date\": \"2014-02-22T20:56:26.000Z\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component '\" + name + \"' was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"I was willing to have a play with \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/plioi/fixie\"\n  }), \"fixie\"), \", a new test runner, but was unimpressed by the situation of how to get fixie tests run in resharper. Yesterday, I tried the internet again:\\n\", mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"http://i.imgur.com/B2QG8OH.png\",\n    \"alt\": \"search on fixie\"\n  }))), mdx(\"p\", null, \"Right, a \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/JohnStov/ReSharperFixieRunner\"\n  }), \"fixie runner\"), \"!\"), mdx(\"p\", null, \"The readme shows a short and concise way to bring the plugin into resharper by adding a new nuget feed to the resharper extension sources (\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Resharper -> Options & Extension Manager...\"), \"). Once you want to install that extension, make sure you \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"read the readme\"), \" (which I didn't, so I missed that the extension is a pre-release package and you have to make sure that you see it).\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"http://i.imgur.com/xirBRSA.png\",\n    \"alt\": \"options\"\n  })), \" \", mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"http://i.imgur.com/aj47Mi2.png\",\n    \"alt\": \"extension manager\"\n  }))), mdx(\"p\", null, \"Fixie is then available as a Nuget package, too, which you install into your test project. You will also need an assertion library, I took \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://shouldly.github.io/\"\n  }), \"Shouldly\"), \" (\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"which btw plays it neat in the message output, don't understand how it does it yet\"), \").\"), mdx(\"p\", null, \"At first I didn't see any tests appearing in the Resharper's Unit Test explorer, this was remedied by right-clicking the project file and saying \\\"\", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Run Unit Tests\"), \"\\\" - lo and behold, fixie tests were running happily and I haven't looked back since on this project.\"), mdx(\"p\", null, \"Your own testing conventions also get honored by the test runner. Here, it is sufficient to put a class into your test project that derives from \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Convention\"), \" (or, indeed \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"DefaultConvention\"), \"). I used that to have a convention on how to feed input parameters to a test method...\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"text\"\n  }, mdx(\"pre\", _extends({\n    parentName: \"div\"\n  }, {\n    \"className\": \"language-text\"\n  }), mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"public void Distance_Correctly_Calculated(Note note1, Note note2, int distance)\\n{\\n    (note1 - note2).ShouldBe(distance);\\n}\\n\\npublic static IEnumerable<object[]> Note1Note2DistanceSource()\\n{\\n    Func<Note,Note,int,object[]> f = (note, note1, arg3) => new object[] { note, note1, arg3 };\\n    yield return f(new Note(\\\"C\\\"), new Note(\\\"D\\\"), 1);\\n    yield return f(new Note(\\\"C\\\"), new Note(\\\"H\\\"), 6);\\n}\"))), mdx(\"p\", null, \"This also gets correctly executed with the kind of output you'd expect...\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"http://i.imgur.com/vxW3W4s.png\",\n    \"alt\": \"test runner display\"\n  }))), mdx(\"p\", null, \"Consider me a happy camper!\"));\n}\n;\nMDXContent.isMDXComponent = true;","fields":{"slug":"/2014/02/22/fixie-and-resharper-smooth-sailing-on-the-agenda"},"frontmatter":{"date":"February 22, 2014","path":null,"title":"fixie and resharper, smooth sailing on the Agenda.","tags":["dotnet","programming"]}}},"pageContext":{"title":"fixie and resharper, smooth sailing on the Agenda.","previous":{"fields":{"slug":"/2013/12/27/get-periodic-messages-into-membus","published":true},"frontmatter":{"title":"Get periodic messages into MemBus","tags":["own-software","membus"],"date":"2013/12/27"}},"next":{"fields":{"slug":"/2014/10/15/the-one-where-all-the-stuff-is-put-on-github","published":true},"frontmatter":{"title":"The one where all the stuff is put on github","tags":["meta"],"date":"2014/10/15"}}}}}
{"data":{"markdownRemark":{"html":"<p>Here is a situation I came across recently - Some part of the system specified a qualified \"link\" to a page with the following type:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> PageType <span class=\"token operator\">=</span> <span class=\"token string\">\"Awesome\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"Basic\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Qualified</span> <span class=\"token punctuation\">{</span>\n    pageType<span class=\"token punctuation\">:</span> PageType<span class=\"token punctuation\">;</span>\n    id<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Somewhere else it looked like that:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Qualified</span> <span class=\"token punctuation\">{</span>\n    pageType<span class=\"token punctuation\">:</span> PageType<span class=\"token punctuation\">;</span>\n    pageId<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>I wanted some other part to be handle to handle both shapes - a use case you'll come across quite a few times in javascript. </p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// Like this?</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Qualified</span> <span class=\"token punctuation\">{</span>\n    pageType<span class=\"token punctuation\">:</span> PageType<span class=\"token punctuation\">;</span>\n    pageId<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    id<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Examples are configuration objects, or intermediate releases to deprecate a previous \"shape\", etc. Now, Typescript's type system's primary objective seems to be to allow idiomatic javascript to be verified statically, so I googled around to see if somebody figured out a type to express the following:</p>\n<blockquote>\n<p>Given some type with n properties and z optional properties, I want a type that expresses that someone must specifiy at least one of the optional properties</p>\n</blockquote>\n<p>What I found was <a href=\"https://stackoverflow.com/a/49725198/51428\">this wonderful answer</a> at Stackoverflow. The type that does as specified has the following form:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> RequireOnlyOne<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> Keys <span class=\"token keyword\">extends</span> <span class=\"token class-name\">keyof</span> <span class=\"token constant\">T</span> <span class=\"token operator\">=</span> keyof <span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span>\n    Pick<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> Exclude<span class=\"token operator\">&lt;</span>keyof <span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> Keys<span class=\"token operator\">>></span>\n    <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token punctuation\">[</span><span class=\"token constant\">K</span> <span class=\"token keyword\">in</span> Keys<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token operator\">?</span><span class=\"token punctuation\">:</span>\n            Required<span class=\"token operator\">&lt;</span>Pick<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">K</span><span class=\"token operator\">>></span>\n            <span class=\"token operator\">&amp;</span> Partial<span class=\"token operator\">&lt;</span>Record<span class=\"token operator\">&lt;</span>Exclude<span class=\"token operator\">&lt;</span>Keys<span class=\"token punctuation\">,</span> <span class=\"token constant\">K</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> undefined<span class=\"token operator\">>></span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">[</span>Keys<span class=\"token punctuation\">]</span></code></pre></div>\n<p>and in the above example you use it as such:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> PageHandle <span class=\"token operator\">=</span> RequireOnlyOne<span class=\"token operator\">&lt;</span>Qualified<span class=\"token punctuation\">,</span> <span class=\"token string\">\"id\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"pageId\"</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The SO answer in fact fully plays through an example, but before delving in there you should know all of the in-built types and syntax in use.</p>\n<h4>Exclude</h4>\n<p>Taken <a href=\"https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-8.html\">straight from the release notes</a>:</p>\n<blockquote>\n<p>Exclude&#x3C;T, U> â€“ Exclude from T those types that are assignable to U</p>\n</blockquote>\n<p>Used on the <strong>Keys</strong> of a type, it has the following effect:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token constant\">X</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> foo<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> bar<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token constant\">Y</span> <span class=\"token operator\">=</span> Exclude<span class=\"token operator\">&lt;</span>keyof <span class=\"token constant\">X</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"foo\"</span><span class=\"token operator\">></span>\n<span class=\"token comment\">// Y is now \"bar\";</span></code></pre></div>\n<h4>Pick with Exclude</h4>\n<p>We also find within the same release notes the following statement</p>\n<blockquote>\n<p>We did not include the Omit&#x3C;T, K> type because it is trivially written as Pick&#x3C;T, Exclude&#x3C;keyof T, K>>.</p>\n</blockquote>\n<p>The idea of an <code class=\"language-text\">Omit</code> type is to \"subtract\" the specified properties from some parent type:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> Omit<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">K</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">keyof</span> <span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> Pick<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> Exclude<span class=\"token operator\">&lt;</span>keyof <span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">K</span><span class=\"token operator\">>></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token constant\">X</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> foo<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> bar<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token constant\">Y</span> <span class=\"token operator\">=</span> Omit<span class=\"token operator\">&lt;</span><span class=\"token constant\">X</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"bar\"</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Y is now { foo: string }</span></code></pre></div>\n<p>Incidentally this is the first part of the <code class=\"language-text\">RequireOnlyOne</code> type, giving us the part of the type which we want to be specified in any case.</p>\n<h4>Advanced types</h4>\n<p>The following two types are covered in the \"Advanced Types\" section of [the documentation][3].</p>\n<p>The <strong>record</strong> type allows types with n properties where all of the properties are of some specified type:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token constant\">Z</span> <span class=\"token operator\">=</span> Record<span class=\"token operator\">&lt;</span><span class=\"token string\">\"one\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"two\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"three\"</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">string</span><span class=\"token operator\">></span>\n<span class=\"token comment\">// Z is now { one:string; two:string; three:string; }</span></code></pre></div>\n<h4>Partial</h4>\n<p>[3]: </p>","fields":{"slug":"/2019/02/03/typescript-type-shenanigans-2-specify-at-least-one-property"},"frontmatter":{"date":"February 03, 2019","path":null,"title":"Typescript type shenanigans 2: specify at least one property","tags":["web","typescript"]}}},"pageContext":{"title":"Typescript type shenanigans 2: specify at least one property","previous":{"fields":{"slug":"/2019/01/27/im-a-chrome-using-frontend-dev-but-want-to-use-firefox-more"},"frontmatter":{"title":"I'm a Chrome-using frontend dev, but want to use Firefox more","tags":["web","programming"],"date":"2019/01/27"}},"next":null}}
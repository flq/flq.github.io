{"data":{"markdownRemark":{"html":"<p>After last week’s <a href=\"http://www.buildwindows.com/\">//BUILD</a> conference we have learned (amongst other things) of a new class of apps that are touch-centric and use a new .NET Framework profile in order to be run on top of the new Windows Runtime. A nice way to learn about what is different in this new stack is to port some existing code. Membus is a nice contender since I know the codebase(o rly?), it has a fair number of unit and integration tests, it is (apart from some tests) unaware of UI stuff, but I use it extensively in WPF UI Apps, so let’s move in.</p>\n<p>I installed git on my new, um, <a href=\"http://www.waleg.com/techgadgets/archives/024320.html\">PC</a> to download the current version of Membus. First thing to note is that you can’t just open class library projects like that, you will need the correct project type. What I did is add a new sln file “Membus.Metro” that points to new csproj files “Membus.Metro” and “Membus.Metro.Tests” (from the “Unit Test” template). I then added all relevant files to the projects and compiled. Note that I am not touching the test project yet as it uses NUnit. Here’s a rundown of the issues I encountered</p>\n<h4>Some minor changes</h4>\n<ul>\n<li>The interface <strong><em>ICloneable</em></strong> just disappeared. Not a big deal for this codebase.</li>\n<li>The <strong><em>Serializable</em></strong> attribute is gone. Interesting – I don’t know for now if it just moved or what that means, but I do imagine that this has implications for other code bases.</li>\n<li>The class <strong><em>List&#x3C;T></em></strong> does not have a “ForEach” method anymore. The correct thing to do here is to use the <strong><em>Each</em></strong> extension method from System.Linq (fi-na-lly!) </li>\n</ul>\n<h4>Reflection changed more than moving mirrors around</h4>\n<p>The reflection API has changed considerably. Let’s face it, it’s a bit of a mess anyway, hence there was scope for improvement. Since Membus uses some reflection, a number of classes were affected. The one major change is that the <strong><em>Type</em></strong>-class has been streamlined to just a few essential features – reflection info like members, interfaces and the like are accessed by using the <strong><em>GetTypeInfo</em></strong> extension method that works e.g. on Types. It returns a TypeInfo instance that allows access to the information one usually needs when reflecting. MemberInfos, interfaces etc. are now returned as <strong><em>IEnumerable&#x3C;T></em></strong>  and things have in general been cleaned up.</p>\n<p>Membus already had a <strong><em>ReflectionExtensions</em></strong> static class which has been expanded to simplify access for other parts of the codebase. Other things could be deleted, e.g. there are now extension method like GetAttribute&#x3C;T> available, so you don’t need to reintroduce them all the time.</p>\n<p>Here’s an example of the change:</p>\n <div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:812469c5-0cb0-4c63-8c15-c81123a09de7:e213396c-cb32-4edd-828a-4e3fed9b681c\" class=\"wlWriterEditableSmartContent\"><pre name=\"code\" class=\"c#\"> public static bool ImplementsInterface&lt;T&gt;(this Type type) where T : class\n{\n-         return Array.Exists(type.GetInterfaces(), t =&gt; t == typeof(T));\n+        return type.GetTypeInfo().ImplementedInterfaces.Any(t =&gt; t == typeof(T));\n}</pre></div>\n<p>Incidentally, the <strong><em>Array.Exists</em></strong> method does not, er, exist anymore.</p>\n<h3>Delegate.CreateDelegate is gone</h3>\n<p>I am not sure about the exact reason of this change, but it could be roughly the same direction as the fact that <a href=\"http://jasonbock.net/JB/Default.aspx?blog=entry.55fa01c966fa4e839a5675f5b70d06df\">Reflection.Emit is not available</a>. Membus uses this method to build delegates from suitable methods that can act as a target of messages.</p>\n<p>In this case I had to move the code creation to what the Expression-class makes available to us. The correct way to create an arbitrary <strong><em>Action&#x3C;T></em></strong> delegate from a suitable <strong><em>MethodInfo</em></strong> looks like this:</p>\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:812469c5-0cb0-4c63-8c15-c81123a09de7:6a0c2a62-35b4-421a-bccf-34ab37138d04\" class=\"wlWriterEditableSmartContent\"><pre name=\"code\" class=\"c#\">public static ISubscription ConstructSubscription(this MethodInfo info, object target)\n{\n  var parameterType = info.GetParameters()[0].ParameterType;\n  var fittingDelegateType = typeof(Action&lt;&gt;).MakeGenericType(parameterType);\n  var p = Expression.Parameter(parameterType);\n  var call = Expression.Call(p, info);\n  var @delegate = Expression.Lambda(fittingDelegateType, call, p);\n<p>  var fittingMethodSubscription = typeof(MethodInvocation&#x3C;>).MakeGenericType(parameterType);\nvar sub = Activator.CreateInstance(fittingMethodSubscription, @delegate.Compile());</p>\n<p>  return (ISubscription)sub;\n}</pre></div></p>\n<p>All in all the necessary changes to make Membus compile again were done in roughly 2 hours. The commit of the changes documented in this post <a href=\"https://github.com/flq/MemBus/commit/53d74a7c70ddd250b8b9e22a71a48adaec0ad5fb\">can be seen here</a> on github as a diff.</p>","frontmatter":{"date":"September 19, 2011","path":null,"title":"Making a WinRT component out of Membus – Pt.1, making Membus compile","tags":["software-development","dotnet","membus","libs-and-frameworks"]}}},"pageContext":{"title":"Making a WinRT component out of Membus – Pt.1, making Membus compile","previous":{"fields":{"slug":"/2011/08/12/more-tricks-from-ye-olde-event-aggregator-no-i-dont-want-that-message-for-a-while"},"frontmatter":{"title":"More tricks from ye olde Event Aggregator: No, I don’t want that message for a while","tags":["software-development","membus"],"date":"2011/08/12"}},"next":{"fields":{"slug":"/2011/11/17/new-tooling-new-posts"},"frontmatter":{"title":"New Tooling, new Posts","tags":["software-development","loosely-coupled"],"date":"2011/11/17"}}}}
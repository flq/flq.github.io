{"data":{"markdownRemark":{"html":"<h2>\"react\" series</h2>\n<ol>\n<li>Getting into React Part 1</li>\n<li>[Getting into React Part 2][2]</li>\n<li>[Create react app with typescript][3]</li>\n</ol>\n<blockquote>\n<p>All posts in this series use versions around July 2017, i.e.<br>\nReact: late v15s<br>\nTypescript: v2.3.4<br>\netc. - you know things are in flow. While react has been quite stable the past years, you never know.\nThe code you will see is compatible to react v16, though.</p>\n</blockquote>\n<p>I have no idea how many getting started tutorials are out there that deal with react, but I felt like documenting the things I know about using that library, in case I forget something about <em>something</em> or that someone else might find <em>some</em> part useful.</p>\n<p>The danger with tutorials, especially in the kingdom of javascript: They can get mouldy, become obsolete and all that. This will no doubt happen to this one as well. There is at least the possibility of fixing it, though, as my site is github repo that is <a href=\"https://github.com/flq/flq.github.io\">located over here</a>.</p>\n<p>Even so, I have found react to be quite stable as far as javascript libraries go. Major versions come with their deprecation warnings and the things you need to fix have been of a mechanical nature and quite manageable.</p>\n<p>So, let's get started with react with a simple hello world: </p>\n<blockquote class=\"twitter-tweet\" data-lang=\"en\"><p lang=\"en\" dir=\"ltr\">Marc was almost ready to implement his &quot;hello world&quot; React app <a href=\"https://t.co/ptdg4yteF1\">pic.twitter.com/ptdg4yteF1</a></p>&mdash; Thomas Fuchs (@thomasfuchs) <a href=\"https://twitter.com/thomasfuchs/status/708675139253174273\">March 12, 2016</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<p>Yeah, right.</p>\n<p><strong>Here</strong>'s the Hello World:</p>\n<pre><code class=\"language-html\">&#x3C;html>\n    &#x3C;head>\n        &#x3C;script src=\"https://unpkg.com/react@15/dist/react.js\">&#x3C;/script>\n        &#x3C;script src=\"https://unpkg.com/react-dom@15/dist/react-dom.js\">&#x3C;/script>\n        &#x3C;script>\n            const { createElement } = React;\n            const { render } = ReactDOM;\n            const Hello = ({text, color = \"black\" }) => \n                createElement(\"h1\", { style: { color } }, `Hello ${text}`);\n\n            document.addEventListener(\"DOMContentLoaded\", () => \n                render(\n                    createElement(Hello, { text: \"World\", color: \"mediumseagreen\" }), \n                    document.getElementById(\"target\")\n                )\n            );\n        &#x3C;/script>\n    &#x3C;/head>\n    &#x3C;body>\n        &#x3C;div id=\"target\">&#x3C;/div>\n    &#x3C;/body>\n&#x3C;/html>\n</code></pre>\n<p>Yes, that's it. And you can even specifiy a color.</p>\n<p>Of course I'm trolling you. This is modern javascript development. We need TypeScript, so we need compilation, hence we need webpack, and when we develop we need hot reloading and JSX to keep sane, and enzyme to test, and redux as a flux backend, or rather Cerebral, or <strong>OH MY GOD</strong>!</p>\n<p>So, yes, I'll definitely not be able to give you answers to all of that, but, without further ado, let's move on to the <strong><em>real</em></strong> Hello World, the one shown in the tweet.</p>\n<p>[2]: {% post<em>url 2017-07-22-Getting-into-react-part-2 %}\n[3]: {% post</em>url 2017-07-23-Create-react-app-with-typescript %}</p>","frontmatter":{"date":"July 21, 2017","path":null,"title":"Getting into React Part 1","tags":["programming","web","react","javascript"]}}},"pageContext":{"title":"Getting into React Part 1"}}
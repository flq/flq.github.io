{"data":{"markdownRemark":{"html":"<p>You know, they are once again going <em>craazy</em> in Germany - The Lotto jackpot has swollen to a whopping 35 million. That's a lot of money, certainly enough to devote some of my time to the subject.</p>\n<p>I was looking around the Internet whether I could get my hand on all the lotto drawings that happened in Germany. I found a file <a href=\"http://home.snafu.de/mcs/lzorder.htm\">here</a>, which seems to contain all Saturday drawings. I cross-checked a few drawings with a different source <a href=\"http://www.dielottozahlen.de/LOTTO/6aus49/zahlen.html\">here</a> and it looks like these could really be the numbers. You can find other statistical analysis <a href=\"http://www.tipptreffer.de/lotto/lottolangfrist.htm\">here</a> as well. </p>\n<p>I took the file since it was quickly readable by a machine. I read each line into a structure called <strong>Drawing</strong>, containing the Date of Draw and an array of int containing the numbers. <strong>Drawing</strong> itself implements <strong>IEnumerable&#x3C;int></strong> which enumerates the contained numbers.</p>\n<p>Once the file is read I have an array of Drawings. The first analysis I did was to see whether all Drawings had all 7 numbers (the <strong>6 out of 49</strong> and the <em>Zusatzzahl</em>, the additional number).</p>\n<p>The used LINQ query looks like this:</p>\n<csharp>\nvar result = from d in drawings\n             group d by d.Numbers.Count()\n             into g select g;\n<p>foreach (var a in result)\nConsole.WriteLine(\"{0} entries have {1} numbers\", a.Count(), a.Key);\n</csharp></p>\n<p>Which gave me...</p>\n<p><code>36 entries have 6 numbers 2519 entries have 7 numbers</code></p>\n<p>Ergo, a few entries had the <em>Zusatzzahl</em> missing, but I can live with that. Next was a quick check which number is drawn most (and least)...</p>\n<csharp>\nvar result =\n  from d in drawings\n  from n in d\n  group d by n\n  into numbers\n    orderby numbers.Count() descending\n    select numbers;\n</csharp>\n<p>The most popular number so far has been 32 (420 times), the least popular 13 (313 times).</p>\n<p>Next question: Given your numbers, how lucky would you have been so far if you would have played every Saturday with the same numbers since 1955?</p>\n<p>This query is a little bit lengthy because it contains the following information:</p>\n<ul>\n<li>I want to see the numbers that were drawn</li>\n<li>I do not want to see where I only would have had one or two correct numbers</li>\n<li>If the combination was drawn only once I want to see which date that happened (better matches are more likely to have happened only once)</li>\n</ul>\n<p>It's late, so maybe there is a more elegant solution, but I came up with this (please note that <strong>nums</strong> are the numbers typed in to be matched):</p>\n<csharp>\nvar result =\n  from drawing in drawings\n  let matches = drawing.Where(d => nums.Contains(d))\n  where matches.Count() > 2\n  let matchedNums = \n    string.Join(\",\",\n      matches.OrderBy(i => i).Select(i => i.ToString()).ToArray())\n  let elem = new {matches, matchedNums, drawing.DayOfDraw}\n  group elem by elem.matchedNums\n  into m\n    orderby m.Key.Length descending\n    let date = m.Count() > 1 ?\n      \"Various\" : \n      m.FirstOrDefault().DayOfDraw.ToString(\"dd.MM.yyyy\")\n    select new\n             {\n               Numbers = \"[\" + m.Key + \"]\",\n               Hits = m.Count(),\n               DrawDate = date\n             };\n</csharp>\n<p>That provides a bit more fun. The output looks e.g. like this:</p>\n<p><code>Enter your numbers:7,13,16,19,32,43 Numbers: [7,13,16,32,43] were drawn 1 times on 28.10.1978 Numbers: [13,16,19,32] were drawn 1 times on 20.08.1977 ...</code></p>\n<p>For the seriously awesome numbers 5,7,23,42 I can say that they were never drawn together. My wife played Lotto on Wednesday (<strong>1: 140'000'000</strong> ain't deterring her) with 7,13,16,19,32,43 . That one had 5 hits once...even so, it's 31 years ago.</p>\n<p>I didn't get further today but I may try to pull off some other LINQies, see what else those numbers can tell us ;) So far, I can only say that if you win the Jackpot you are one lucky guy!</p>","frontmatter":{"date":"January 30, 2009","path":null,"title":"Playing Lotto with LINQ","tags":["dotnet","geekdom","loosely-coupled"]}}},"pageContext":{"title":"Playing Lotto with LINQ"}}
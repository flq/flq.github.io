{"data":{"markdownRemark":{"html":"<p>This post is about how the feature of listening to morse sounds when pressing the button...</p>\n<p><img src=\"/assets/play-morse-button.png\" alt=\"ts auto-complete\"></p>\n<p>...is implemented.</p>\n<ul>\n<li><a href=\"#reactredux\">react/redux</a></li>\n<li><a href=\"#elm\">elm</a></li>\n</ul>\n<h3>react/redux</h3>\n<p>Let's start with the user interaction <a href=\"https://github.com/flq/remorse/blob/834762ec8185fa024160c397a07000e6cd7667fd/src/TypingScreen/TypingScreen.js#L37-L43\">in the UI</a>:</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span>\n    <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>button<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>soundButton<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span><span class=\"token entity\" title=\"&#128266;\">&amp;#128266;</span><span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\">onClick</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span>{playSound}</span> <span class=\"token punctuation\">/></span></span></code></pre></div>\n<p><code class=\"language-text\">playSound</code> is an action that is surfaced through react-redux' <code class=\"language-text\">connect</code>-functionality. The action <a href=\"https://github.com/flq/remorse/blob/834762ec8185fa024160c397a07000e6cd7667fd/src/TypingScreen/Actions.js#L23-L28\">looks like that</a>:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">playSound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>dispatch<span class=\"token punctuation\">,</span> getState<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> userInput<span class=\"token punctuation\">,</span> soundSpeed <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>typing<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">textAsMorseSound</span><span class=\"token punctuation\">(</span>userInput<span class=\"token punctuation\">,</span> soundSpeed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This type of function is supported by the <a href=\"https://github.com/gaearon/redux-thunk\">redux-thunk</a> middleware, which provides the dispatch and getState functions to be able to perform <em>side-effects</em> within a user-UI interaction. <a href=\"https://github.com/flq/remorse/blob/834762ec8185fa024160c397a07000e6cd7667fd/src/components/SoundLib.js#L32\">Digging deeper</a>: </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">textAsMorseSound</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">,</span> soundSpeed<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> c <span class=\"token keyword\">of</span> Array<span class=\"token punctuation\">.</span><span class=\"token keyword\">from</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> code <span class=\"token operator\">=</span> <span class=\"token function\">charToMorseCode</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">await</span> <span class=\"token function\">asyncPlayMorse</span><span class=\"token punctuation\">(</span>Array<span class=\"token punctuation\">.</span><span class=\"token keyword\">from</span><span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> soundSpeed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">await</span> <span class=\"token function\">delay</span><span class=\"token punctuation\">(</span><span class=\"token constant\">DASH_LENGTH</span> <span class=\"token operator\">/</span> soundSpeed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Pause between chars</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//...</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">delay</span><span class=\"token punctuation\">(</span>millisecs<span class=\"token punctuation\">,</span> value <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> rej<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">res</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> millisecs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The async/await, part of ES2017, but already available through babeljs-transpiling, allows you to work with promises much like you do with Tasks in the post .NET 4.5 world.\nThis makes the code that performs the necessary time delays <a href=\"https://github.com/flq/remorse/blob/834762ec8185fa024160c397a07000e6cd7667fd/src/components/SoundLib.js#L40-L64\">much easier to read</a>. </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// characters: Array of strings like \"-\" and \".\" and \" \"</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">asyncPlayMorse</span><span class=\"token punctuation\">(</span>characters<span class=\"token punctuation\">,</span> soundSpeed <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> c <span class=\"token keyword\">of</span> characters<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">case</span> <span class=\"token string\">\".\"</span><span class=\"token punctuation\">:</span>\n        <span class=\"token function\">startSound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">await</span> <span class=\"token function\">delay</span><span class=\"token punctuation\">(</span><span class=\"token constant\">DOT_LENGTH</span> <span class=\"token operator\">/</span> soundSpeed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">stopSound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">await</span> <span class=\"token function\">delay</span><span class=\"token punctuation\">(</span><span class=\"token constant\">DOT_LENGTH</span> <span class=\"token operator\">/</span> soundSpeed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">case</span> <span class=\"token string\">\"-\"</span><span class=\"token punctuation\">:</span>\n        <span class=\"token function\">startSound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">await</span> <span class=\"token function\">delay</span><span class=\"token punctuation\">(</span><span class=\"token constant\">DASH_LENGTH</span> <span class=\"token operator\">/</span> soundSpeed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">stopSound</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">await</span> <span class=\"token function\">delay</span><span class=\"token punctuation\">(</span><span class=\"token constant\">DOT_LENGTH</span> <span class=\"token operator\">/</span> soundSpeed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">case</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">await</span> <span class=\"token function\">delay</span><span class=\"token punctuation\">(</span><span class=\"token constant\">PAUSE</span> <span class=\"token operator\">/</span> soundSpeed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Finally <code class=\"language-text\">startSound</code> and <code class=\"language-text\">stopSound</code> connect and disconnect the oscillator that <a href=\"https://github.com/flq/remorse/blob/834762ec8185fa024160c397a07000e6cd7667fd/src/components/SoundLib.js#L14-L30\">is set up</a> to the audio output of the browser.</p>\n<h3>elm</h3>\n<p>As you can imagine, not every single browser API is surfaced to elm - hence the concept of defining ports, a subsystem that allows you to interop to plain javascript and its access to all of the browser's API.\nTherefore, we go ahead and <a href=\"https://github.com/flq/elmorse/blob/ce330e70098106e988d92059c3762708c43646f5/src/Interop.elm#L5-L6\">define ports</a> to start and stop the sound:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">port audioOn <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> Cmd msg\nport audioOff <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> Cmd msg</code></pre></div>\n<p>In javascript, we need to fill these ports <a href=\"https://github.com/flq/elmorse/blob/ce330e70098106e988d92059c3762708c43646f5/src/Typing/audioPort.js#L23-L35\">with life</a>:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">initAudioPort</span><span class=\"token punctuation\">(</span>elmApp<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> isConnected <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  elmApp<span class=\"token punctuation\">.</span>ports<span class=\"token punctuation\">.</span>audioOn<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isConnected<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    oscillator<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>audioCtx<span class=\"token punctuation\">.</span>destination<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    isConnected <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  elmApp<span class=\"token punctuation\">.</span>ports<span class=\"token punctuation\">.</span>audioOff<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isConnected<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    oscillator<span class=\"token punctuation\">.</span><span class=\"token function\">disconnect</span><span class=\"token punctuation\">(</span>audioCtx<span class=\"token punctuation\">.</span>destination<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    isConnected <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// which is used like that:</span>\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> Main<span class=\"token punctuation\">.</span><span class=\"token function\">embed</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">initAudioPort</span><span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Now that we have this in place, we can stay in elm to implement the functionality. Let's <a href=\"https://github.com/flq/elmorse/blob/ce330e70098106e988d92059c3762708c43646f5/src/Typing/View.elm#L36-L40\">start in the UI</a> again:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">input <span class=\"token punctuation\">[</span>\n  type_ <span class=\"token string\">\"button\"</span><span class=\"token punctuation\">,</span> \n  <span class=\"token keyword\">class</span> <span class=\"token string\">\"soundButton\"</span><span class=\"token punctuation\">,</span> \n  onClick OnListenToMorse<span class=\"token punctuation\">,</span>\n  value <span class=\"token string\">\"Play Morse\"</span> <span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p><code class=\"language-text\">OnListenToMorse</code>is a defined message that needs to be handled in the <code class=\"language-text\">update</code> function of your application.</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">update</span> msg model <span class=\"token operator\">=</span> \n  <span class=\"token keyword\">case</span> msg <span class=\"token keyword\">of</span>\n    <span class=\"token comment\">-- stuff</span>\n    OnListenToMorse <span class=\"token operator\">-</span><span class=\"token operator\">></span>\n      <span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">,</span> Audio<span class=\"token punctuation\">.</span>playWords model<span class=\"token punctuation\">.</span>userInput model<span class=\"token punctuation\">.</span>morseSpeed<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Just like in the redux app, where I didn't show any reducer code, implying that nothing changes in the application's model, the only reaction here consists of initiating a <em>side-effect</em>.\n<a href=\"https://github.com/flq/elmorse/blob/8db340ed97ffe00ae075d7cca4236962b8336570/src/Typing/MorseAudio.elm#L37-L41\">What happens in</a> <code class=\"language-text\">playWords</code> ?</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\">playWords : String <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token keyword\">Float</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> Cmd Msg\nplayWords words factor <span class=\"token operator\">=</span> \n  stringToMorseSymbols words\n  <span class=\"token operator\">|</span><span class=\"token operator\">></span> List<span class=\"token punctuation\">.</span>map <span class=\"token punctuation\">(</span>convertSymbolToCommands factor<span class=\"token punctuation\">)</span>\n  <span class=\"token operator\">|</span><span class=\"token operator\">></span> bringTogether\n\n<span class=\"token comment\">-- type of stringToMorseSymbols: String -> List MorseSymbol</span>\n\nconvertSymbolToCommands: <span class=\"token keyword\">Float</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> MorseSymbol <span class=\"token operator\">-</span><span class=\"token operator\">></span> List <span class=\"token punctuation\">(</span>Milliseconds<span class=\"token punctuation\">,</span> Msg<span class=\"token punctuation\">)</span>\nconvertSymbolToCommands factor symbol <span class=\"token operator\">=</span>\n  let\n    adapt <span class=\"token punctuation\">(</span>millisecs<span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>millisecs <span class=\"token operator\">/</span> factor<span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">)</span>\n    adaptAll <span class=\"token operator\">=</span> List<span class=\"token punctuation\">.</span>map adapt\n  <span class=\"token operator\">in</span>\n    adaptAll <span class=\"token operator\">&lt;</span><span class=\"token operator\">|</span> <span class=\"token keyword\">case</span> symbol <span class=\"token keyword\">of</span>\n      Dot <span class=\"token operator\">-</span><span class=\"token operator\">></span> playDot\n      Dash <span class=\"token operator\">-</span><span class=\"token operator\">></span> playDash\n      ShortPause <span class=\"token operator\">-</span><span class=\"token operator\">></span> playBetweenChars\n      LongPause <span class=\"token operator\">-</span><span class=\"token operator\">></span> playBetweenWords\n      Garbled <span class=\"token operator\">-</span><span class=\"token operator\">></span> playBetweenWords\n\n<span class=\"token comment\">-- example of the \"play\" functions:</span>\n\nplayDot: List <span class=\"token punctuation\">(</span>Milliseconds<span class=\"token punctuation\">,</span> Msg<span class=\"token punctuation\">)</span>\nplayDot <span class=\"token operator\">=</span>  \n  <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>SoundMsg StartSound<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">(</span>dotLength<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>SoundMsg StopSound<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">(</span>pauseBetweenChars<span class=\"token punctuation\">,</span> NoOp<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\">-- from tuples to commands</span>\n\nbringTogether : List <span class=\"token punctuation\">(</span>List <span class=\"token punctuation\">(</span> Milliseconds<span class=\"token punctuation\">,</span> Msg <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> Cmd Msg\nbringTogether <span class=\"token operator\">=</span> List<span class=\"token punctuation\">.</span>concat <span class=\"token operator\">>></span> List<span class=\"token punctuation\">.</span>map toSequenceTuple <span class=\"token operator\">>></span> sequence</code></pre></div>\n<p>In other words, first the user input is converted to a list of morse symbols.\nThis is then processed to a <strong>list of list of tuples</strong> that state at\nwhich relative time in milliseconds which message should be piped into the update function (See e.g. <code class=\"language-text\">Dot -&gt; playDot + applying speed factor</code>).</p>\n<p>The final ingredient to this magic is the <strong>sequence</strong> function from the elm package <a href=\"http://package.elm-lang.org/packages/andrewMacmurray/elm-delay/latest/Delay#sequence\">delay</a>. <a href=\"https://github.com/andrewMacmurray/elm-delay/blob/2.0.2/src/Delay.elm\">The code</a> is actually not super-complex,\nit does the necessary plumbing to call out to <strong>Process.sleep</strong> the elm equivalent to javascript's <code class=\"language-text\">setTimeout</code>.</p>\n<p>What happens then, when the <code class=\"language-text\">SoundMsg StartSound</code> and <code class=\"language-text\">StopSound</code> messages are received?</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">update</span> msg model <span class=\"token operator\">=</span> \n  <span class=\"token keyword\">case</span> msg <span class=\"token keyword\">of</span>\n    <span class=\"token comment\">-- stuff</span>\n    SoundMsg msg <span class=\"token operator\">-</span><span class=\"token operator\">></span> \n      Audio<span class=\"token punctuation\">.</span><span class=\"token keyword\">update</span> msg model\n\n<span class=\"token comment\">-- In audio update:</span>\n\n<span class=\"token keyword\">update</span> : SoundMsg <span class=\"token operator\">-</span><span class=\"token operator\">></span> Model <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token punctuation\">(</span>Model<span class=\"token punctuation\">,</span> Cmd Msg<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">update</span> msg model <span class=\"token operator\">=</span>\n  <span class=\"token keyword\">case</span> msg <span class=\"token keyword\">of</span>\n    StartSound <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">,</span> audioOn <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    StopSound <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">,</span> audioOff <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>And <a href=\"https://github.com/flq/elmorse/blob/8db340ed97ffe00ae075d7cca4236962b8336570/src/Typing/MorseAudio.elm#L17-L21\">here is where</a> you finally find the calls to the interop ports we defined to connect and disconnect the Oscillator :)</p>\n<p>Which route do you prefer?</p>","frontmatter":{"date":"August 21, 2017","path":null,"title":"react/redux to elm feature comparison: playing morse sounds","tags":["web","programming","javascript"]}}},"pageContext":{"title":"react/redux to elm feature comparison: playing morse sounds"}}
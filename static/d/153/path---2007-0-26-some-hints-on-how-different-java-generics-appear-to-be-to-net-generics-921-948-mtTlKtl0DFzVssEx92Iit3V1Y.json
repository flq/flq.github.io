{"data":{"markdownRemark":{"html":"<p>A tss entry caught my curiosity as it was talking about a \"<a href=\"http://stuffthathappens.com/blog/2007/01/25/java-generics-puzzler/\">generics puzzle</a>\" in JAVA. Finally, I thought, an example-based look at how JAVA generics differ from their .NET pendant? Indeed, the puzzle turns out to not be one in e.g. C#.</p>\n<p>If the intent is to be able to create instances of a provided type argument, we need a constrain on the provided type argument to provide a parameterless constructor... </p>\n<pre><code>class GenericCheck&#x3C;T> where T : new() {\n  public T Instance {\n    get {\n      return Activator.CreateInstance&#x3C;T>();\n    }\n  }\n}\n</code></pre>\n<p>Beware, though that if T has no default constructor, construction will fail with a MissingMethodException. Funny enough though, the Activator's method has no constraint on T, which it could easily implement:</p>\n<pre><code>public V CreateInstance&#x3C;V>() where V : new() ...\n</code></pre>\n<p>Apart from that you could also construct types that have no default constructor. Just sprinkle in some reflection. The type in question is easily accessed with typeof(T)...</p>\n<pre><code>class GenericCheck&#x3C;T> {\n\n  public T Instance(string name, int age) {\n      Type t = typeof(T);\n      ConstructorInfo info = t.GetConstructor(\n         new Type[] { typeof(string), typeof(int) });\n      if (info != null) {\n        return (T)info.Invoke(BindingFlags.CreateInstance,\n           null,new object[] { name, age },null);\n      }\n      return default(T);\n  }\n\n}\n\npublic static void Test() {\n  GenericCheck&#x3C;Person> gp = new GenericCheck&#x3C;Person>();\n  Person p = gp.Instance(\"martha\", 24);\n}\n</code></pre>\n<p>What you don't get with this approach is type safety, and you'll probably have a performance penalty, but that's another subject.\nSo, no puzzles to be seen...</p>","frontmatter":{"date":"January 26, 2007","path":null,"title":"Some hints on how different JAVA generics appear to be to .NET generics","tags":["software-development","dotnet","JAVA"]}}},"pageContext":{"title":"Some hints on how different JAVA generics appear to be to .NET generics"}}
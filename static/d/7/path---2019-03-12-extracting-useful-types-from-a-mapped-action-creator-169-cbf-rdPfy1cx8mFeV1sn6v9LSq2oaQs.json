{"data":{"markdownRemark":{"html":"<p><strong>The context: typescript, redux, react.</strong></p>\n<p>You may or may not know that if you dispatch a thunk (those action creators that return a function that is then processed by the <strong>redux-thunk</strong> middleware), you can actually await the dispatch and the return value from the dispatched think will also be returned...</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> updateSomething <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./relevantStore\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> ComponentProps <span class=\"token operator\">=</span> ReturnType<span class=\"token operator\">&lt;</span><span class=\"token keyword\">typeof</span> mapStateToProps<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> \n                             <span class=\"token keyword\">typeof</span> mapDispatchToProps <span class=\"token operator\">&amp;</span>\n                             <span class=\"token punctuation\">{</span> someId<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Component</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span><span class=\"token operator\">&lt;</span>ComponentProps<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">...</span>\n  update <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>description<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> someId<span class=\"token punctuation\">,</span> someState <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> success <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span>someId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> success<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">mapStateToProps</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">:</span> State<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    someState<span class=\"token punctuation\">:</span> state<span class=\"token punctuation\">.</span>someState\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> mapDispatchToProps <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  update<span class=\"token punctuation\">:</span> updateSomething\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>mapStateToProps<span class=\"token punctuation\">,</span> mapDispatchToProps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>Component<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>In the world of Typescript the type of useReducer allows us to type the <code class=\"language-text\">State</code> as well as the type of the <code class=\"language-text\">Action</code> which is usually a union of all possible actions. As a kind of baseline I'll the canonical react app, the counter :):</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> State <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> counter<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> Action<span class=\"token operator\">&lt;</span><span class=\"token constant\">K</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">V</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">void</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token constant\">V</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">void</span> <span class=\"token operator\">?</span> \n  <span class=\"token punctuation\">{</span> <span class=\"token keyword\">type</span><span class=\"token punctuation\">:</span> <span class=\"token constant\">K</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">:</span> \n  <span class=\"token punctuation\">{</span> <span class=\"token keyword\">type</span><span class=\"token punctuation\">:</span> <span class=\"token constant\">K</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">&amp;</span> <span class=\"token constant\">V</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> defaultGuard<span class=\"token operator\">&lt;</span><span class=\"token constant\">S</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">:</span> <span class=\"token constant\">S</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">:</span> never<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> reducer <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n  s<span class=\"token punctuation\">:</span> State<span class=\"token punctuation\">,</span>\n  a<span class=\"token punctuation\">:</span> Action<span class=\"token operator\">&lt;</span><span class=\"token string\">\"INCR\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"DECR\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"RESET\"</span><span class=\"token operator\">></span> <span class=\"token operator\">|</span> \n     Action<span class=\"token operator\">&lt;</span><span class=\"token string\">\"SET\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> value<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span><span class=\"token keyword\">type</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"INCR\"</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> counter<span class=\"token punctuation\">:</span> s<span class=\"token punctuation\">.</span>counter <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"DECR\"</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> counter<span class=\"token punctuation\">:</span> s<span class=\"token punctuation\">.</span>counter <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"RESET\"</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> counter<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"SET\"</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> counter<span class=\"token punctuation\">:</span> a<span class=\"token punctuation\">.</span>value <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">return</span> <span class=\"token function\">defaultGuard</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">Action</code> is a type that takes away a little bit of the tediousness of defining the typical actions that you'd write in your application. Once you use <code class=\"language-text\">State</code> and <code class=\"language-text\">Action</code> in your reducer definition you'll get type-safety around the <strong>state</strong> and the encountered <strong>actions</strong>. In addition, you get an exhaustive matching if you either nail down the <strong>return type</strong> of the reducer to the State or use something like the <code class=\"language-text\">defaultGuard</code> which will produce a compile error if there are possible actions that'd end up in the default case.</p>\n<p>You can then use the reducer like such:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useReducer</span><span class=\"token punctuation\">(</span>reducer<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> counter<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token keyword\">type</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"INCR\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>Increment<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token keyword\">type</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"DECR\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>Decrement<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token keyword\">type</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"RESET\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>Reset<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token keyword\">type</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"SET\"</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">:</span> <span class=\"token number\">7</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        Put <span class=\"token keyword\">in</span> the <span class=\"token builtin\">number</span> <span class=\"token number\">7</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h2<span class=\"token operator\">></span>Counter is <span class=\"token punctuation\">{</span>state<span class=\"token punctuation\">.</span>counter<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>An IDE like VS Code will have your code completion demands covered quite nicely. All, in all, a nice experience with the compiler helping you along.</p>\n<p>If you prefer to dispatch actions with action creators and want to have some help with that, you can also use libraries that are usually used in combination with <a href=\"https://redux.js.org/\">redux</a> - since the dispatch and the reducer function from <code class=\"language-text\">useReducer</code> are kind of the same thing™, such libraries that help defining action creators and reducers should work with <code class=\"language-text\">useReducer</code>, too, right?</p>\n<p>Personally I know of two libraries that fit the bill, <a href=\"https://www.npmjs.com/package/typesafe-actions\">typesafe-actions</a> and <a href=\"https://www.npmjs.com/package/unionize\">unionize</a>.</p>\n<h2>Using typesafe-actions</h2>\n<p>Let's define the action creators and the reducer (state stays as before):</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>\n  createAction<span class=\"token punctuation\">,</span>\n  getType<span class=\"token punctuation\">,</span>\n  createStandardAction<span class=\"token punctuation\">,</span>\n  ActionType<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'typesafe-actions'</span>\n\n<span class=\"token keyword\">const</span> Actions <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  increment<span class=\"token punctuation\">:</span> <span class=\"token function\">createAction</span><span class=\"token punctuation\">(</span><span class=\"token string\">'INCR'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  decrement<span class=\"token punctuation\">:</span> <span class=\"token function\">createAction</span><span class=\"token punctuation\">(</span><span class=\"token string\">'DECR'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  reset<span class=\"token punctuation\">:</span> <span class=\"token function\">createAction</span><span class=\"token punctuation\">(</span><span class=\"token string\">'RESET'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  setValue<span class=\"token punctuation\">:</span> <span class=\"token function\">createStandardAction</span><span class=\"token punctuation\">(</span><span class=\"token string\">'SET'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">reducer</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">:</span> State<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">:</span> ActionType<span class=\"token operator\">&lt;</span><span class=\"token keyword\">typeof</span> Actions<span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span><span class=\"token keyword\">type</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token function\">getType</span><span class=\"token punctuation\">(</span>Actions<span class=\"token punctuation\">.</span>increment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> counter<span class=\"token punctuation\">:</span> s<span class=\"token punctuation\">.</span>counter <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">case</span> <span class=\"token function\">getType</span><span class=\"token punctuation\">(</span>Actions<span class=\"token punctuation\">.</span>decrement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> counter<span class=\"token punctuation\">:</span> s<span class=\"token punctuation\">.</span>counter <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">case</span> <span class=\"token function\">getType</span><span class=\"token punctuation\">(</span>Actions<span class=\"token punctuation\">.</span>reset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> counter<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">case</span> <span class=\"token function\">getType</span><span class=\"token punctuation\">(</span>Actions<span class=\"token punctuation\">.</span>setValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> counter<span class=\"token punctuation\">:</span> a<span class=\"token punctuation\">.</span>payload <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The compile-time assurances around state and actions stay preserved.</p>\n<p>Let's improve the experience and create a hook that instead of the <code class=\"language-text\">dispatch</code> will provide the action creators already bound to the dispatcher.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Reducer<span class=\"token punctuation\">,</span> useReducer<span class=\"token punctuation\">,</span> useMemo <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> ActionType <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'typesafe-actions'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> useTypesafeActions<span class=\"token operator\">&lt;</span>\n  <span class=\"token constant\">S</span><span class=\"token punctuation\">,</span>\n  Actions <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">any</span> <span class=\"token punctuation\">}</span>\n<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>\n  reducer<span class=\"token punctuation\">:</span> Reducer<span class=\"token operator\">&lt;</span><span class=\"token constant\">S</span><span class=\"token punctuation\">,</span> ActionType<span class=\"token operator\">&lt;</span>Actions<span class=\"token operator\">>></span><span class=\"token punctuation\">,</span>\n  initialState<span class=\"token punctuation\">:</span> <span class=\"token constant\">S</span><span class=\"token punctuation\">,</span>\n  actions<span class=\"token punctuation\">:</span> Actions\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">S</span><span class=\"token punctuation\">,</span> Actions<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useReducer</span><span class=\"token punctuation\">(</span>reducer<span class=\"token punctuation\">,</span> initialState<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> boundActions <span class=\"token operator\">=</span> <span class=\"token function\">useMemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">bindActionCreator</span><span class=\"token punctuation\">(</span>\n      actionCreator<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span>\n      dispatcher<span class=\"token punctuation\">:</span> <span class=\"token keyword\">typeof</span> dispatch\n    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">dispatcher</span><span class=\"token punctuation\">(</span>\n          actionCreator<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>\n            <span class=\"token keyword\">this</span> <span class=\"token keyword\">as</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>arguments <span class=\"token keyword\">as</span> unknown<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">const</span> newActions <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>actions<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span>\n      <span class=\"token punctuation\">(</span>ba<span class=\"token punctuation\">,</span> actionName<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        ba<span class=\"token punctuation\">[</span>actionName<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">bindActionCreator</span><span class=\"token punctuation\">(</span>\n          actions<span class=\"token punctuation\">[</span>actionName<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> ba\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token keyword\">as</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">any</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> newActions\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>dispatch<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> boundActions <span class=\"token keyword\">as</span> Actions<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The function <code class=\"language-text\">bindActionCreator</code> is pretty much taken from <a href=\"https://github.com/reduxjs/redux/blob/master/src/bindActionCreators.js\"><code class=\"language-text\">bindActionCreators</code></a> which can be found in the redux codebase. It constructs a function that passes the arguments provided to the action creator and dispatches the result.\nThe <code class=\"language-text\">Object.keys(actions).reduce</code> code constructs an object that has the same shape like the actions passed in but instead provides functions bound to the <code class=\"language-text\">dispatch</code> function returned by <code class=\"language-text\">useReducer</code>. All of this is wrapped in a <code class=\"language-text\">useMemo</code> hook since dispatch and actions will not change throughout the lifetime of the component using this hook.</p>\n<p>How, is this used then? Based on the previous code that introduced the actions and the reducer, we can write the following component:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> actions<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> useTypesafeActions<span class=\"token operator\">&lt;</span>State<span class=\"token punctuation\">,</span> <span class=\"token keyword\">typeof</span> Actions<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>\n    reducer<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> counter<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    Actions\n  <span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>actions<span class=\"token punctuation\">.</span>increment<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>Increment<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>actions<span class=\"token punctuation\">.</span>decrement<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>Decrement<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>actions<span class=\"token punctuation\">.</span>reset<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>Reset<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> actions<span class=\"token punctuation\">.</span><span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>Set to <span class=\"token number\">7</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h2<span class=\"token operator\">></span>Counter is <span class=\"token punctuation\">{</span>state<span class=\"token punctuation\">.</span>counter<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h2<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Using unionize</h2>\n<p>The major differences in usage in this particular scenario are the definition of the action creators and the reducer. Here they are for completeness' sake.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> unionize<span class=\"token punctuation\">,</span> ofType<span class=\"token punctuation\">,</span> UnionOf <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"unionize\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> Actions <span class=\"token operator\">=</span> <span class=\"token function\">unionize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  increment<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  decrement<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  reset<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  setValue<span class=\"token punctuation\">:</span> ofType<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">{</span> value<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">reducer</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">:</span> State<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">:</span> UnionOf<span class=\"token operator\">&lt;</span><span class=\"token keyword\">typeof</span> Actions<span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n  Actions<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    increment<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> counter<span class=\"token punctuation\">:</span> s<span class=\"token punctuation\">.</span>counter <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    decrement<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> counter<span class=\"token punctuation\">:</span> s<span class=\"token punctuation\">.</span>counter <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    reset<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> counter<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    setValue<span class=\"token punctuation\">:</span> a <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> counter<span class=\"token punctuation\">:</span> a<span class=\"token punctuation\">.</span>value <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> s\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>As you can see, there are neat ways to leverage the redux ecosystem for the new react hooks world. The <code class=\"language-text\">useReducer</code> hook in Typescript can give you the same assurances with regard to type safety as redux does and with the types being quite similar you can build upon those types with action creator libraries available out there.</p>","fields":{"slug":"/2019/06/21/extracting-useful-types-from-a-mapped-action-creator"},"frontmatter":{"date":"June 21, 2019","path":null,"title":"Extracting useful types from a mapped action creator","tags":["programming","typescript","react"]}}},"pageContext":{"title":"Extracting useful types from a mapped action creator","previous":{"fields":{"slug":"/2019/03/12/using-typed-action-creators-with-reacts-usereducer-hook","published":true},"frontmatter":{"title":"Using typed action creators with react's useReducer hook","tags":["programming","typescript","react"],"date":"2019/03/12"}},"next":null}}
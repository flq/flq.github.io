{"data":{"markdownRemark":{"html":"<p><a href=\"http://www.dotnetkicks.com\">dotnetkicks</a> has an astonishing amount of entries related to <a href=\"http://www.dotnetkicks.com/search?q=singleton\">\"The Singleton\"Â®</a>...</p>\n<p>Regardless of whether Singletons are considered harmful or not, I could not resist but provide you with my own take on factoring out the need to get a Singleton which doesn't feel like a Singleton at all. We can single-ton out any classes that provide a default constructor. Due to the reflection spice you can provide a private one as well. Takes somewhat longer, but you're only doing it once, don't you ;) ?</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">SingletonOf</span><span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> <span class=\"token keyword\">where</span> T <span class=\"token punctuation\">:</span> <span class=\"token keyword\">class</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token class-name\">T</span> instance <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">)</span>Activator<span class=\"token punctuation\">.</span><span class=\"token function\">CreateInstance</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">implicit</span> <span class=\"token keyword\">operator</span> T <span class=\"token punctuation\">(</span>SingletonOf<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> singleton<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> SingletonOf<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The implicit operator makes it possible to do this:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\">Person</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token generic-method\"><span class=\"token function\">SingletonOf</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Person</span> p2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token generic-method\"><span class=\"token function\">SingletonOf</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nDebug<span class=\"token punctuation\">.</span><span class=\"token function\">Assert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">object</span><span class=\"token punctuation\">.</span><span class=\"token function\">ReferenceEquals</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span> p2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"W00t?! They should be equal!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Doesn't it look funny? I find it quite likeable and you definitely don't pollute the class in question with some singleton boilerplate. I would like to say \"Go forth and multiply\" but it seems wholly inappropriate for the issue at hand...</p>","frontmatter":{"date":"April 29, 2008","path":null,"title":"Singletons are boring, hence factor out the concern","tags":["software-development","dotnet","patterns"]}}},"pageContext":{"title":"Singletons are boring, hence factor out the concern","previous":{"fields":{"slug":"/2008/04/03/ndepend-cheat-sheet"},"frontmatter":{"title":"NDepend Cheat Sheet","tags":["download","dotnet","tools"],"date":"2008/04/03"}},"next":{"fields":{"slug":"/2008/04/30/spring-aop-castle-dynamicproxy2-first-glance-from-an-outsider"},"frontmatter":{"title":"Spring.AOP, Castle.DynamicProxy2 - first glance from an outsider","tags":["dotnet","libs-and-frameworks"],"date":"2008/04/30"}}}}
{"data":{"markdownRemark":{"html":"<p>With the introduction of anonymous methods, using delegates has become a lot more straightforward. Even so, delegate definitions are still required to which an anonymous method can map. Thankfully there are a few delegates already defined in the framework so that you can reuse them in your own methods, saving you the hassle to define a delegate yourself in a number of situations.</p>\n<ul>\n<li>\n<p><strong>Action&#x3C;T></strong> : delegate void MyAction&#x3C;T>(T obj)\nUseful to write a void method accepting one arbitrary parameter. No need to define a delegate for that, use this one instead.</p>\n</li>\n<li>\n<p><strong>Predicate&#x3C;T></strong> : delegate bool MyPredicate&#x3C;T>(T obj)\nAlso represents a method taking a parameter of type T, returning a boolean.</p>\n</li>\n<li>\n<p><strong>Converter&#x3C;TIn,TOut></strong> : delegate TOut MyConverter&#x3C;TIn, TOut>(TIn obj);\nPretty generic, huh? It will require an input parameter of type TIn and will have to return an object of type TOut.</p>\n</li>\n<li>\n<p><strong>Comparison&#x3C;T></strong> : delegate int MyComparison(T obj1, Tobj2)\nNot that useful outside its intended use as a piece of code to compare two objects, but who knows really...</p>\n</li>\n<li>\n<p><strong>MethodInvoker</strong> : delegate void MyInvoker()\nExecution of a paremeterless void method, kind of the programming representation of an autistic person. <em>Sadly</em>, this delegate is defined in the System.Windows.Forms namespace, which is silly, because such a delegate is useful all the time, considering that an anonymous method has access to its surrounding scope. So, if you're not programming a Windows Forms application, you'll have to define your own Invoker. But, hang on, what about...</p>\n</li>\n<li>\n<p><strong>ThreadStart</strong> : delegate void MyInvoker()\nIndeed the same signature, but the naming is rather misleading - not really recommendable in the light of programming that can be understood 3 months later.*   The following two delegates are mostly used in Windows Forms apps, but are actually available in the System namespace...</p>\n</li>\n<li>\n<p><strong>EventHandler</strong> : delegate void MyEventHandler(object o, EventArgs arg)\nThe well known pattern for event handling, but nobody stops you from reusing the pattern. Even more so with its fresh generic brother...</p>\n</li>\n<li>\n<p><strong>EventHandler&#x3C;T></strong> : delegate void MyHandler&#x3C;T>(object o, T args) where T : EventArgs\nNot bad, however, T is restricted to objects inheriting from EventArgs, which limits the delegate's usefulness beyond its intended scope.I sure have missed some but I'd love to hear from them, in order to complete this list for a quick reference...</p>\n</li>\n</ul>","fields":{"slug":"/2006/08/25/delegates-available-to-you-in-net-2-0"},"frontmatter":{"date":"August 25, 2006","path":null,"title":"Delegates available to you in .NET 2.0","tags":["software-development","dotnet"]}}},"pageContext":{"title":"Delegates available to you in .NET 2.0","previous":{"fields":{"slug":"/2006/08/04/easy-to-be-forgotten-in-the-history-of-science","published":true},"frontmatter":{"title":"Easy to be forgotten in the history of science","tags":["physics","loosely-coupled"],"date":"2006/08/04"}},"next":{"fields":{"slug":"/2006/09/27/are-no-news-news","published":true},"frontmatter":{"title":"Are no news news?","tags":["physics","ruby"],"date":"2006/09/27"}}}}
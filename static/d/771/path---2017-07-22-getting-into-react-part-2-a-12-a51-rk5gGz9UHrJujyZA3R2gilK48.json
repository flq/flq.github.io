{"data":{"markdownRemark":{"html":"<h2>\"react\" series</h2>\n<ol>\n<li><a href=\"/2017/07/21/getting-into-react-Part-1\">Getting into React Part 1</a></li>\n<li>Getting into React Part 2</li>\n<li><a href=\"/2017/07/23/create-react-app-with-typescript\">Create react app with typescript</a></li>\n</ol>\n<p>One thing should be clear right from the start: There is no single path to get your react application up and running. This is simply due to the fact that there is a huge array of alternatives with regard to tooling, runtime dependencies etc. etc.\nIf you are really just about to start, it seems that facebook's own <a href=\"https://github.com/facebookincubator/create-react-app\">create-react-app</a> is a good starting point. It will hide the scary amount of configuration and wiring together but will let you <em>materialize</em> all that once you want to introduce your own opinions with regard to building your client-side application.</p>\n<pre><code class=\"language-bash\">npm install create-react-app\n.\\node_modules\\.bin\\create-react-app cra\ncd cra\nnpm start\n</code></pre>\n<p>This creates a rather compact <code>package.json</code> file:</p>\n<p><img src=\"/public/assets/create-react-app-package.json.png\" alt=\"package json\"></p>\n<p>All magic is hence delegated to the <code>react-scripts</code> package. Let's have a look at the starting code. Running <code>npm start</code> brings up a server\nand starts the browser pointing at the right location:</p>\n<p><img src=\"/public/assets/create-react-app-start.png\" alt=\"start page\"></p>\n<p>So, is hot reloading enabled?</p>\n<p><img src=\"/public/assets/cra-edit.png\" alt=\"package json\"></p>\n<p>Looks like it:</p>\n<p><img src=\"/public/assets/cra-edit2.png\" alt=\"package json\"></p>\n<p>What about the testing story? Everything seems to be prepared, so we'll just add <a href=\"https://github.com/airbnb/enzyme\">enzyme</a> the way it is required:</p>\n<pre><code>npm i --save-dev react-test-renderer react-dom enzyme chai\n</code></pre>\n<p>And write a little test with it:</p>\n<pre><code class=\"language-js\">import { mount } from 'enzyme';\nimport { assert } from 'chai';\n\nit('renders the title', ()=> {\n  const wrapper = mount(&#x3C;App />);\n  const titleText = wrapper.find(\"h2\").text();\n  assert.include(titleText, \"Welcome\");\n});\n</code></pre>\n<p>And we get</p>\n<p><img src=\"/public/assets/cra-testing.png\" alt=\"package json\"></p>\n<p><strong>Awesome!</strong></p>\n<p>See, I still haven't provided you with a real reason for javascript fatigue, or have I?</p>\n<p>You get a nice starting point with all the goodness of a transpiler that will take care of your ES2016 syntax, CSS modules, hot reloading and a way to build a production bundle. As facebook states itself in the readme to the project, there are many opinions out there how a react client application should be set up and lists numerous alternatives to this approach. As it is, as long as you don't have an opinion formed yourself, this seems a pretty nice starting point that lets you get right into the code straight away and also helps you get your code into a production-ready format.</p>\n<p>Personally, I'd be ready to go, but I know that some of my colleagues ‚ù§ Typescript, so in the next post we'll try and see if we get into a similarly comfortable starting point, but with the Typescript compiler in the loop.</p>","frontmatter":{"date":"July 22, 2017","path":null,"title":"Getting into react part 2","tags":["react","programming","web","javascript"]}}},"pageContext":{"title":"Getting into react part 2"}}
{"data":{"markdownRemark":{"html":"<p>Yeah, yeah, we've all done our <strong><em>from thingy in stuff where thingy.Age > 26</em></strong>, etc., etc.</p>\n<p>I wanted to try something else for starters. I fired up my March CTP Orcas and got myself a Person (as usual, I can relate to them). The list I create for testing looks as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> Person<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">CreatePeopleList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span> Name <span class=\"token operator\">=</span> <span class=\"token string\">\"Arthur\"</span><span class=\"token punctuation\">,</span> Posn <span class=\"token operator\">=</span> Position<span class=\"token punctuation\">.</span>Boss<span class=\"token punctuation\">,</span> Salary<span class=\"token operator\">=</span><span class=\"token number\">10000</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span> Name <span class=\"token operator\">=</span> <span class=\"token string\">\"Selma\"</span><span class=\"token punctuation\">,</span> Posn <span class=\"token operator\">=</span> Position<span class=\"token punctuation\">.</span>Middleman<span class=\"token punctuation\">,</span> Salary<span class=\"token operator\">=</span><span class=\"token number\">6000</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span> Name <span class=\"token operator\">=</span> <span class=\"token string\">\"Buttocks\"</span><span class=\"token punctuation\">,</span> Posn <span class=\"token operator\">=</span> Position<span class=\"token punctuation\">.</span>Middleman<span class=\"token punctuation\">,</span> Salary<span class=\"token operator\">=</span><span class=\"token number\">5500</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span> Name <span class=\"token operator\">=</span> <span class=\"token string\">\"Shawn\"</span><span class=\"token punctuation\">,</span> Posn <span class=\"token operator\">=</span> Position<span class=\"token punctuation\">.</span>Peasant<span class=\"token punctuation\">,</span> Salary<span class=\"token operator\">=</span><span class=\"token number\">4000</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span> Name <span class=\"token operator\">=</span> <span class=\"token string\">\"Burgess\"</span><span class=\"token punctuation\">,</span> Posn <span class=\"token operator\">=</span> Position<span class=\"token punctuation\">.</span>Peasant<span class=\"token punctuation\">,</span> Salary<span class=\"token operator\">=</span><span class=\"token number\">3800</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Bog standard hierarchy in any company. My aim now was to get a total of the salaries grouped by the available positions. The new capabilities indeed allow to quickly express such a thing, albeit I suppose I am becoming a lambda fan, since that was my first result:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">Person<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> pees <span class=\"token operator\">=</span> Person<span class=\"token punctuation\">.</span><span class=\"token function\">CreatePeopleList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> salaryDistribution <span class=\"token operator\">=</span>\npees<span class=\"token punctuation\">.</span><span class=\"token function\">GroupBy</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">=</span><span class=\"token operator\">></span> p<span class=\"token punctuation\">.</span>Posn<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">Select</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">group</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> \n            <span class=\"token keyword\">new</span> <span class=\"token punctuation\">{</span> \n              Position <span class=\"token operator\">=</span> <span class=\"token keyword\">group</span><span class=\"token punctuation\">.</span>Key<span class=\"token punctuation\">,</span> \n              TotalSalary <span class=\"token operator\">=</span> <span class=\"token keyword\">group</span><span class=\"token punctuation\">.</span><span class=\"token function\">Sum</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">=</span><span class=\"token operator\">></span> p<span class=\"token punctuation\">.</span>Salary<span class=\"token punctuation\">)</span> \n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nsalaryDistribution<span class=\"token punctuation\">.</span><span class=\"token function\">ToList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">ForEach</span><span class=\"token punctuation\">(</span>entry <span class=\"token operator\">=</span><span class=\"token operator\">></span> \n             Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Position {0} earns {1} bucks\"</span><span class=\"token punctuation\">,</span>entry<span class=\"token punctuation\">.</span>Position<span class=\"token punctuation\">,</span>entry<span class=\"token punctuation\">.</span>TotalSalary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Those funny <strong>Select()</strong> and <strong>GroupBy()</strong> all come from the <strong>System.Linq</strong> namespace and are extension methods to your well-known IEnumerable&#x3C;> interface. In other words, all arrays, collections, etc. can benefit from LINQ functionality.</p>\n<p>First question: Is the code understandable? I hope so. In this specific case </p>\n<ul>\n<li><strong>GroupBy()</strong> returns an Enumerable of Type <code class=\"language-text\">IGrouping&lt;Position,Person&gt;</code>.</li>\n<li>This thing has a Key and can again in turn be enumerated, here it results in returning all Persons grouped under that key.</li>\n<li>In other words, I can now apply the <strong>Select()</strong>. This one is quite similar to a <code class=\"language-text\">IEnumerable -&gt; IEnumerable</code>mapping.</li>\n<li>The Select on the group by then returns the <code class=\"language-text\">IGrouping&lt;Position,Person&gt;</code> objects from which the key (Person's Position) can be extracted.</li>\n<li>Since it is in itself also enumerable we can now use the <strong>Sum()</strong> method (also a new LINQ method) which will generate a sum over all provided elements.</li>\n<li>From all this stuff I finally generate an anonymous type containing the position and the sum of salaries under that position.</li>\n</ul>\n<p>So far, so nice. I spared myself of writing the same code with C#2.0 capabilities, but I would expect it to be roughly  5-8 lines more. We don't really need funny keywords to get the power of LINQ, ...[snip]</p>\n<h2>Update from 29.04.07 - The following lines lead to wrong conclusions. For a better picture read the <a href=\"/2007/04/29/trying-to-linq-it-all-together-pt-i-epilogue\">next post</a></h2>\n<p>In fact in this case a bug stopped me in my attempt to express this query with the available keywords select, group, etc.</p>\n<p>That is as far as I got:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var salarySums =\n  from p in pees\n  group p by p.Posn into groups\n  from grp in groups\n  select grp.Key;</code></pre></div>\n<p>The error you'll get:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&#39;Popular.Person&#39; does not contain a definition for &#39;Key&#39; and no extension method &#39;Key&#39; accepting a first argument of type &#39;Popular.Person&#39; could be found \n(are you missing a using directive or an assembly reference?)</code></pre></div>\n<p>Oops, did I miss something? Heck, no, you would expect groups to be an IEnumerable containing <code class=\"language-text\">IGrouping&lt;Position,Person&gt;</code>, just like what I did with the lambdas further up. That is in fact what the current documentation also expects and when I copy the doc's group by example into my source code it fails by the same reason: The compiler thinks that groups is an IEnumerable containing...Persons. This is plain wrong and I will see if I get it to Microsoft somehow, if it hasn't already happened.</p>\n<p>To sum it up for today: I think the LINQ methods are very practical but I have the feeling that I will favour the lambda-based usage over the keyword-based one. In this case the keyword-based query would have gotten pretty convoluted. Time will tell what is more readable / maintainable/ powerful!</p>","fields":{"slug":"/2007/04/25/trying-to-linq-it-all-together-pt-i"},"frontmatter":{"date":"April 25, 2007","path":null,"title":"Trying to LINQ it all together (Pt. I)","tags":["software-development","dotnet","libs-and-frameworks"]}}},"pageContext":{"title":"Trying to LINQ it all together (Pt. I)","previous":{"fields":{"slug":"/2007/04/12/cellular-life"},"frontmatter":{"title":"Cellular life","tags":["biology"],"date":"2007/04/12"}},"next":{"fields":{"slug":"/2007/04/29/trying-to-linq-it-all-together-pt-i-epilogue"},"frontmatter":{"title":"Trying to LINQ it all together (Pt. I) - Epilogue","tags":["software-development","dotnet","libs-and-frameworks"],"date":"2007/04/29"}}}}
{"data":{"markdownRemark":{"html":"<p>MemBus finally got the maintenance it deserves.\nWhat's new?</p>\n<h2>Portable Class Library</h2>\n<p>The latest incarnation of MemBus requires .NET 4.5 to run. It targets a Pcl profile for standard Windows and Windows Store profile. Expect the WP8 to also be targetted in a future minor release. The only thing stopping me for now is the missing <strong>ConcurrentDictionary</strong> - I will need a replacement for that. There are some <a href=\"http://stackoverflow.com/questions/18367839/alternative-to-concurrentdictionary-for-portable-class-library\">promising leads</a>, but I need a proper testbed to see what performance impact a switch in that area of the code has.</p>\n<p>To people sticking to previous versions of the .NET framework I am afraid that things will just stay as they were pre-V3.</p>\n<h2>New publishing features.</h2>\n<p>The <strong>IPublisher</strong> interface now provides additional publishing capabilities via</p>\n<ul>\n<li>An Observable - MemBus will start consuming the observable and feeding the resulting messages into its infrastructure.</li>\n<li>In an awaitable fashion. Here, configuration of how to process certain messages is short-circuited such that the awaitable pattern works as expected, i.e. the <em>continuation</em> will be called once all subscriptions have processed the message that was sent.</li>\n</ul>\n<h2>FlexibleSubscriptionAdapter</h2>\n<p>All possibilities to configure method registration has been merged into a single <em>\"RegisterMethods\"</em> call. This is because the signature of the method sufficiently defines what you want to happen. Allowed are the following method signatures...</p>\n<ul>\n<li>T Method(Z msg): This method receives messages and can send one out as a reaction. If the return value implements IEnumerable it will be enumerated and all messages will be put onto the bus.</li>\n<li>void Method(Z msg): Just accepts messages.</li>\n<li>void Method(IObservable&#x3C;T> msgs) : Get an observable from MemBus much like you would call <em>Observe</em> on the Bus.</li>\n<li>IObservable&#x3C;Z> Method(IObservable&#x3C;T> msgs): Return an Observable after accepting one from MemBus. This is ideal to set up some transformations, e.g. with the set of methods provided by the Rx libraries.</li>\n<li>IObservable&#x3C;Z> Method() : Provide observables to MemBus, much like calling Publish with an observable. Ideal to set up message sources with MemBus, e.g. a Timer.</li>\n</ul>\n<p>I hope you'll enjoy the new capabilities. Next on the roadmap is, as mentioned, the WP8 profile and then some investigations how well MemBus plays together with <a href=\"https://github.com/reactiveui/ReactiveUI\">ReactiveUI</a></p>","fields":{"slug":"/2013/12/25/membus-3-0"},"frontmatter":{"date":"December 25, 2013","path":null,"title":"MemBus 3.0","tags":["own-software","membus"]}}},"pageContext":{"title":"MemBus 3.0","previous":{"fields":{"slug":"/2013/12/10/c-6-language-features-5-cents"},"frontmatter":{"title":"C# 6 language features? 5 cents.","tags":["csharp"],"date":"2013/12/10"}},"next":{"fields":{"slug":"/2013/12/27/get-periodic-messages-into-membus"},"frontmatter":{"title":"Get periodic messages into MemBus","tags":["own-software","membus"],"date":"2013/12/27"}}}}
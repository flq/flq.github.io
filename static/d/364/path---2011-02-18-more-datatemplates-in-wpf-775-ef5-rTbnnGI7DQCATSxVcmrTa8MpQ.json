{"data":{"markdownRemark":{"html":"<p>Imagine you want to fill a toolbar through its ItemsSource and appropriate DataTemplates and not all commands are created equal. Some commands should be shown as Buttons, or ToggleButtons or whatever Visual tree you may come up with. In such a situation you can use a DataTemplateSelector. How to implement one (not exceedingly complicated) is <a href=\"http://www.switchonthecode.com/tutorials/wpf-tutorial-how-to-use-a-datatemplateselector\">described here</a>. Alas, it requires you to leave the realms of XAML. One idea is then to have a XAML-friendly template selector. The idea isnâ€™t new, one implementation <a href=\"http://zhebrun.blogspot.com/2008/09/are-you-tired-to-create.html\">can be found here</a>. However I wanted something even simpler: A XAML-based template selector that is only driven by the DataType specified on the template. The API shown makes it possible to have the XAML look like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ToolBar</span> <span class=\"token attr-name\">ItemsSource</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>{Binding Path=Control.Commands}<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ToolBar.ItemTemplateSelector</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">local:</span>DataTemplateChoice</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>DataTemplate</span> <span class=\"token attr-name\">DataType</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>{x:Type cmd:CommandA}<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Button</span> <span class=\"token attr-name\">Height</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>30<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Width</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>30<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Command</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>{Binding Command}<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Image</span> <span class=\"token attr-name\">Source</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>{Binding SymbolResourceName, \n                        Converter={StaticResource imgConv}}<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Button</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>DataTemplate</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>DataTemplate</span> <span class=\"token attr-name\">DataType</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>{x:Type cmd:CommandB}<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ToggleButton</span> <span class=\"token attr-name\">Height</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>30<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Width</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>30<span class=\"token punctuation\">\"</span></span> \n                                <span class=\"token attr-name\">Command</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>{Binding Command}<span class=\"token punctuation\">\"</span></span> \n                                <span class=\"token attr-name\">IsChecked</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>{Binding IsActive, Mode=OneWayToSource}<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Image</span> <span class=\"token attr-name\">Source</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>{Binding SymbolResourceName, \n                        Converter={StaticResource imgConv}}<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ToggleButton</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>DataTemplate</span><span class=\"token punctuation\">></span></span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>StaticResourceExtension</span> <span class=\"token attr-name\">ResourceKey</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>BasicCommandInfoDisplay<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token namespace\">local:</span>DataTemplateChoice</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ToolBar.ItemTemplateSelector</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ToolBar</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>The DataTemplateChoice is a container for an unlimited number of DataTemplates. The implementation is rather simple:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token punctuation\">[</span><span class=\"token class-name\">ContentProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Templates\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DataTemplateChoice</span> <span class=\"token punctuation\">:</span> <span class=\"token class-name\">DataTemplateSelector</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">DataTemplateChoice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        Templates <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DataTemplates</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">DataTemplates</span> Templates <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">private</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token class-name\">DataTemplate</span> <span class=\"token function\">SelectTemplate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">object</span> item<span class=\"token punctuation\">,</span> <span class=\"token class-name\">DependencyObject</span> container<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> dt <span class=\"token operator\">=</span> Templates<span class=\"token punctuation\">.</span><span class=\"token function\">GetMatchFor</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span><span class=\"token function\">GetType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> dt <span class=\"token operator\">?</span><span class=\"token operator\">?</span> <span class=\"token keyword\">base</span><span class=\"token punctuation\">.</span><span class=\"token function\">SelectTemplate</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">,</span> container<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Rather important for comfort is the specification of the <em>ContentPropertyAttribute</em>. That way the XAML compiler knows which property to target per default, thereby allowing to write straight into the <em>DataTemplateChoice</em> and ensuring that the content ends up in the <em>Templates</em> property.</p>\n<p>Finally we need the <em>DataTemplates</em> class, which is pretty much just a list with a method to pick out a <em>DataTemplate</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DataTemplates</span> <span class=\"token punctuation\">:</span> <span class=\"token class-name\">List</span><span class=\"token operator\">&lt;</span>DataTemplate<span class=\"token operator\">></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">internal</span> <span class=\"token class-name\">DataTemplate</span> <span class=\"token function\">GetMatchFor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Type</span> objectType<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> dataTemplate <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">FirstOrDefault</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token function\">MatchViaDataType</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span> objectType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> dataTemplate<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">bool</span> <span class=\"token function\">MatchViaDataType</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DataTemplate</span> arg<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Type</span> objectType<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> type <span class=\"token operator\">=</span> arg<span class=\"token punctuation\">.</span><span class=\"token class-name\">DataType</span> <span class=\"token keyword\">as</span> Type<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> type <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;</span>amp<span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>amp<span class=\"token punctuation\">;</span> type<span class=\"token punctuation\">.</span><span class=\"token function\">IsAssignableFrom</span><span class=\"token punctuation\">(</span>objectType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>And thatâ€™s that! Make sure to specify the <em>DataType</em> on the DataTemplates you add. Via the StaticResourceExtension you can add DataTemplates specified elsewhere. The selection is similar to the catch blocks of a try: Move down from specific to more general. And finally, specifying an interface as DataType will work without problems due to usage of <em>IsAssignableFrom</em>.</p>\n<p><a href=\"http://dotnetshoutout.com/realfiction-More-DataTemplates-In-WPF\"><img src=\"http://dotnetshoutout.com/image.axd?url=http%3A%2F%2Frealfiction.net%2Fgo%2F198\" alt=\"Shout it\"></a></p>","fields":{"slug":"/2011/02/18/more-datatemplates-in-wpf"},"frontmatter":{"date":"February 18, 2011","path":null,"title":"More. DataTemplates. In. WPF.","tags":["dotnet","libs-and-frameworks","WPF"]}}},"pageContext":{"title":"More. DataTemplates. In. WPF.","previous":{"fields":{"slug":"/2011/02/14/coding-katas-â€“-improving-the-mechanics-of-coding"},"frontmatter":{"title":"Coding Katas â€“ Improving the mechanics of coding","tags":["software-development"],"date":"2011/02/14"}},"next":{"fields":{"slug":"/2011/02/27/thats-when-i-realized-my-incantation-of-the-automation-api-had-gone-wrong"},"frontmatter":{"title":"That's when I realized my incantation of the Automation API had gone wrong","tags":["dotnet","libs-and-frameworks"],"date":"2011/02/26"}}}}
{"data":{"markdownRemark":{"html":"<p>While Richard Bushnell was showing off how old problems can be <a href=\"http://richardbushnell.net/index.php/2008/01/18/using-linqpad-to-create-a-time-selector-drop-down-list/\">implemented very concise with LINQ</a> he also made use of an extension method to the int Type.</p>\n<p>It has been quite some time since I did an update to the <a href=\"/go/54\">.NET goodies</a>. In there there was an implementation to be able to iterate over the letters of the alphabet.</p>\n<p>Extension methods and LINQ allow the provision of a concise implementation that can be easily used to obtain character ranges over the alphabet.</p>\n<pre><code>static class CharStuff\n{\n    static char[] content =\n        new char[] {\n            'a','b','c','d','e','f','g',\n            'h','i','j','k','l','m',\n            'n','o','p','q','r','s',\n            't','u','v','w','x','y','z'\n        };\n\n    public static char[] To(this char start, char end)\n    {\n        char[] space = content;\n        char[] boundaries = new char[] { start, end };\n        if (start > end)\n        {\n            space = content.Reverse().ToArray();\n            // start, end = end, start; GRR, why not like in Ruby?\n            boundaries = boundaries.Reverse().ToArray();\n        }\n\n        var result = from c in space\n                     where c >= boundaries[0] &#x26;&#x26; c &#x3C;= boundaries[1]\n                     select c;\n        return result.ToArray();\n    }\n}\n</code></pre>\n<p>Most code deals with the ability to get an array with alphabet elements ordered backwards. I.e. you can use this extension like that:</p>\n<pre><code>Array.ForEach('f'.To('l'), Console.WriteLine);\nArray.ForEach('l'.To('a'), Console.WriteLine);\n</code></pre>\n<p>Far from being feature complete, all those examples just show that Microsoft is doing something right: We are writing less lines of code that are more readable in order to get things done.</p>","frontmatter":{"date":"January 19, 2008","path":null,"title":"Revisiting the Alphabet Range with the latest .NET","tags":["software-development","dotnet","libs-and-frameworks"]}}},"pageContext":{"title":"Revisiting the Alphabet Range with the latest .NET"}}
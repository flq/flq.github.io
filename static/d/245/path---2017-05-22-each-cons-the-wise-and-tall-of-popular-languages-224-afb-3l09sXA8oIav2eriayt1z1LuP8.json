{"data":{"markdownRemark":{"html":"<p>A few days ago, Michael Feathers tweeted this:</p>\n<blockquote class=\"twitter-tweet\" data-lang=\"en\"><p lang=\"en\" dir=\"ltr\">The fact that many simple correct Ruby programs become ridiculously complex when translated to other languages means something.</p>&mdash; Michael Feathers (@mfeathers) <a href=\"https://twitter.com/mfeathers/status/864122686695460866\">May 15, 2017</a></blockquote>\n<p>Now, I am not a complete <a href=\"/tags/ruby\">stranger to ruby</a>, which is why this statement resonated with me, and upon requesting an example, Michael came up with this:</p>\n<blockquote class=\"twitter-tweet\" data-conversation=\"none\" data-lang=\"en\"><p lang=\"en\" dir=\"ltr\"><a href=\"https://twitter.com/fquednau\">@fquednau</a> The simple ones are interesting. Try this in C#: ([0] + arr).each_cons(2).count {|x,y| x == 0 &amp;&amp; y == 1 }</p>&mdash; Michael Feathers (@mfeathers) <a href=\"https://twitter.com/mfeathers/status/864222881538072578\">May 15, 2017</a></blockquote>\n<p>or</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">each_cons</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>count <span class=\"token punctuation\">{</span><span class=\"token operator\">|</span>x<span class=\"token punctuation\">,</span>y<span class=\"token operator\">|</span> x <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> y <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p><a href=\"https://ruby-doc.org/core-2.1.0/Enumerable.html#method-i-each_cons\">each_cons</a> is a function that provides consecutive elements\nof a given list. E.g.\n<code class=\"language-text\">[0,1,2,3].each_cons(3).each { |x,y,z| puts &quot;#{x},#{y},#{z}&quot; }</code>\nIt can be useful for obtaining info about the local structure\nof a list. Think derivatives, rates of change, etc. and probably\na host of other things.</p>\n</blockquote>\n<p>This does indeed show off ruby's expresiveness quite nicely:</p>\n<ul>\n<li>A simple syntax to concatenate lists</li>\n<li>A rich set of libraries for manipulation of things (I am referring to the <em>each\\</em>cons_)</li>\n<li>The syntax of ruby's yields and blocks, which have been used so many times as the syntactical basis for DSLs</li>\n</ul>\n<p>The fact that the parameter influences how many items will be yielded into\nyour block reminds us why all of us like to write Javascript once in a while.</p>\n<p><strong>What about other languages then?</strong></p>\n<h2>F</h2>\n<p>Let's look at the code which performs (almost) the same job:</p>\n<div class=\"gatsby-highlight\" data-language=\"fsharp\"><pre class=\"language-fsharp\"><code class=\"language-fsharp\">seq <span class=\"token punctuation\">{</span> <span class=\"token keyword\">yield</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">yield!</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">.</span><span class=\"token number\">.4</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">|</span><span class=\"token operator\">></span> Seq<span class=\"token punctuation\">.</span>pairwise \n  <span class=\"token operator\">|</span><span class=\"token operator\">></span> Seq<span class=\"token punctuation\">.</span>filter <span class=\"token punctuation\">(</span><span class=\"token keyword\">fun</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> y <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n  <span class=\"token operator\">|</span><span class=\"token operator\">></span> Seq<span class=\"token punctuation\">.</span>length</code></pre></div>\n<p>It is pretty compact and readable, but even though some things look\nsimilar, they actually use completely different mechanics of the\nlanguage</p>\n<ul>\n<li>The first line is a <a href=\"https://docs.microsoft.com/en-us/dotnet/articles/fsharp/language-reference/sequences\">computational expression to generate sequences</a> which provides\nus with a pretty syntax for concatenating elements and lists of elements</li>\n<li>The <em>pairwise</em> is the closest we get to <em>each\\</em>cons_</li>\n<li>The <em>length</em> does not have a version where we can provide a filter condition, so we\nneed to specify the filter beforehand.</li>\n<li>The <em>pairwise</em> method provides a tuple which is then pattern matched into two arguments in the\nlambda to <em>filter</em>.</li>\n</ul>\n<p>Of note is that <em>pairwise</em> will provide exactly 2 consecutive elements of a list, it\ndoes not allow a parameter like the ruby version. This makes sense, since F# is statically typed.\nIf you wanted a version that provides 3 consecutive elements, you would have to write a method\nyourself that yields an element of type <strong>(a,a,a)</strong>.</p>\n<h2>C</h2>\n<p>To actually achieve the same level of expressiveness we need to put some work into this:</p>\n<p><img src=\"/assets/csharp_cons.jpg\"></p>\n<p>With those two additional extension methods we can now write</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token number\">0.</span><span class=\"token function\">ToEnumerable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Concat</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Windowed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Count</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">=</span><span class=\"token operator\">></span> t<span class=\"token punctuation\">.</span>x <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> t<span class=\"token punctuation\">.</span>y <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>While tuples are now available in c#, you cannot deconstruct them like you can do in most other\nfunctional languages or even in ES2016\n(which has actually gone to great lengths to make deconstruction a dependable feature).</p>\n<p>While I can kind of forgive a missing <em>each\\</em>cons<em>-like BCL method, I write the _ToEnumerable</em> again in almost every project. I mean, that method is the damned <a href=\"https://en.wikipedia.org/wiki/Monad_(functional_programming)#Overview\">unary return operation</a>!</p>\n<h2>Kotlin</h2>\n<p>Xavier Lepaul chimed in with a view on what Kotlin is up to with respect to the challenge:</p>\n<blockquote class=\"twitter-tweet\" data-conversation=\"none\" data-lang=\"en\"><p lang=\"en\" dir=\"ltr\"><a href=\"https://twitter.com/mfeathers\">@mfeathers</a> <a href=\"https://twitter.com/fquednau\">@fquednau</a> Kotlin is almost there (with <a href=\"https://t.co/b2TpoX5LqA\">https://t.co/b2TpoX5LqA</a>)<br>(listOf(0) + arr).windowed(2).count {(x,y) -&gt; x == 0 &amp;&amp; y == 1}</p>&mdash; Xavier Lepaul (@xlepaul) <a href=\"https://twitter.com/xlepaul/status/864404258476752896\">May 16, 2017</a></blockquote>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token punctuation\">(</span><span class=\"token function\">listOf</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">windowed</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">count</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> x <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> y <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>This doesn't fall very short of the ruby example, however, the <em>windowed</em> is not available yet in\nKotlin 1.1 - What I particularly liked is that even though the type signature of <em>windowed</em> is</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> Iterable<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token punctuation\">.</span><span class=\"token function\">windowed</span><span class=\"token punctuation\">(</span>size<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span> step<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> List<span class=\"token operator\">&lt;</span>List<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token operator\">></span></code></pre></div>\n<p>i.e. returning a list of lists, one can still deconstruct the list into the x and y you can\nsee in the lambda provided to <em>count</em>. This works because the deconstruction in kotlin simply\nstarts working when the deconstructed object provides methods named <em>component1</em> down to\n<em>componentN</em>. A quick look at Kotlin's list type...</p>\n<p><img src=\"/assets/kotlin_destructure.png\"></p>\n<p>Kudos to the Kotlin team which make a language that feels functional with strategies that are\nvery different to a \"real\" functional language. I have been an outsider to the JVM most of my\ntime, but when you get to know Java and Kotlin I really cannot fathom what exactly would make you\nstick to Java.</p>\n<h2>Type safety vs elegance?</h2>\n<p>In order for ruby and Kotlin to shine in this example, both pay up by allowing misunderstandings\nin API use to surface only at runtime. Note that in both languages the compiler will happily allow\nyou to capture more or less output than <em>each\\</em>cons<em>/</em>windowed_ actually provides. This seems to be\nthe price you need to pay for such an API, since the output <em>\"type\"</em> is determined by the argument to the windowing function. Now if there was a language where types\ncould be determined programmatically...</p>\n<h2>Idris</h2>\n<p><a href=\"http://docs.idris-lang.org\">Idris</a> is a programming language which is close in spirit to Haskell but adds the capability\nto define <em>dependent types</em>. </p>\n<blockquote>\n<p>Disclaimer: I have never worked with Idris before, I just had the vague idea that dependent\ntypes could be what I was looking for in this moment. Most of the things in Idris continue\nto be outside my grasp. Many, many thanks go out to <strong>Anton Trunov</strong> who\n<a href=\"http://stackoverflow.com/questions/44078891/how-do-i-evaluate-this-recursive-function-in-idris-interactive\">answered</a> my stackoverflow <a href=\"http://stackoverflow.com/questions/44079181/idris-vect-fromlist-usage-with-generated-list\">questions</a>.</p>\n</blockquote>\n<p>In this language, we can define the following type signature for a method:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">window</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">n</span> <span class=\"token operator\">:</span> <span class=\"token constant\">Nat</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token constant\">List</span> <span class=\"token hvariable\">a</span> <span class=\"token operator\">-></span> <span class=\"token constant\">List</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">Vect</span> <span class=\"token hvariable\">n</span> <span class=\"token hvariable\">a</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>This describes a method that takes a natural number <strong>n</strong>,\nand a list containing things with type <strong>a</strong> and then returns a list containing vectors of length <strong>n</strong>. <strong>n</strong> has now become part of the type definition for <strong>Vect</strong>. With much help\n(I couldn't see how to make the leap from the variable length <strong>List a</strong> to the type <strong>Vect n a</strong>),\nthis is then one possible implementation of <em>windowed</em> in Idris: </p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">total</span>\n<span class=\"token hvariable\">takeExact</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">n</span> <span class=\"token operator\">:</span> <span class=\"token constant\">Nat</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">xs</span> <span class=\"token operator\">:</span> <span class=\"token constant\">List</span> <span class=\"token hvariable\">a</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Maybe</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">Vect</span> <span class=\"token hvariable\">n</span> <span class=\"token hvariable\">a</span><span class=\"token punctuation\">)</span>\n<span class=\"token hvariable\">takeExact</span> <span class=\"token constant\">Z</span> <span class=\"token hvariable\">xs</span> <span class=\"token operator\">=</span> <span class=\"token constant\">Just</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token hvariable\">takeExact</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">S</span> <span class=\"token hvariable\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token constant\">Nothing</span>\n<span class=\"token hvariable\">takeExact</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">S</span> <span class=\"token hvariable\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">x</span> <span class=\"token operator\">::</span> <span class=\"token hvariable\">xs</span><span class=\"token punctuation\">)</span> <span class=\"token hvariable\">with</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">takeExact</span> <span class=\"token hvariable\">n</span> <span class=\"token hvariable\">xs</span><span class=\"token punctuation\">)</span>\n  <span class=\"token hvariable\">takeExact</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">S</span> <span class=\"token hvariable\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">x</span> <span class=\"token operator\">::</span> <span class=\"token hvariable\">xs</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> <span class=\"token constant\">Nothing</span> <span class=\"token operator\">=</span> <span class=\"token constant\">Nothing</span>\n  <span class=\"token hvariable\">takeExact</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">S</span> <span class=\"token hvariable\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">x</span> <span class=\"token operator\">::</span> <span class=\"token hvariable\">xs</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">Just</span> <span class=\"token hvariable\">v</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token constant\">Just</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">x</span> <span class=\"token operator\">::</span> <span class=\"token hvariable\">v</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token hvariable\">total</span>\n<span class=\"token hvariable\">window</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">n</span> <span class=\"token operator\">:</span> <span class=\"token constant\">Nat</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token constant\">List</span> <span class=\"token hvariable\">a</span> <span class=\"token operator\">-></span> <span class=\"token constant\">List</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">Vect</span> <span class=\"token hvariable\">n</span> <span class=\"token hvariable\">a</span><span class=\"token punctuation\">)</span>\n<span class=\"token hvariable\">window</span> <span class=\"token hvariable\">n</span> <span class=\"token hvariable\">xs</span> <span class=\"token hvariable\">with</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">takeExact</span> <span class=\"token hvariable\">n</span> <span class=\"token hvariable\">xs</span><span class=\"token punctuation\">)</span>\n  <span class=\"token hvariable\">window</span> <span class=\"token hvariable\">n</span> <span class=\"token hvariable\">xs</span> <span class=\"token operator\">|</span> <span class=\"token constant\">Nothing</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token hvariable\">window</span> <span class=\"token hvariable\">n</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">Just</span> <span class=\"token hvariable\">ys</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token hvariable\">window</span> <span class=\"token hvariable\">n</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">x</span> <span class=\"token operator\">::</span> <span class=\"token hvariable\">xs</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">Just</span> <span class=\"token hvariable\">ys</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">ys</span> <span class=\"token operator\">::</span> <span class=\"token hvariable\">window</span> <span class=\"token hvariable\">n</span> <span class=\"token hvariable\">xs</span></code></pre></div>\n<blockquote>\n<p><em>total</em> tells the Idris compiler to check the method whether it is indeed total as far as\nIdris is capable to tell. Total means that this method is guaranteed to return for whatever\ninput that is provided. <strong>Z</strong> and <strong>S</strong> are types representing <strong>Zero</strong>\nand <strong>Successor</strong> within the Natural number type.</p>\n</blockquote>\n<p>Now we can use the window function to write down the example provided.</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token comment\">--with</span>\n<span class=\"token hvariable\">condition</span> <span class=\"token operator\">:</span> <span class=\"token constant\">Vect</span> <span class=\"token number\">2</span> <span class=\"token constant\">Integer</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Bool</span>\n<span class=\"token hvariable\">condition</span> <span class=\"token punctuation\">[</span><span class=\"token hvariable\">x</span><span class=\"token punctuation\">,</span><span class=\"token hvariable\">y</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">x</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token hvariable\">y</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span>\n\n<span class=\"token operator\">*</span><span class=\"token hvariable\">hello</span><span class=\"token operator\">></span> <span class=\"token builtin\">length</span> <span class=\"token operator\">$</span> <span class=\"token builtin\">filter</span> <span class=\"token hvariable\">condition</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">window</span> <span class=\"token number\">2</span> <span class=\"token operator\">$</span> <span class=\"token number\">0</span><span class=\"token operator\">::</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token number\">1</span> <span class=\"token operator\">:</span> <span class=\"token constant\">Nat</span></code></pre></div>\n<p>It is also pretty compact, with the <em>little</em> difference that the filter function provided must\ndeconstruct a Vector of type <strong>Vect 2 Integer</strong>, based on the arguments to the <em>window</em> function. That is, in your function you are forced to take the vector as a whole or deconstruct to exactly\nthe right size that is provided.</p>\n<p>Why is all this interesting? Because it is sometimes plain <em>fun</em> to compare different programming\nlanguages. They present to you different ways of thinking, different ways to express your intentions. One common theme is that conciseness comes when you get close to functional programming idioms. Also, before this post I didn't think that you could actually expand upon the\nHaskell type system, but you can. Alas, we also have to recognize the great popularity of languages like ruby. Reasoning with types requires much practice, but help you squash bugs before you even get to the runtime. Languages like javascript and ruby reward you quickly when you get your act together, but depend on decent documentation to get API usage right.</p>\n<p>Hence, ruby is indeed expressive, but quite a few popular languages have learned to recreate that expressiveness with the possibilities that their respective runtimes provide.</p>","fields":{"slug":"/2017/05/22/each_cons-the-wise-and-tall-of-popular-languages"},"frontmatter":{"date":"May 22, 2017","path":null,"title":"each_cons - the wise and tall of popular languages","tags":["programming","ruby","csharp","fsharp","haskell"]}}},"pageContext":{"title":"each_cons - the wise and tall of popular languages","previous":{"fields":{"slug":"/2017/05/15/rant-on-the-importance-of-education"},"frontmatter":{"title":"Rant on the importance of education","tags":["loosely-coupled"],"date":"2017/05/15"}},"next":{"fields":{"slug":"/2017/06/24/eleven-year-old-svg-engine-reposted"},"frontmatter":{"title":"eleven year old svg engine, reposted","tags":["programming","web"],"date":"2017/06/24"}}}}
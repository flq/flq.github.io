{"data":{"markdownRemark":{"html":"<p>The amazing thing about Typescript's type system is not really that it strives to be the most complete type system, or the most formal, but in that in its pursue to be able to type all the things that lovers &#x26; haters of javascript do with the language, it explores new avenues and possibilities. This post looks at a use case for a fairly recent addition, <strong>conditional types</strong>.</p>\n<p>But before we get there, bask in the glory of this nifty type (I saw it first in the typing for <a href=\"https://github.com/reduxjs/redux/blob/619507a0fa46e6b90c5fca26eaf409c38a078faf/index.d.ts#L208\">redux</a>).</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> DeepPartial<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">K</span> <span class=\"token keyword\">in</span> keyof <span class=\"token constant\">T</span><span class=\"token punctuation\">]</span><span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> DeepPartial<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token constant\">K</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>What does it do? - Given some type, it recursively turns itself and all of its properties as optional (remember that the in-built <code class=\"language-text\">Partial&lt;T&gt;</code> does it flat on T).</p>\n<p>You donÂ´t have to remember that. It has no relevance to what follows. It's <em>just</em> a cool and useful type that shows off all the parts that Typescript has learned in the past year or so.</p>\n<hr>\n<p>Right. <a href=\"http://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-8.html\">Conditional Types</a>. To me it always helps to have some example. This one also involves some react. Sorry. </p>\n<p>Imagine some <strong>UI component</strong> which you can use in either of two ways.</p>\n<ul>\n<li>I give it a list of items which contain links and the component renders the links in some useful and pretty fashion</li>\n<li>I give it a list of items which contain actions (functions to be invoked when some button is clicked), and now the component is to render buttons with the click triggering those actions.</li>\n</ul>\n<p>Note that the two item types are mutually exclusive. I either want it to render links, or buttons. Ideally I want Typescript to guide me so that I'm filling in the details correctly.</p>\n<p>Let's encode the two types of functionality:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> ActionableItemType <span class=\"token operator\">=</span> <span class=\"token string\">\"action\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"link\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>and the two kinds of items that I want to support:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">ActionItem</span> <span class=\"token punctuation\">{</span>\n  label<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  action<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">LinkItem</span> <span class=\"token punctuation\">{</span>\n  label<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  link<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now we are already ready to define our <strong>conditional type</strong> ðŸŽ‰ !</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> ActionableItem<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ActionableItemType</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> \n  <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token string\">\"action\"</span> \n  <span class=\"token operator\">?</span> ActionItem\n  <span class=\"token punctuation\">:</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token string\">\"link\"</span> \n  <span class=\"token operator\">?</span> LinkItem \n  <span class=\"token punctuation\">:</span> never<span class=\"token punctuation\">;</span></code></pre></div>\n<p>what it says is that given some Type <strong>T</strong>, when T extends the type <strong>\"action\"</strong>, <strong>ActionableItem</strong> is now an <strong>ActionItem</strong>, otherwise if <strong>T</strong> is <strong>\"link\"</strong>, <strong>ActionableItem</strong> is <strong>LinkItem</strong>. To complete the type, we use the <strong>never-Type</strong>, which is exactly for such cases where you want to use a Type that no instance can have.</p>\n<p>We are now armed to implement a react component that takes advantage of this typing, starting with defining the properties of the component.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">ActionableItemComponentProps</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ActionableItemType</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  items<span class=\"token punctuation\">:</span> <span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span>ActionableItem<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">>></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>And the component itself</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ActionableItemComponent</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ActionableItemType</span><span class=\"token operator\">></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span><span class=\"token operator\">&lt;</span>\n  ActionableItemComponentProps<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span>\n<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ... impl to come</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The component itself is now generic, that is when we work with the items passed in we don't know if these are action or link items (remember the runtime is javascript, so all your type info is pretty much erased at runtime). To get back typings you will make use of <strong><a href=\"http://www.typescriptlang.org/docs/handbook/advanced-types.html\">type guards</a></strong>, a runtime check that gives your code safe areas where you may assume that something is indeed of the type you expect. Here are the two type guards that I will use in the <code class=\"language-text\">render</code>-code</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">isActionsArray</span><span class=\"token punctuation\">(</span>items<span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> items is ActionItem<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> items<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> items<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>action<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">isItemsArray</span><span class=\"token punctuation\">(</span>items<span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> items is LinkItem<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> items<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> items<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>link<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>You can see that I only check the first item of some array to check whether I have action or link types. The underlying assumption is that the call site is <strong>also written in TypeScript</strong>. You will see that the compile time check will ensure that all items must adhere to the same type.</p>\n<p>Now we are ready to implement a render function for the <code class=\"language-text\">ActionableItemComponent</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> items <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>Container<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token function\">isActionsArray</span><span class=\"token punctuation\">(</span>items<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">renderActionItems</span><span class=\"token punctuation\">(</span>items<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n        <span class=\"token punctuation\">(</span><span class=\"token function\">isItemsArray</span><span class=\"token punctuation\">(</span>items<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">renderLinkItems</span><span class=\"token punctuation\">(</span>items<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Container<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The implementation of <code class=\"language-text\">renderActionItems</code> and <code class=\"language-text\">renderLinkItems</code> is left to the reader (No, it's not, you can actually <a href=\"https://github.com/flq/ts-react-playground/blob/ac41d388a3746f66f63dd215d65801cac9ceaaaf/src/examples/ActionableItems.tsx#L37\">find it here</a>).</p>\n<p>The only thing left is to make the component readily available to users of the component (The generic in there means we can't use it easily straight away), so we provide two convenience types to have the two different styles of rendering actionable items:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> ActionItemsComponent <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> ActionableItemComponent<span class=\"token operator\">&lt;</span><span class=\"token string\">\"action\"</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> ActionItemsComponent <span class=\"token operator\">=</span> ActionableItemComponent <span class=\"token keyword\">as</span> ActionItemsComponent<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> LinkItemsComponent <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> ActionableItemComponent<span class=\"token operator\">&lt;</span><span class=\"token string\">\"link\"</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> LinkItemsComponent <span class=\"token operator\">=</span> ActionableItemComponent <span class=\"token keyword\">as</span> LinkItemsComponent<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Users of the component can now go ahead and use it as such:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> ActionItemsComponent<span class=\"token punctuation\">,</span> LinkItemsComponent <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./ActionableItems\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> UsingActions <span class=\"token punctuation\">:</span> React<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">SFC</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>ActionItemsComponent items<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>action<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hallelujah\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> label<span class=\"token punctuation\">:</span> <span class=\"token string\">\"alerted\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> UsingLinks <span class=\"token punctuation\">:</span> React<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">SFC</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>LinkItemsComponent items<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>link<span class=\"token punctuation\">:</span> <span class=\"token string\">\"/#whatever\"</span><span class=\"token punctuation\">,</span> label<span class=\"token punctuation\">:</span> <span class=\"token string\">\"whatever link\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Depending on either usage, the consumer gets nice type safety on how the items need to be structured, while the implementation can make use of the conditional type to provide a single implementation. </p>\n<p><em>Of course</em> there are many ways to encode such functionality, and if the two styles of rendering diverge a lot, you may be better off implementing two different components. Even so, I hope it helps you to consider in what ways conditional types can be useful to you.</p>","fields":{"slug":"/2018/06/10/typescript-type-shenanigans-conditional-types"},"frontmatter":{"date":"June 10, 2018","path":null,"title":"Typescript type shenanigans: Conditional Types","tags":["programming","typescript","react"]}}},"pageContext":{"title":"Typescript type shenanigans: Conditional Types","previous":{"fields":{"slug":"/2018/03/25/mob-programming-first-impressions"},"frontmatter":{"title":"Mob Programming - first impressions","tags":["software-development"],"date":"2018/03/25"}},"next":{"fields":{"slug":"/2018/06/24/primitive-confusion"},"frontmatter":{"title":"Primitive Confusion","tags":["programming","fsharp","csharp"],"date":"2018/06/23"}}}}
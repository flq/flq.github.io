{"data":{"markdownRemark":{"html":"<p>In the previous post introducing MemBus v3 I mentioned that I removed a project in the solution that contained code to help setting up the creation of periodic messages - once I probed the Rx-codebase a little more I found that there is support to set up Observables that create output periodically - so here's a (very) short post on how you combine that with MemBus.\nFirst, go forth and make yourself a bus - don't forget to setup the flexible subscribe adapter. The provided lambda returns true for all method candidates (<em>I realize that this screams for an overload</em>).</p>\n<div class=\"gatsby-highlight\" data-language=\"c#\"><pre class=\"language-c#\"><code class=\"language-c#\">readonly IBus _bus = BusSetup\n    .StartWith&lt;Conservative&gt;()\n    .Apply&lt;FlexibleSubscribeAdapter&gt;(cfg =&gt; cfg.RegisterMethods(info =&gt; true))\n    .Construct();</code></pre></div>\n<p>As an example, let's have a class that provides timers for our application - the example shown sends out a <strong>MessageA</strong> instance 5 times every 100 milliseconds on the <em>Default Scheduler</em> (according to documentation the most appropriate strategy on the targetted system that does not block the current thread).</p>\n<div class=\"gatsby-highlight\" data-language=\"c#\"><pre class=\"language-c#\"><code class=\"language-c#\">private class Timers\n{\n    public IObservable&lt;MessageA&gt; ASignal()\n    {\n        return Observable\n        .Timer(TimeSpan.FromMilliseconds(10), TimeSpan.FromMilliseconds(100), Scheduler.Default)\n        .Take(5)\n        .Select(_ =&gt; new MessageA());\n    } \n}</code></pre></div>\n<p>Providing the observable to MemBus is as easy as saying...</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">_bus.Subscribe(new Timers());</code></pre></div>\n<p>and obtaining the messages could look like</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">using (_bus.Subscribe((MessageA _) =&gt; cd.Signal()))\n{\n\t// Blabla\n}</code></pre></div>\n<p>I agree that this hardly merits a post, yet sometimes it's nice to see that something is as easy as eating an oven pizza.</p>","frontmatter":{"date":"December 27, 2013","path":null,"title":"Get periodic messages into MemBus","tags":["own-software","membus"]}}},"pageContext":{"title":"Get periodic messages into MemBus","previous":{"fields":{"slug":"/2013/12/25/membus-3-0"},"frontmatter":{"title":"MemBus 3.0","tags":["own-software","membus"],"date":"2013/12/25"}},"next":{"fields":{"slug":"/2014/02/22/fixie-and-resharper-smooth-sailing-on-the-agenda"},"frontmatter":{"title":"fixie and resharper, smooth sailing on the Agenda.","tags":["dotnet","programming"],"date":"2014/02/22"}}}}
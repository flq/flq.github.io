{"data":{"markdownRemark":{"html":"<p>I found this at Microsoft's research downloads: <a href=\"http://research.microsoft.com/specsharp/\">Spec#</a> is an extension to the c# programming language and brings multiple ways of adding explicit constraints to what is essentially the data your c# program works upon. One nice example from the <a href=\"http://research.microsoft.com/specsharp/papers/krml136.pdf\">overview[pdf]</a> presented there:</p>\n<pre>\nclass ArrayList {\n  public virtual void Insert(intindex,object value)\n    requires 0 <= index && index <= Count;\n    requires !IsReadOnly &&!IsFixedSize;\n    ensures Count == old(Count)+1;\n  { ... }\n</pre>\n<p>Means that some preconditions are required: index is bigger than 0 and smaller than the current value of Count. Furthermore the fields IsReadonly and IsFixedSize should be false. The postcondition of the call is that the count field should have increased by 1.</p>\n<p>This is just one of the features available. Those who like constraining their objects with pre- and post conditions (values and exceptions), more specific avoidance of null references and ways to state invariants should have fun with this (Does this include me? I s'ppose it depends on the project!)</p>","fields":{"slug":"/2006/07/01/spec-constraining-the-domain-your-c-program-operates-upon"},"frontmatter":{"date":"July 01, 2006","path":null,"title":"Spec# - Constraining the domain your c# program operates upon","tags":["software-development","dotnet"]}}},"pageContext":{"title":"Spec# - Constraining the domain your c# program operates upon","previous":{"fields":{"slug":"/2006/06/29/having-a-laugh-at-myself"},"frontmatter":{"title":"Having a laugh at myself...","tags":["software-development","javascript"],"date":"2006/06/29"}},"next":{"fields":{"slug":"/2006/07/02/realfiction-goodies-net-stuff-you-may-like-to-use"},"frontmatter":{"title":"Realfiction Goodies - .NET Stuff you may like to use","tags":["software-development","download","dotnet"],"date":"2006/07/02"}}}}
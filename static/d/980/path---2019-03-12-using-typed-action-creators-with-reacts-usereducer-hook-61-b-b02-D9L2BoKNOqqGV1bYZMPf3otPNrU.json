{"data":{"markdownRemark":{"html":"<p>With the advent of react hooks we now have very fast access to CQRS in our UI - dispatch actions (<em>Command</em>) and create a new UI state from the old state and the action (The <em>Query</em> is the reading from the state-part). If you follow e.g. Dan Abramov on twitter you will have seen plenty of examples à la:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token operator\">...</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useReducer</span><span class=\"token punctuation\">(</span>reducerFunction<span class=\"token punctuation\">,</span> initialState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>type<span class=\"token punctuation\">:</span> <span class=\"token string\">\"DoSomething\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>state<span class=\"token punctuation\">.</span>resultFromDoingSomething<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n<span class=\"token operator\">...</span></code></pre></div>\n<p>In the world of Typescript we can provide quite a bit of type safety around dispatching actions and defining reducers for those functions. These libraries are usually served in conjunction with <a href=\"https://redux.js.org/\">redux</a>, but since the dispatch and the reducer function are really the same thing™, such libraries that help defining action creators and reducers should work with useReducer, too, right?</p>\n<p>Personally I know of two libraries that fit the bill, <a href=\"https://www.npmjs.com/package/typesafe-actions\">typesafe-actions</a> and <a href=\"https://www.npmjs.com/package/unionize\">unionize</a>. For the example I'll go with the canonical react app, the counter :)</p>\n<h2>Action creators</h2>\n<p>Let's define the action creators, state we will be maintaining for <strong>typesafe-actions</strong>:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>\n  createAction<span class=\"token punctuation\">,</span>\n  getType<span class=\"token punctuation\">,</span>\n  createStandardAction<span class=\"token punctuation\">,</span>\n  ActionType<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'typesafe-actions'</span>\n\n<span class=\"token keyword\">const</span> Actions <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  increment<span class=\"token punctuation\">:</span> <span class=\"token function\">createAction</span><span class=\"token punctuation\">(</span><span class=\"token string\">'INCR'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  decrement<span class=\"token punctuation\">:</span> <span class=\"token function\">createAction</span><span class=\"token punctuation\">(</span><span class=\"token string\">'DECR'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  reset<span class=\"token punctuation\">:</span> <span class=\"token function\">createAction</span><span class=\"token punctuation\">(</span><span class=\"token string\">'RESET'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  setValue<span class=\"token punctuation\">:</span> <span class=\"token function\">createStandardAction</span><span class=\"token punctuation\">(</span><span class=\"token string\">'SET'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">number</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> State <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> counter<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">reducer</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">:</span> State<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">:</span> ActionType<span class=\"token operator\">&lt;</span><span class=\"token keyword\">typeof</span> Actions<span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span><span class=\"token keyword\">type</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token function\">getType</span><span class=\"token punctuation\">(</span>Actions<span class=\"token punctuation\">.</span>increment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> counter<span class=\"token punctuation\">:</span> s<span class=\"token punctuation\">.</span>counter <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">case</span> <span class=\"token function\">getType</span><span class=\"token punctuation\">(</span>Actions<span class=\"token punctuation\">.</span>decrement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> counter<span class=\"token punctuation\">:</span> s<span class=\"token punctuation\">.</span>counter <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">case</span> <span class=\"token function\">getType</span><span class=\"token punctuation\">(</span>Actions<span class=\"token punctuation\">.</span>reset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> counter<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">case</span> <span class=\"token function\">getType</span><span class=\"token punctuation\">(</span>Actions<span class=\"token punctuation\">.</span>setValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> counter<span class=\"token punctuation\">:</span> a<span class=\"token punctuation\">.</span>payload <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>What we get at this point is compile-time safety around</p>\n<ul>\n<li>the shape of the state (the return value of the reducer)</li>\n<li>An exhaustive match in the switch statement, resulting from the union of all valid actions</li>\n</ul>\n<p>While this is undeniably more code than the javascript version, using this in an editor like VS Code is quite a joy.</p>\n<p>Let's improve the experience and create a hook that instead of the <code class=\"language-text\">dispatch</code> will give use the action creators already bound to the dispatcher.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Reducer<span class=\"token punctuation\">,</span> useReducer<span class=\"token punctuation\">,</span> useMemo <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> ActionType <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'typesafe-actions'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> useTypesafeReducer<span class=\"token operator\">&lt;</span>\n  <span class=\"token constant\">S</span><span class=\"token punctuation\">,</span>\n  Actions <span class=\"token keyword\">extends</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">any</span> <span class=\"token punctuation\">}</span>\n<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>\n  reducer<span class=\"token punctuation\">:</span> Reducer<span class=\"token operator\">&lt;</span><span class=\"token constant\">S</span><span class=\"token punctuation\">,</span> ActionType<span class=\"token operator\">&lt;</span>Actions<span class=\"token operator\">>></span><span class=\"token punctuation\">,</span>\n  initialState<span class=\"token punctuation\">:</span> <span class=\"token constant\">S</span><span class=\"token punctuation\">,</span>\n  actions<span class=\"token punctuation\">:</span> Actions\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">S</span><span class=\"token punctuation\">,</span> Actions<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useReducer</span><span class=\"token punctuation\">(</span>reducer<span class=\"token punctuation\">,</span> initialState<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> boundActions <span class=\"token operator\">=</span> <span class=\"token function\">useMemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">bindActionCreator</span><span class=\"token punctuation\">(</span>\n      actionCreator<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span>\n      dispatcher<span class=\"token punctuation\">:</span> <span class=\"token keyword\">typeof</span> dispatch\n    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">dispatcher</span><span class=\"token punctuation\">(</span>\n          actionCreator<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token keyword\">as</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>arguments <span class=\"token keyword\">as</span> unknown<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">const</span> newActions <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>actions<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span>\n      <span class=\"token punctuation\">(</span>ba<span class=\"token punctuation\">,</span> actionName<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        ba<span class=\"token punctuation\">[</span>actionName<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">bindActionCreator</span><span class=\"token punctuation\">(</span>actions<span class=\"token punctuation\">[</span>actionName<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> ba\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token keyword\">as</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">any</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> newActions\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>dispatch<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> boundActions <span class=\"token keyword\">as</span> Actions<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>There's a lot going on, let's go through this in pieces. The function <code class=\"language-text\">bindActionCreator</code> is pretty much taken from <code class=\"language-text\">bindDispatchToActionCreators</code> which can be found in the redux codebase. It constructs a function that passes the arguments.\nThe <code class=\"language-text\">reduce</code> code constructs an object that has the same shape like the actions passed in but instead provides functions bound to the dispatch function returned by <code class=\"language-text\">useReducer</code>. All of this is wrapped in a <code class=\"language-text\">useMemo</code> hook since dispatch and actions will not change throughout the lifetime of the component using this hook.</p>","fields":{"slug":"/2019/03/12/using-typed-action-creators-with-reacts-usereducer-hook"},"frontmatter":{"date":"March 12, 2019","path":null,"title":"Using typed action creators with react's useReducer hook","tags":["programming","javascript","react"]}}},"pageContext":{"title":"Using typed action creators with react's useReducer hook","previous":{"fields":{"slug":"/2019/03/11/use-reacts-context-to-display-an-error-message-somewhere-else","published":true},"frontmatter":{"title":"Use react's context to display an error message somewhere else","tags":["programming","javascript","react"],"date":"2019/03/11"}},"next":null}}
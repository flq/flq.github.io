{"data":{"markdownRemark":{"html":"<p>If you do test your stuff, not having static compilation <em>at all times</em> doesn’t seem too daunting. In such cases (and when you can use .NET 4.0) you can consider using the dynamic capabilities to give yourself a somewhat nicer API to deal with a DataRow (something you may end up with if you don’t want to take on a dependency to_ insert-your-favourite-ORM-tool-here_ for <em>insert-whatever-reasons-you-have-here</em>).</p>\n<p>First we need the type construction to transpose from <em>DataRow</em> to <em>dynamic</em>:</p>\n <div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:812469c5-0cb0-4c63-8c15-c81123a09de7:6ecd7d11-598f-4665-bd98-0af8e3f56e98\" class=\"wlWriterEditableSmartContent\"><pre name=\"code\" class=\"c#\">public static class DataRowReaderExtensions\n{\n    public static dynamic AsDynamic(this DataRow row)\n    {\n        return new DataRowReader(row);\n    }\n}</pre></div>\n<p> </p>\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:812469c5-0cb0-4c63-8c15-c81123a09de7:a454cc15-7ad5-4015-b4cc-95cc16080049\" class=\"wlWriterEditableSmartContent\"><pre name=\"code\" class=\"c#\">public class DataRowReader : DynamicObject\n{\n    private readonly DataRow _dataRow;\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">/// &amp;lt;summary&amp;gt;\n/// ctor\n/// &amp;lt;/summary&amp;gt;\npublic DataRowReader(DataRow dataRow)\n{\n    _dataRow = dataRow;\n}\n...</code></pre></div>\n<p>}</pre></div></p>\n<p>The <em>DataRowReader</em> inherits from <em>DynamicObject</em>, which allows us to react to runtime calls to methods, properties, etc. we have <strong>NOT</strong> defined. For example, when somebody accesses a property which does not exist...</p>\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:812469c5-0cb0-4c63-8c15-c81123a09de7:868e99a1-b843-4747-8764-a0ae955540d0\" class=\"wlWriterEditableSmartContent\"><pre name=\"code\" class=\"c#\">public override bool TryGetMember(GetMemberBinder binder, out object result)\n{\n    try\n    {\n        result = _dataRow[binder.Name];\n    }\n    catch (Exception x)\n    {\n        Debug.WriteLine(x.Message);\n        result = null;\n    }\n    return true;\n}</pre></div>\n<p>…or tries to write to a property…</p>\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:812469c5-0cb0-4c63-8c15-c81123a09de7:f7c626c7-3359-4666-825c-30164d33e03a\" class=\"wlWriterEditableSmartContent\"><pre name=\"code\" class=\"c#\">public override bool TrySetMember(SetMemberBinder binder, object value)\n{\n    try\n    {\n        _dataRow[binder.Name] = value;\n    }\n    catch (Exception x)\n    {\n        Debug.WriteLine(x.Message);\n    }\n    return true;\n}</pre></div>\n<p>…or calls some method on it…</p>\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:812469c5-0cb0-4c63-8c15-c81123a09de7:268a457c-bd5e-468e-8297-a9b3ed35c0c2\" class=\"wlWriterEditableSmartContent\"><pre name=\"code\" class=\"c#\">public override bool TryInvokeMember(InvokeMemberBinder binder, object[] args, out object result)\n{\n    result = null;\n    if (binder.Name.StartsWith(\"Get\"))\n        HandleGetCase(binder.Name, out result);\n    if (binder.Name.StartsWith(\"Has\"))\n        HandleHasCase(binder.Name, out result);\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">return true;</code></pre></div>\n<p>}</p>\n<p>private void HandleHasCase(string name, out object result)\n{\nvar columnName = name.Replace(\"Has\", \"\");\nresult = _dataRow.Table.Columns.Contains(columnName);\n}</p>\n<p>private void HandleGetCase(string name, out object result)\n{\nvar relation = name.Replace(\"Get\", \"\").Replace(\"Childs\", \"\");\nresult = _dataRow.GetChildRows(relation).Select(r => new DataRowReader(r)).ToArray();\n}</pre></div></p>\n<p>What you can do now is the following:</p>\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:812469c5-0cb0-4c63-8c15-c81123a09de7:ad609e4f-f8f2-4b4e-9b38-91d33f34a86a\" class=\"wlWriterEditableSmartContent\"><pre name=\"code\" class=\"c#\">var _drReader = myRow.AsDynamic();\nvar name = _drReader.LastName;\n_drReader.LastName = name;\n//Loads childs through relation \"CustomerSystem\"\n_drReader.GetCustomerSystemChilds() ;\n//CheckIfAColumnExists\n_drReader.HasLastName;\n</pre></div>\n<p>Sure, the current implementation is pretty crude and can be foiled easily, but you get the idea. </p>\n<p>If you think this further, you may arrive to a point that you consider accessing a DB dynamically in much the same fashion, something like…</p>\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:812469c5-0cb0-4c63-8c15-c81123a09de7:ffd27179-8360-4af9-85d0-41540ab81cb7\" class=\"wlWriterEditableSmartContent\"><pre name=\"code\" class=\"c#\">var customers = _db.Customers.FindByLastName(\"Brannigan\")</pre></div>\n<p>Without ever having to generate code, set up mappings or dance 3 times around the grand DBA Master totem. Luckily, <a href=\"https://github.com/markrendle/Simple.Data\">this is already happening</a>.</p>","frontmatter":{"date":"April 20, 2011","path":null,"title":"Removing some of DataRow's ugliness through .NET 4.0’s dynamic","tags":["software-development","patterns","libs-and-frameworks"]}}},"pageContext":{"title":"Removing some of DataRow's ugliness through .NET 4.0’s dynamic"}}
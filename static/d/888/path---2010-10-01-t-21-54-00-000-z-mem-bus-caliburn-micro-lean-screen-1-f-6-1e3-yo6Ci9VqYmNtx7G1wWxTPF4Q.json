{"data":{"markdownRemark":{"html":"<p>To be honest, without <a href=\"http://www.rudigrobler.net/Blog/screen-conductor-101\">this blog post</a> on <a href=\"http://caliburnmicro.codeplex.com/\">Caliburn.Micro</a> I was kind of stuck. But now I ended up with my Screen conductor, and it’s likely that it is not going to change a lot:</p>\n <div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:812469c5-0cb0-4c63-8c15-c81123a09de7:5c9b4a60-78d4-4fc8-97b3-89ac13b6ea27\" class=\"wlWriterEditableSmartContent\"><pre name=\"code\" class=\"c#\">[Single]\npublic class ShellViewModel : Conductor&lt;Screen&gt;\n{\n    private readonly IDisposable screenStreamDispose;\n<pre><code>public ShellViewModel(IObservable&#x26;lt;RequestToActivateScreen&#x26;gt; screenStream)\n{\n    screenStreamDispose = screenStream\n        .SubscribeOnDispatcher()\n        .Where(msg=&#x26;gt;msg.ScreenAvailable)\n        .Subscribe(onNextScreenRequest);\n}\n\nprivate void onNextScreenRequest(RequestToActivateScreen request)\n{\n    ActivateItem(request.Screen);\n}\n\nprotected override void OnDeactivate(bool close)\n{\n    screenStreamDispose.Dispose();\n    base.OnDeactivate(close);\n}\n</code></pre>\n<p>}</pre></div></p>\n<p>The Observable is constructed based on <strong>MemBus</strong>. The screenStream is shaped with the aid of the reactive framework while “<strong>ActivateItem</strong>” loads the corresponding view for the given Screen. Overriding <strong>OnDeactivate</strong> gives a nice place to dispose of a subscription. The whole code is to be found in the <a href=\"http://github.com/flq/MemBus/tree/master//Membus.WpfTwitterClient/\">MemBus “Hello World” App</a>.</p>","frontmatter":{"date":"October 01, 2010","path":null,"title":"MemBus + Caliburn.Micro = Lean Screen","tags":["software-development","dotnet","membus","libs-and-frameworks"]}}},"pageContext":{"title":"MemBus + Caliburn.Micro = Lean Screen"}}
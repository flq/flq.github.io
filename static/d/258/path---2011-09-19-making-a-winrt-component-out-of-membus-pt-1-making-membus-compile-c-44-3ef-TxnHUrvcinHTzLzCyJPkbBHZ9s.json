{"data":{"markdownRemark":{"html":"<p>After last week’s <a href=\"http://www.buildwindows.com/\">//BUILD</a> conference we have learned (amongst other things) of a new class of apps that are touch-centric and use a new .NET Framework profile in order to be run on top of the new Windows Runtime. A nice way to learn about what is different in this new stack is to port some existing code. Membus is a nice contender since I know the codebase(o rly?), it has a fair number of unit and integration tests, it is (apart from some tests) unaware of UI stuff, but I use it extensively in WPF UI Apps, so let’s move in.</p>\n<p>I installed git on my new, um, <a href=\"http://www.waleg.com/techgadgets/archives/024320.html\">PC</a> to download the current version of Membus. First thing to note is that you can’t just open class library projects like that, you will need the correct project type. What I did is add a new sln file “Membus.Metro” that points to new csproj files “Membus.Metro” and “Membus.Metro.Tests” (from the “Unit Test” template). I then added all relevant files to the projects and compiled. Note that I am not touching the test project yet as it uses NUnit. Here’s a rundown of the issues I encountered</p>\n<h4>Some minor changes</h4>\n<ul>\n<li>The interface <strong><em>ICloneable</em></strong> just disappeared. Not a big deal for this codebase.</li>\n<li>The <strong><em>Serializable</em></strong> attribute is gone. Interesting – I don’t know for now if it just moved or what that means, but I do imagine that this has implications for other code bases.</li>\n<li>The class <strong><em>List&#x3C;T></em></strong> does not have a “ForEach” method anymore. The correct thing to do here is to use the <strong><em>Each</em></strong> extension method from System.Linq (fi-na-lly!) </li>\n</ul>\n<h4>Reflection changed more than moving mirrors around</h4>\n<p>The reflection API has changed considerably. Let’s face it, it’s a bit of a mess anyway, hence there was scope for improvement. Since Membus uses some reflection, a number of classes were affected. The one major change is that the <strong><em>Type</em></strong>-class has been streamlined to just a few essential features – reflection info like members, interfaces and the like are accessed by using the <strong><em>GetTypeInfo</em></strong> extension method that works e.g. on Types. It returns a TypeInfo instance that allows access to the information one usually needs when reflecting. MemberInfos, interfaces etc. are now returned as <strong><em>IEnumerable&#x3C;T></em></strong>  and things have in general been cleaned up.</p>\n<p>Membus already had a <strong><em>ReflectionExtensions</em></strong> static class which has been expanded to simplify access for other parts of the codebase. Other things could be deleted, e.g. there are now extension method like GetAttribute&#x3C;T> available, so you don’t need to reintroduce them all the time.</p>\n<p>Here’s an example of the change:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">bool</span> ImplementsInterface<span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span>T<span class=\"token operator\">&amp;</span>gt<span class=\"token punctuation\">;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token class-name\">Type</span> type<span class=\"token punctuation\">)</span> <span class=\"token keyword\">where</span> T <span class=\"token punctuation\">:</span> <span class=\"token keyword\">class</span>\n<span class=\"token punctuation\">{</span>\n<span class=\"token operator\">-</span>         <span class=\"token keyword\">return</span> Array<span class=\"token punctuation\">.</span><span class=\"token function\">Exists</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">.</span><span class=\"token function\">GetInterfaces</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> t <span class=\"token operator\">=</span><span class=\"token operator\">></span> t <span class=\"token operator\">==</span> <span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">+</span>        <span class=\"token keyword\">return</span> type<span class=\"token punctuation\">.</span><span class=\"token function\">GetTypeInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>ImplementedInterfaces<span class=\"token punctuation\">.</span><span class=\"token function\">Any</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">=</span><span class=\"token operator\">></span> t <span class=\"token operator\">==</span> <span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Incidentally, the <strong><em>Array.Exists</em></strong> method does not, er, exist anymore.</p>\n<h4>Delegate.CreateDelegate is gone</h4>\n<p>I am not sure about the exact reason of this change, but it could be roughly the same direction as the fact that <a href=\"http://jasonbock.net/JB/Default.aspx?blog=entry.55fa01c966fa4e839a5675f5b70d06df\">Reflection.Emit is not available</a>. Membus uses this method to build delegates from suitable methods that can act as a target of messages.</p>\n<p>In this case I had to move the code creation to what the Expression-class makes available to us. The correct way to create an arbitrary <strong><em>Action&#x3C;T></em></strong> delegate from a suitable <strong><em>MethodInfo</em></strong> looks like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">ISubscription</span> <span class=\"token function\">ConstructSubscription</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token class-name\">MethodInfo</span> info<span class=\"token punctuation\">,</span> <span class=\"token keyword\">object</span> target<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> parameterType <span class=\"token operator\">=</span> info<span class=\"token punctuation\">.</span><span class=\"token function\">GetParameters</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>ParameterType<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> fittingDelegateType <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span>Action<span class=\"token operator\">&lt;</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">MakeGenericType</span><span class=\"token punctuation\">(</span>parameterType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> p <span class=\"token operator\">=</span> Expression<span class=\"token punctuation\">.</span><span class=\"token function\">Parameter</span><span class=\"token punctuation\">(</span>parameterType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> call <span class=\"token operator\">=</span> Expression<span class=\"token punctuation\">.</span><span class=\"token function\">Call</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span> info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> @<span class=\"token keyword\">delegate</span> <span class=\"token operator\">=</span> Expression<span class=\"token punctuation\">.</span><span class=\"token function\">Lambda</span><span class=\"token punctuation\">(</span>fittingDelegateType<span class=\"token punctuation\">,</span> call<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">var</span> fittingMethodSubscription <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span>MethodInvocation<span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>gt<span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">MakeGenericType</span><span class=\"token punctuation\">(</span>parameterType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> sub <span class=\"token operator\">=</span> Activator<span class=\"token punctuation\">.</span><span class=\"token function\">CreateInstance</span><span class=\"token punctuation\">(</span>fittingMethodSubscription<span class=\"token punctuation\">,</span> @<span class=\"token keyword\">delegate</span><span class=\"token punctuation\">.</span><span class=\"token function\">Compile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>ISubscription<span class=\"token punctuation\">)</span>sub<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>All in all the necessary changes to make Membus compile again were done in roughly 2 hours. The commit of the changes documented in this post <a href=\"https://github.com/flq/MemBus/commit/53d74a7c70ddd250b8b9e22a71a48adaec0ad5fb\">can be seen here</a> on github as a diff.</p>","fields":{"slug":"/2011/09/19/making-a-winrt-component-out-of-membus-–-pt-1-making-membus-compile"},"frontmatter":{"date":"September 19, 2011","path":null,"title":"Making a WinRT component out of Membus – Pt.1, making Membus compile","tags":["software-development","dotnet","membus","libs-and-frameworks"]}}},"pageContext":{"title":"Making a WinRT component out of Membus – Pt.1, making Membus compile","previous":{"fields":{"slug":"/2011/08/12/more-tricks-from-ye-olde-event-aggregator-no-i-dont-want-that-message-for-a-while","published":true},"frontmatter":{"title":"More tricks from ye olde Event Aggregator: No, I don’t want that message for a while","tags":["software-development","membus"],"date":"2011/08/12"}},"next":{"fields":{"slug":"/2011/11/17/new-tooling-new-posts","published":true},"frontmatter":{"title":"New Tooling, new Posts","tags":["software-development","loosely-coupled"],"date":"2011/11/17"}}}}
{"data":{"markdownRemark":{"html":"<p>Back <a href=\"http://realfiction.net/go/143\">here</a> I made a quick and dirty performance comparison. In the comments I actually got some \"flak\" scrutinizing some of the \"design decisions\" behind the example shown. I would like to reinstate that the example was made purely for checking instantiation performance of IoC container, and that I could not be asked to use \"Foo\" and \"Bar\" or \"Samurai\" and \"Sword\" (<a href=\"http://dojo.ninject.org/wiki/display/NINJECT/Dependency+Injection+With+Ninject\">no worries, Nate</a> ;)</p>\n<p>I was pointed to the injection container <a href=\"http://ninject.org/\">NInject</a>, and how the benchmark would look like when using this framework. Now that said framework has been released with a v 1.0 tag (you've got to love it just for doing that, after all, there are customers out there that you simply cannot approach with a v0.9 or a release candidate 3) I took the time to play through the code.</p>\n<p>Instead of using an XML-file you perform a programmatic binding within a special class that is treated by the kernel as a module:</p>\n<p><code class=\"language-text\">class BankAccountModule : StandardModule\n  {\n    public override void Load()\n    {\n      Bind&lt;IExchangeRateEngine&gt;().To&lt;SimpleExchangeRateEngine&gt;();\n      Bind&lt;BankAccount&gt;().ToSelf();\n    }\n  }</code></p>\n<p>Instantiation of the kernel looks like this:</p>\n<p><code class=\"language-text\">IKernel c = new Ninject.Core.StandardKernel(new BankAccountModule());</code></p>\n<p>And getting a BankAccount reference looks like that:</p>\n<p><code class=\"language-text\">BankAccount acc = c.Get&lt;BankAccount&gt;();</code></p>\n<p>The time we get (for reference the Spring.NET time run today as well)</p>\n<ul>\n<li>Container construction (Spring.NET): 0.0535 / 0.0459</li>\n<li>Container construction (NInject): 0.0298 / 0.0293</li>\n</ul>\n<p>So, performance-wise NInject shows benefits due to its approach of generating dynamic methods. This is certainly not the last post on NInject as it makes a very good first impression and I need to delve a bit into some question marks.</p>","fields":{"slug":"/2008/06/25/so-how-expensive-is-it-to-let-ninject-make-my-object"},"frontmatter":{"date":"June 25, 2008","path":null,"title":"So, how expensive is it to let NInject make my object?","tags":["software-development","dotnet","patterns","libs-and-frameworks"]}}},"pageContext":{"title":"So, how expensive is it to let NInject make my object?","previous":{"fields":{"slug":"/2008/06/16/wpf-inotifypropertychanged-proxy-success"},"frontmatter":{"title":"WPF + INotifyPropertyChanged Proxy = success!","tags":["dotnet","libs-and-frameworks"],"date":"2008/06/16"}},"next":{"fields":{"slug":"/2008/07/31/dont-be-afraid-of-your-csproj-files-i-embracing-the-idea"},"frontmatter":{"title":"Don't be afraid of your csproj-Files (I): Embracing the idea","tags":["software-development","msbuild"],"date":"2008/07/30"}}}}
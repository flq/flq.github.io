{"data":{"markdownRemark":{"html":"<p>Consider the following small c# 2.0 program:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">class Program {\n  static void Main(string[] args) {\n    List&lt;int&gt; l = new List&lt;int&gt;();\n    int i = 0;\n    bool truth = l.TrueForAll(delegate(int z) { i++; return false; });\n    Console.WriteLine(&quot;i is {0} and truth is {1}&quot;, i, truth);\n    Console.ReadKey();\n  }\n}</code></pre></div>\n<p>The delegate passed into the <em>TrueForAll</em> method has to return either true or false and is called for each element of the list. If all calls return true, the <em>TrueForAll</em> method will itself return true.</p>\n<p>As you can see, the list contains no elements, so you can probably guess what the value of <strong>i</strong> will be. But can you guess the value of <strong>truth</strong>? Well, here's the output:</p>\n<p><em>i is 0 and truth is True</em>.</p>\n<p>Indeed, what is it supposed to return, since after all no answer can be given, and in a way any statement applied to nothing can be true. Even so, I would think that it could also be considered false, and that the way this method may be used, returning False may have been a better option.</p>\n<p>In my concrete trap, I was asking whether a list HasData, which in turned was supposed to ask each of its elements if it contains any data...</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">class Program {\n\n  static void Main(string[] args) {\n    DataHolderSet set = new DataHolderSet();\n    Console.WriteLine(&quot;set has data? {0}&quot;, set.HasData);\n    Console.ReadKey();\n  }\n}\n\ninterface IDataHolder {\n  bool HasData { get; }\n}\n\nclass DataHolder : IDataHolder {\n  public bool HasData {\n    get { return false; }\n  }\n}\n\nclass DataHolderSet : List&lt;IDataHolder&gt;, IDataHolder {\n  public bool HasData {\n    get { \n      return TrueForAll(delegate(IDataHolder z) \n      { return z.HasData; }); \n    }\n  }\n}</code></pre></div>\n<p>Obviously we get true, although I have lured myself into expecting that the response should be false. Anyway, just something to be aware of...</p>","frontmatter":{"date":"July 19, 2006","path":null,"title":"Small trap on .NET 2.0 List object","tags":["software-development","dotnet"]}}},"pageContext":{"title":"Small trap on .NET 2.0 List object"}}
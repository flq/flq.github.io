{"data":{"markdownRemark":{"html":"<p>Every once in a while you may be down to low-level element calculation and placement of elements in WPF. For this situation, I have found the following extension methods quite useful:</p>\n<h2>Translating a point</h2>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Point</span> <span class=\"token function\">Translate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token class-name\">Point</span> p<span class=\"token punctuation\">,</span> Func<span class=\"token operator\">&lt;</span>Point<span class=\"token punctuation\">,</span>Tuple<span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">double</span><span class=\"token operator\">></span><span class=\"token operator\">></span> translateFunction<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">var</span> points <span class=\"token operator\">=</span> <span class=\"token function\">translateFunction</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>X <span class=\"token operator\">+</span> points<span class=\"token punctuation\">.</span>Item1<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">.</span>Y <span class=\"token operator\">+</span> points<span class=\"token punctuation\">.</span>Item2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Point</span> <span class=\"token function\">Translate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token class-name\">Point</span> p<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Vector</span> translation<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">return</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">Translate</span><span class=\"token punctuation\">(</span>po <span class=\"token operator\">=</span><span class=\"token operator\">></span> Tuple<span class=\"token punctuation\">.</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span>translation<span class=\"token punctuation\">.</span>X<span class=\"token punctuation\">,</span> translation<span class=\"token punctuation\">.</span>Y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Point</span> <span class=\"token function\">Translate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token class-name\">Point</span> p<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> xOffset<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> yOffset<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">return</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">Translate</span><span class=\"token punctuation\">(</span>po<span class=\"token operator\">=</span><span class=\"token operator\">></span>Tuple<span class=\"token punctuation\">.</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span>xOffset<span class=\"token punctuation\">,</span> yOffset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Point</span> <span class=\"token function\">TranslateX</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token class-name\">Point</span> p<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> xOffset<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">return</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">Translate</span><span class=\"token punctuation\">(</span>xOffset<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Point</span> <span class=\"token function\">TranslateY</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token class-name\">Point</span> p<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> yOffset<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">return</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">Translate</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> yOffset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The first method is a low level application of a double-tuple as offset to a given point. All others use this method to create a new point from an old point and some additional info. Some examples:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">var</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\np2 <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">TranslateY</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//10 pixels to the right</span>\np3 <span class=\"token operator\">=</span> p2<span class=\"token punctuation\">.</span><span class=\"token function\">Translate</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//New point at 10,10</span>\np4 <span class=\"token operator\">=</span> p3<span class=\"token punctuation\">.</span><span class=\"token function\">Translate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Vector</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//New point at 20,20</span></code></pre></div>\n<h2>Point Sources</h2>\n<p>A point source is an object that implements IEnumerable<Point>. One type of Poiint Source I have used is one that takes a seed point and to which you can provide a function how to get from previous to the next point. the following example uses this class to be able to iterate over equal-spaced points along the vertical axis:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">var</span> psource <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PointSource</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> p <span class=\"token operator\">=</span><span class=\"token operator\">></span> p<span class=\"token punctuation\">.</span><span class=\"token function\">TranslateY</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> points <span class=\"token operator\">=</span> psource<span class=\"token punctuation\">.</span><span class=\"token function\">Take</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ToArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 10,10 ; 10,20 ; 10,30 ...</span></code></pre></div>\n<p>By entering the IEnumerable realm, you open your code to all the shiny LINQiness there is out there.</p>\n<h2>Arcs and the like</h2>\n<p>In WPF you can work with vectors and matrices. That gives you a nice base to implement a “Rotate” method:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Vector</span> <span class=\"token function\">Rotate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token class-name\">Vector</span> origin<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> angle<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> cos <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">Cos</span><span class=\"token punctuation\">(</span>angle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> sin <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">Sin</span><span class=\"token punctuation\">(</span>angle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> rotationMatrix <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Matrix</span><span class=\"token punctuation\">(</span>cos<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span>sin<span class=\"token punctuation\">,</span> sin<span class=\"token punctuation\">,</span> cos<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> origin <span class=\"token operator\">*</span> rotationMatrix<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In combination with a different point source that takes an IEnumerable<T> and provides a conversion to an IEnumerable<Point> you can create arcs and circles of points quite easily:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">var</span> radius <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vector</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> angleToRadians <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span>PI <span class=\"token operator\">/</span> <span class=\"token number\">180.0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> midpoint <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> translationVectors <span class=\"token operator\">=</span>\n  <span class=\"token keyword\">from</span> step <span class=\"token keyword\">in</span> Enumerable<span class=\"token punctuation\">.</span><span class=\"token function\">Range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">360</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">let</span> angle <span class=\"token operator\">=</span> step <span class=\"token operator\">*</span> angleToRadians\n  <span class=\"token keyword\">select</span> radius<span class=\"token punctuation\">.</span><span class=\"token function\">Rotate</span><span class=\"token punctuation\">(</span>angle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> ps <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token generic-method\"><span class=\"token function\">PointSource</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Vector</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>translationVectors<span class=\"token punctuation\">,</span> v <span class=\"token operator\">=</span><span class=\"token operator\">></span> midpoint<span class=\"token punctuation\">.</span><span class=\"token function\">Translate</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nps<span class=\"token punctuation\">.</span><span class=\"token function\">Take</span><span class=\"token punctuation\">(</span><span class=\"token number\">45</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Gives 45 points over 45 degrees, each with a radius of 10</span></code></pre></div>\n<p>Note that above, you could also get the functionality by using the LINQ-Select on the list of vectors. Also note the lazy nature of all involved items. If you only need 45 items, that’s all that is calculated.</p>\n<p>I am just thinking of putting this kind of stuff into a small library to help dealing with that low-level stuff, which can be useful for Custom arrangers and the like. I am wondering what else could be in that library…or maybe there is already one?</p>","frontmatter":{"date":"October 11, 2010","path":null,"title":"Useful Extension Methods for Points and friends in WPF","tags":["WPF","csharp","libs-and-frameworks"]}}},"pageContext":{"title":"Useful Extension Methods for Points and friends in WPF","previous":{"fields":{"slug":"/2010/10/01/membus-caliburn-micro-lean-screen"},"frontmatter":{"title":"MemBus + Caliburn.Micro = Lean Screen","tags":["software-development","dotnet","membus","libs-and-frameworks"],"date":"2010/10/01"}},"next":{"fields":{"slug":"/2010/11/11/-oslash;redev-keynote-1-nasa-rsquo;s-jeff-norris"},"frontmatter":{"title":"&Oslash;redev keynote #1: NASA&rsquo;s Jeff Norris","tags":["oredev","software-development","loosely-coupled","geekdom"],"date":"2010/11/10"}}}}
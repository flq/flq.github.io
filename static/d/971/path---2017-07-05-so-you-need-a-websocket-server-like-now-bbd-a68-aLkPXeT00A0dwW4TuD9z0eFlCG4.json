{"data":{"markdownRemark":{"html":"<p>So, you need a websocket server, like, now. Well, fear no more, here comes <strong><a href=\"http://websocketd.com/\">websocketd</a></strong> to the rescue!</p>\n<p>As it says</p>\n<blockquote>\n<p>WebSockets the UNIX way<br>\nFull duplex messaging between web browsers and servers</p>\n</blockquote>\n<p>And it's awfully simple to use. STDIN becomes your input, STDOUT is your output. In other words, any old console application can become a Websocket server.</p>\n<p>I did my testing on the Windows Linux Subsystem (WLS). Just download the correct zip\nfrom the website (Note that you also get the executable for Windows, but for WLS you need the 64-bit Linux variant).</p>\n<p>Then I did</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">sudo-apt-get <span class=\"token function\">install</span> fortune cowsay</code></pre></div>\n<p>and adapted the example bash script from the websocketd website a little bit:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash</span>\n<span class=\"token keyword\">for</span> <span class=\"token variable\"><span class=\"token punctuation\">((</span>COUNT <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> COUNT <span class=\"token operator\">&lt;=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> COUNT<span class=\"token operator\">++</span><span class=\"token punctuation\">))</span></span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">do</span>\n  fortune <span class=\"token operator\">|</span> cowsay\n  <span class=\"token function\">sleep</span> 2\n<span class=\"token keyword\">done</span></code></pre></div>\n<p>Just note that if you use an editor in Windows, you will have to make sure that your line endings are UNIX-style (in Sublime e.g. <code class=\"language-text\">View-&gt;Line Endings-&gt;Unix</code>).</p>\n<p>Finally, write a little test website. Mine got a little more code, I'll tell you in a minute</p>\n<p>{% gist flq/642eb18a1b205eccf64a62837c0b7fa4 test.html %}</p>\n<p>The <code class=\"language-text\">gather</code> function collects the output from the socket server - this is because <strong>websocketd</strong> sends and separates on newlines. Therefore every cow becomes a number of messages sent to the browser. Finally <code class=\"language-text\">append</code> writes out a <code class=\"language-text\">&lt;pre&gt;</code> block.</p>\n<p><img src=\"/public/assets/cowsay_websocketd.png\"></p>\n<p>What is presented as a bit of a joke nonetheless means that you can set up a websocket server <em>veeery</em> quickly. Bear in mind that each connection spawns a process. That is, you have straightforward isolation, but this approach may not exactly scale to the millions of connections.</p>\n<h2>PS</h2>\n<p>If you try this out on MS Edge, it will not work OOTB connecting to localhost. <a href=\"https://stackoverflow.com/a/32767256/51428\">This answer on SO</a> helped me out.</p>","frontmatter":{"date":"July 05, 2017","path":null,"title":"So you need a websocket server, like, now","tags":["programming","web"]}}},"pageContext":{"title":"So you need a websocket server, like, now"}}
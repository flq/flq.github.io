{"data":{"markdownRemark":{"html":"<p>If you do test your stuff, not having static compilation <em>at all times</em> doesn’t seem too daunting. In such cases (and when you can use .NET 4.0) you can consider using the dynamic capabilities to give yourself a somewhat nicer API to deal with a DataRow (something you may end up with if you don’t want to take on a dependency to_ insert-your-favourite-ORM-tool-here_ for <em>insert-whatever-reasons-you-have-here</em>).</p>\n<p>First we need the type construction to transpose from <em>DataRow</em> to <em>dynamic</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DataRowReaderExtensions</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">dynamic</span> <span class=\"token function\">AsDynamic</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token class-name\">DataRow</span> row<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DataRowReader</span><span class=\"token punctuation\">(</span>row<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DataRowReader</span> <span class=\"token punctuation\">:</span> <span class=\"token class-name\">DynamicObject</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">DataRow</span> _dataRow<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/// &lt;summary></span>\n    <span class=\"token comment\">/// ctor</span>\n    <span class=\"token comment\">/// &lt;/summary></span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">DataRowReader</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DataRow</span> dataRow<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        _dataRow <span class=\"token operator\">=</span> dataRow<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The <em>DataRowReader</em> inherits from <em>DynamicObject</em>, which allows us to react to runtime calls to methods, properties, etc. we have <strong>NOT</strong> defined. For example, when somebody accesses a property which does not exist...</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token keyword\">bool</span> <span class=\"token function\">TryGetMember</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">GetMemberBinder</span> binder<span class=\"token punctuation\">,</span> <span class=\"token keyword\">out</span> <span class=\"token keyword\">object</span> result<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span>\n    <span class=\"token punctuation\">{</span>\n        result <span class=\"token operator\">=</span> _dataRow<span class=\"token punctuation\">[</span>binder<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> x<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        Debug<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span>Message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        result <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>…or tries to write to a property…</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token keyword\">bool</span> <span class=\"token function\">TrySetMember</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SetMemberBinder</span> binder<span class=\"token punctuation\">,</span> <span class=\"token keyword\">object</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span>\n    <span class=\"token punctuation\">{</span>\n        _dataRow<span class=\"token punctuation\">[</span>binder<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> x<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        Debug<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span>Message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>…or calls some method on it…</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token keyword\">bool</span> <span class=\"token function\">TryInvokeMember</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">InvokeMemberBinder</span> binder<span class=\"token punctuation\">,</span> <span class=\"token keyword\">object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">,</span> <span class=\"token keyword\">out</span> <span class=\"token keyword\">object</span> result<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    result <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>binder<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">.</span><span class=\"token function\">StartsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Get\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">HandleGetCase</span><span class=\"token punctuation\">(</span>binder<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">out</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>binder<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">.</span><span class=\"token function\">StartsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Has\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">HandleHasCase</span><span class=\"token punctuation\">(</span>binder<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">out</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">HandleHasCase</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">out</span> <span class=\"token keyword\">object</span> result<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> columnName <span class=\"token operator\">=</span> name<span class=\"token punctuation\">.</span><span class=\"token function\">Replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Has\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    result <span class=\"token operator\">=</span> _dataRow<span class=\"token punctuation\">.</span>Table<span class=\"token punctuation\">.</span>Columns<span class=\"token punctuation\">.</span><span class=\"token function\">Contains</span><span class=\"token punctuation\">(</span>columnName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">HandleGetCase</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">out</span> <span class=\"token keyword\">object</span> result<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> relation <span class=\"token operator\">=</span> name<span class=\"token punctuation\">.</span><span class=\"token function\">Replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Get\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Childs\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    result <span class=\"token operator\">=</span> _dataRow<span class=\"token punctuation\">.</span><span class=\"token function\">GetChildRows</span><span class=\"token punctuation\">(</span>relation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Select</span><span class=\"token punctuation\">(</span>r <span class=\"token operator\">=</span><span class=\"token operator\">&amp;</span>gt<span class=\"token punctuation\">;</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DataRowReader</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ToArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>What you can do now is the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">var</span> _drReader <span class=\"token operator\">=</span> myRow<span class=\"token punctuation\">.</span><span class=\"token function\">AsDynamic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> _drReader<span class=\"token punctuation\">.</span>LastName<span class=\"token punctuation\">;</span>\n_drReader<span class=\"token punctuation\">.</span>LastName <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//Loads childs through relation \"CustomerSystem\"</span>\n_drReader<span class=\"token punctuation\">.</span><span class=\"token function\">GetCustomerSystemChilds</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//CheckIfAColumnExists</span>\n_drReader<span class=\"token punctuation\">.</span>HasLastName<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Sure, the current implementation is pretty crude and can be foiled easily, but you get the idea. </p>\n<p>If you think this further, you may arrive to a point that you consider accessing a DB dynamically in much the same fashion, something like…</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">var</span> customers <span class=\"token operator\">=</span> _db<span class=\"token punctuation\">.</span>Customers<span class=\"token punctuation\">.</span><span class=\"token function\">FindByLastName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Brannigan\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Without ever having to generate code, set up mappings or dance 3 times around the grand DBA Master totem. Luckily, <a href=\"https://github.com/markrendle/Simple.Data\">this is already happening</a>.</p>","fields":{"slug":"/2011/04/20/removing-some-of-datarows-ugliness-through-net-4-0s-dynamic"},"frontmatter":{"date":"April 20, 2011","path":null,"title":"Removing some of DataRow's ugliness through .NET 4.0’s dynamic","tags":["software-development","patterns","libs-and-frameworks"]}}},"pageContext":{"title":"Removing some of DataRow's ugliness through .NET 4.0’s dynamic","previous":{"fields":{"slug":"/2011/03/14/in-honour-of-the-pi-day-ndash;-expansion-series-in-silverlight"},"frontmatter":{"title":"In honour of the Pi Day &ndash; Expansion Series in Silverlight","tags":["software-development","geekdom","mathematics","libs-and-frameworks"],"date":"2011/03/14"}},"next":{"fields":{"slug":"/2011/05/07/using-fubumvc-day1"},"frontmatter":{"title":"Using FubuMVC - Day1","tags":["software-development","dotnet","web","libs-and-frameworks"],"date":"2011/05/07"}}}}
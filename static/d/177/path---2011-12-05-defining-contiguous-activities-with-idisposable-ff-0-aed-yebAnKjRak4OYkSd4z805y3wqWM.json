{"data":{"markdownRemark":{"html":"<blockquote>\n<p>\"Atomic activities may not be confused with consecutive code\" - <em>Arthur X. Brannigan</em><br>\n\"Ideally, atomic activities can be read as consecutive code\" - <em>Arthur X. Brannigan</em></p>\n</blockquote>\n<p>What Arthur is trying to say is that sometimes you have an atomic activity (something that should happen completely or not at all) whose parts are separated by arbitrary amounts of code. What would be desirable is that such an activity can also be read as such. That is, as a consecutive block of code, even though its parts may run at different points of the program execution. This will also encourage reusability, since a consecutive code block can easily be refactored via <em>\"extract method\"</em></p>\n<p>The using pattern with <em>IDisposable</em> can help us creating such activities. We introduce a class that can run arbitrary code and implements <em>IDisposable</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AdHocDisposable</span> <span class=\"token punctuation\">:</span> <span class=\"token class-name\">IDisposable</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">Action</span> _end<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">IDisposable</span> <span class=\"token function\">Create</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Action</span> start<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Action</span> end<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AdHocDisposable</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">AdHocDisposable</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Action</span> start<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Action</span> end<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        _end <span class=\"token operator\">=</span> end<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Dispose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">_end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Usage may be encapsulated in a single private method of the class in need of the switching:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">private</span> <span class=\"token class-name\">IDisposable</span> <span class=\"token function\">FooEnabled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> AdHocDisposable<span class=\"token punctuation\">.</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> _foo <span class=\"token operator\">=</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> _foo <span class=\"token operator\">=</span> <span class=\"token keyword\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>After which we can use it in the following way:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token punctuation\">(</span><span class=\"token function\">FooEnabled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Doing funny stuff</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The repetitiveness has been dragged into its own method. The before/after\nparts are written in close vicinity to each other, making it clear to a future reader what must be understood to be an <em>atomic activity</em>.</p>\n<p>In a functional language like F#, such patterns would probably be evolved with functional features.\nThe following is a quick example based on function definitions, written as a test.</p>\n<div class=\"gatsby-highlight\" data-language=\"fsharp\"><pre class=\"language-fsharp\"><code class=\"language-fsharp\"><span class=\"token punctuation\">[</span><span class=\"token operator\">&lt;</span>TestFixture<span class=\"token operator\">></span><span class=\"token punctuation\">]</span> \n<span class=\"token keyword\">type</span> ``Atomic Tests`` <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=</span>\n\n  <span class=\"token keyword\">let</span> <span class=\"token keyword\">mutable</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n  <span class=\"token keyword\">let</span> enclose <span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">,</span>O<span class=\"token punctuation\">)</span> x <span class=\"token operator\">=</span> <span class=\"token function\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token function\">x</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token function\">O</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> encloseWithI <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> i <span class=\"token operator\">&lt;</span><span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> i <span class=\"token operator\">&lt;</span><span class=\"token operator\">-</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span><span class=\"token operator\">></span> enclose\n  <span class=\"token keyword\">let</span> dispose <span class=\"token operator\">=</span> <span class=\"token function\">DisposableBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token punctuation\">[</span><span class=\"token operator\">&lt;</span>Test<span class=\"token operator\">></span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">member</span> test<span class=\"token punctuation\">.</span>``test <span class=\"token keyword\">with</span> the lambda`` <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=</span>\n    encloseWithI <span class=\"token punctuation\">(</span><span class=\"token keyword\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> i <span class=\"token operator\">|</span><span class=\"token operator\">></span> should equal <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    i <span class=\"token operator\">|</span><span class=\"token operator\">></span> should equal <span class=\"token number\">0</span></code></pre></div>\n<p>It makes use of currying (<em>encloseWithI</em>) to specialize the <em>enclose</em> function with the desired effect of changing the value of <strong><em>i</em></strong> before and after some other\nactivity. <em>A(lpha)</em> and <em>O(mega)</em> are expected to be functions that are run before and after the third function <em>x()</em></p>","fields":{"slug":"/2011/12/05/defining-contiguous-activities-with-idisposable"},"frontmatter":{"date":"December 05, 2011","path":null,"title":"defining contiguous activities with IDisposable","tags":["software-development","dotnet","patterns","fsharp"]}}},"pageContext":{"title":"defining contiguous activities with IDisposable","previous":{"fields":{"slug":"/2011/12/04/on-monads"},"frontmatter":{"title":"On Monads","tags":["programming","dotnet","haskell"],"date":"2011/12/04"}},"next":{"fields":{"slug":"/2011/12/29/a-parable-on-eternity"},"frontmatter":{"title":"A parable on eternity","tags":["loosely-coupled"],"date":"2011/12/29"}}}}
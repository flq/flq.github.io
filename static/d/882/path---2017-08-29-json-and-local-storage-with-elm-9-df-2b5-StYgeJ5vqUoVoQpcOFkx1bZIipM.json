{"data":{"markdownRemark":{"html":"<p>In the quest of porting a react/redux-app named <a href=\"http://realfiction.net/remorse\">remorse</a> to elm, once more I came across the requirement to store the current progress of the user to local storage.\nNow, dealing with json was easily the least enjoyable part of the port. elm requires you to specify encoders and decoders in order to get from json to your elm code and back.\nTo me, it does seem repetitive. After all, e.g. in .NET, when I have some instance, reflection allows me to understand the instance and then lets me build a fast encoder / decoder at runtime.\nThis option isn't available in elm.</p>\n<p>The one advantage this approach <strong>does</strong> have is forcing you to think very carefully about what you will put out to json. Your json models will most certainly become independent of your programming models, which is actually a good thing. <em>Still</em> ...</p>\n<p>Let us start with the user interaction. <a href=\"https://github.com/flq/elmorse/blob/8db340ed97ffe00ae075d7cca4236962b8336570/src/Navigation/View.elm#L25-L27\">The user clicks</a>{:target=\"_blank\"} on \"Save current settings\"...</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">a [onClick SaveAppState] [text &quot;Save current settings&quot;]</code></pre></div>\n<p>The message is handled in the <strong>update</strong> function <a href=\"https://github.com/flq/elmorse/blob/8db340ed97ffe00ae075d7cca4236962b8336570/src/Update.elm#L33-L34\">by creating a Command</a>{:target=\"<em>blank\"} which will do the job. Let us look at the <a href=\"https://github.com/flq/elmorse/blob/8db340ed97ffe00ae075d7cca4236962b8336570/src/StateStorage.elm#L42-L52\">contents of the command</a>{:target=\"</em>blank\"}.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">saveAppState model = \n  let\n      map m = \n        {\n          userInput = m.userInput,\n          lettersInScope = m.lettersInScope,\n          morseSpeed = m.morseSpeed,\n          trainCount = m.trainCount\n        } \n  in\n    storeObject (stateKey, encode &lt;| map model)</code></pre></div>\n<p>The <code class=\"language-text\">map</code> function is a straightforward mapper that extracts just those values that I care about in terms of persisting. That value is passed through an encoder, whose output is then stored.</p>\n<p>Here's the <a href=\"https://github.com/flq/elmorse/blob/8db340ed97ffe00ae075d7cca4236962b8336570/src/StateStorage.elm#L54-L61\">encoder</a>{:target=\"_blank\"}:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import Json.Encode as J exposing (object)\n...\nencode : Progress -&gt; J.Value\nencode p =\n  object [\n    (&quot;userInput&quot;, J.string p.userInput),\n    (&quot;lettersInScope&quot;, J.list &lt;| List.map J.string p.lettersInScope),\n    (&quot;morseSpeed&quot;, J.float p.morseSpeed),\n    (&quot;trainCount&quot;, J.int p.trainCount)    \n  ]</code></pre></div>\n<p>You see, we have to encode all that what we know about the target model into the encoder as well. To an old-fashioned Newtonsoft user this seemed ludicrous, but yes, reflection isn't really a thing in functional programming, and looking at <strong>Haskell</strong>, one of the fathers of elm, to pull off something more comfortable than this, it requires the programmer to use certain metaprogramming directives to instruct the compiler to do certain work for us.</p>\n<p>The <strong>final</strong> piece in the Puzzle is the <code class=\"language-text\">storeObject</code>, which is an interop function, because elm doesn't have an in-built API to talk to local storage.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">port storeObject : (String, J.Value) -&gt; Cmd msg</code></pre></div>\n<p>and <a href=\"https://github.com/flq/elmorse/blob/8db340ed97ffe00ae075d7cca4236962b8336570/src/localStoragePort.js#L21-L23\">its implementation</a>{:target=\"_blank\"}:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> storage <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span>localStorage <span class=\"token operator\">||</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setItem</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> v<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">storeObject</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> object<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  storage<span class=\"token punctuation\">.</span><span class=\"token function\">setItem</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The end result being that the desired values are stored in the browser's local storage for later retrieval.</p>\n<p>There is no explicit functionality to load the currently stored settings - this happens when the application starts up. How?</p>\n<ul>\n<li>The elm application is started, inside the init it is requested to load json from local storage</li>\n<li>Once loaded, the data is made available, decoded and sent into the <code class=\"language-text\">update</code> part of the application.</li>\n<li>If data is available and correctly loaded, the data is taken into the main application model.</li>\n</ul>\n<p>Let's go in reverse this time, beginning with the <a href=\"https://github.com/flq/elmorse/blob/8db340ed97ffe00ae075d7cca4236962b8336570/src/localStoragePort.js#L10-L17\">retrieval functionality</a>{:target=\"_blank\"} implemented in javascript.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">initLocalStoragePort</span><span class=\"token punctuation\">(</span>elmApp<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  elmApp<span class=\"token punctuation\">.</span>ports<span class=\"token punctuation\">.</span>storeObject<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">storeObject</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  elmApp<span class=\"token punctuation\">.</span>ports<span class=\"token punctuation\">.</span>retrieveObject<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> o <span class=\"token operator\">=</span> <span class=\"token function\">retrieveObject</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    elmApp<span class=\"token punctuation\">.</span>ports<span class=\"token punctuation\">.</span>objectRetrieved<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">,</span> o<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Elm is very strict with regard to values entering your application from the outside. Basically, you perform a request (<em>Command</em>) and then wait for a response (<em>Subscription</em>):</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">port retrieveObject : String -&gt; Cmd msg\nport objectRetrieved : ((String, J.Value) -&gt; msg) -&gt; Sub msg</code></pre></div>\n<p>Let us look at the <a href=\"https://github.com/flq/elmorse/blob/8db340ed97ffe00ae075d7cca4236962b8336570/src/StateStorage.elm#L18-L26\">subscription</a>{:target=\"_blank\"}.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import Json.Decode as D exposing (int, string, float, list, Decoder)\n\nappStateLoaded : Sub Msg\nappStateLoaded =\n  let\n    getModel json = case (D.decodeValue modelDecoder json) of\n      Ok m -&gt; Just m\n      Err _ -&gt; Nothing\n    retrieval (key, json) =\n      OnAppStateLoaded (getModel json)\n  in\n    objectRetrieved retrieval</code></pre></div>\n<p>Using <a href=\"https://github.com/flq/elmorse/blob/8db340ed97ffe00ae075d7cca4236962b8336570/src/StateStorage.elm#L64-L69\">the decoder</a>{:target=\"_blank\"} <code class=\"language-text\">modelDecoder</code>, it is attempted to retrieve the data from local storage. The decoder\nmay fail, which should usually mean that a value has never been stored. Once the decoded model instance is available, it is piped into the system through a message (<code class=\"language-text\">OnAppStateLoaded</code>).</p>\n<p>Finally, the whole chain is triggered with the <code class=\"language-text\">loadAppStateCommand</code> inside the init function which is called right at the beginning\nof the program.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">init location =\n    let\n        currentRoute = Route.parseLocation location\n    in\n        (initialModel currentRoute, loadAppState)</code></pre></div>\n<p>with <code class=\"language-text\">loadAppState</code> being...</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">loadAppState : Cmd msg\nloadAppState = retrieveObject stateKey  </code></pre></div>\n<p>With the end result being, that when the application starts, settings will be loaded from local storage right into the model if there are settings available.</p>","fields":{"slug":"/2017/08/29/json-and-local-storage-with-elm"},"frontmatter":{"date":"August 29, 2017","path":null,"title":"Json and local storage with elm","tags":["web","programming","javascript"]}}},"pageContext":{"title":"Json and local storage with elm","previous":{"fields":{"slug":"/2017/08/21/react-redux-to-elm-feature-comparison-playing-morse-sounds","published":true},"frontmatter":{"title":"react/redux to elm feature comparison: playing morse sounds","tags":["web","programming","javascript"],"date":"2017/08/21"}},"next":{"fields":{"slug":"/2017/11/25/in-love-until-its-my-turn","published":true},"frontmatter":{"title":"In love, until it's my turn","tags":["loosely-coupled"],"date":"2017/11/25"}}}}
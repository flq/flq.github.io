{"data":{"markdownRemark":{"html":"<p>Even though there is <a href=\"https://medium.com/@amr.farid140/awesome-typescript-azure-functions-part-1-project-setup-1f5950e7a704\">some prior art to this</a>, I wanted to document my own findings when wanting to code an azure function in TypeScript. The next commands assume a powershell cli.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">mkdir</span> ts-func-demo<span class=\"token punctuation\">;</span> <span class=\"token function\">cd</span> ts-func-demo\n<span class=\"token function\">npm</span> <span class=\"token function\">install</span> func\nnpx func init</code></pre></div>\n<p>Make sure your selected worker runtime is <code class=\"language-text\">node</code>. You now are sort of on the <em>\"function host\"</em> level of things. Let's create an <em>actual</em> function.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">npx func new --language JavaScript --template HttpTrigger --name Ping\n<span class=\"token function\">cd</span> Ping\n<span class=\"token function\">rm</span> sample.dat</code></pre></div>\n<p>We are now in the \"Ping\" directory, containing an <code class=\"language-text\">index.js</code> and a <code class=\"language-text\">function.json</code> containing the binding definitions for your function. Function bindings are the Alpha and Omega of azure functions. Based on the template the index.js generated is set up to accept HTTP requests and respond to them.</p>\n<p>The next steps make sure that typescript is around as well as some more stuff that you'll need which you can read while npm is downloading parts of the internet.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> init\n<span class=\"token function\">npm</span> i --save typescript tslib\n<span class=\"token function\">npm</span> i --only<span class=\"token operator\">=</span>dev @azure/functions\nnpx tsc --init</code></pre></div>\n<ul>\n<li>We downloaded <code class=\"language-text\">tslib</code> - <code class=\"language-text\">tsc</code> compiles the typescript generated by you and tslib contains numerous helpers that are used by the generated js. E.g., as soon as you write an async function in Typescript, <strong>tslib</strong> will be required. </li>\n<li>The package <code class=\"language-text\">@azure/functions</code> contains type definitions for those things that the azure runtime provides to your code. It is <a href=\"https://github.com/Azure/Azure-Functions/issues/483\">still in beta</a></li>\n<li>Now you should have a <code class=\"language-text\">tsconfig.json</code> at your disposal which controls what the typescript compiler (tsc) will be doing.</li>\n</ul>\n<p>Here's one tsconfig.json in use for a function:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"allowSyntheticDefaultImports\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"esModuleInterop\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"module\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"commonjs\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"moduleResolution\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"node\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"target\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"es5\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"strict\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"outDir\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\".\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"forceConsistentCasingInFileNames\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"strictFunctionTypes\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"noUnusedLocals\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"rootDir\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./src\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"typeRoots\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"../node_modules/@azure\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"lib\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"es2017\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"importHelpers\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"sourceMap\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"exclude\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"bin\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"node_modules\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Defining the <code class=\"language-text\">rootDir</code> will let you keep your ts files away from the root directory. Of interest is also <code class=\"language-text\">module</code>, and possibly <code class=\"language-text\">moduleResolution</code> which should be compatible to a node environment. The <code class=\"language-text\">outDir</code> will see to the output being dropped where the <code class=\"language-text\">index.js</code> is that was generated by the template, while the <code class=\"language-text\">typeRoots</code> should also include the <code class=\"language-text\">@azure/functions</code> package. Make sure that <code class=\"language-text\">lib</code> does not include <code class=\"language-text\">dom</code> since we are programming a backend system.</p>\n<p>Now, in <code class=\"language-text\">src</code> you can implement the body of the function as <code class=\"language-text\">index.ts</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> HttpRequest<span class=\"token punctuation\">,</span> Context<span class=\"token punctuation\">,</span> Response <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@azure/functions\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">:</span> Context<span class=\"token punctuation\">,</span> req<span class=\"token punctuation\">:</span> HttpRequest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> Promise<span class=\"token operator\">&lt;</span>Response<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  context<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Demo function being called\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">[</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      res<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        status<span class=\"token punctuation\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span>\n        body<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token string\">`Hello there </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      res<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        status<span class=\"token punctuation\">:</span> <span class=\"token number\">400</span><span class=\"token punctuation\">,</span>\n        body<span class=\"token punctuation\">:</span> <span class=\"token string\">\"You need to provide a name\"</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The Return Type of the function is defined by us - you can set up additional typings to the <code class=\"language-text\">@azure/functions</code> package that support you in your coding. For example, since <code class=\"language-text\">function.json</code> sets up an output HTTP binding named \"res\", we can return to that binding as a return value of the function.</p>\n<p>We set this up by defining an own <code class=\"language-text\">az-function.d.ts</code> file, which could look like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"@azure/functions\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">declare</span> <span class=\"token keyword\">module</span> <span class=\"token string\">\"@azure/functions\"</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Response</span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      status<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n      body<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now, when you run</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npx tsc -w</code></pre></div>\n<p>It should overwrite the index.js that was generated by the template with the one compiled from typescript and run in <strong>watch mode</strong>. Once you start the func host from the root of the functions project (<code class=\"language-text\">npx func start</code>), you should be in business to try out your function!</p>\n<hr>\n<blockquote>\n<p>when this gets older and things change, be aware that this post uses</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm --version:     6.4.1\nnpx tsc --version  3.3.3333\nnpx func --version 2.3.317</code></pre></div>\n</blockquote>","fields":{"slug":"/2019/03/03/innovation-vs-improvement"},"frontmatter":{"date":"March 03, 2019","path":null,"title":"Innovation vs Improvement","tags":["software-development"]}}},"pageContext":{"title":"Innovation vs Improvement","previous":{"fields":{"slug":"/2019/02/03/typescript-type-shenanigans-2-specify-at-least-one-property"},"frontmatter":{"title":"Typescript type shenanigans 2: specify at least one property","tags":["web","typescript"],"date":"2019/02/03"}},"next":{"fields":{"slug":"/2019/02/24/writing-azure-functions-with-typescript"},"frontmatter":{"title":"Writing azure functions with typescript","tags":["web","azure","typescript"],"date":"2019/02/24"}}}}
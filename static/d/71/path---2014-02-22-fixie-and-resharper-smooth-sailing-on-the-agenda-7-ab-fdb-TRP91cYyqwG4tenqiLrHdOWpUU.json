{"data":{"markdownRemark":{"html":"<p>I was willing to have a play with <a href=\"https://github.com/plioi/fixie\">fixie</a>, a new test runner, but was unimpressed by the situation of how to get fixie tests run in resharper. Yesterday, I tried the internet again:\n<img src=\"http://i.imgur.com/B2QG8OH.png\" alt=\"search on fixie\"></p>\n<p>Right, a <a href=\"https://github.com/JohnStov/ReSharperFixieRunner\">fixie runner</a>!</p>\n<p>The readme shows a short and concise way to bring the plugin into resharper by adding a new nuget feed to the resharper extension sources (<em>Resharper -> Options &#x26; Extension Manager...</em>). Once you want to install that extension, make sure you <strong>read the readme</strong> (which I didn't, so I missed that the extension is a pre-release package and you have to make sure that you see it).</p>\n<p><img src=\"http://i.imgur.com/xirBRSA.png\" alt=\"options\"> <img src=\"http://i.imgur.com/aj47Mi2.png\" alt=\"extension manager\"></p>\n<p>Fixie is then available as a Nuget package, too, which you install into your test project. You will also need an assertion library, I took <a href=\"http://shouldly.github.io/\">Shouldly</a> (<em>which btw plays it neat in the message output, don't understand how it does it yet</em>).</p>\n<p>At first I didn't see any tests appearing in the Resharper's Unit Test explorer, this was remedied by right-clicking the project file and saying \"<em>Run Unit Tests</em>\" - lo and behold, fixie tests were running happily and I haven't looked back since on this project.</p>\n<p>Your own testing conventions also get honored by the test runner. Here, it is sufficient to put a class into your test project that derives from <strong>Convention</strong> (or, indeed <strong>DefaultConvention</strong>). I used that to have a convention on how to feed input parameters to a test method...</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">public void Distance_Correctly_Calculated(Note note1, Note note2, int distance)\n{\n    (note1 - note2).ShouldBe(distance);\n}\n\npublic static IEnumerable&lt;object[]&gt; Note1Note2DistanceSource()\n{\n    Func&lt;Note,Note,int,object[]&gt; f = (note, note1, arg3) =&gt; new object[] { note, note1, arg3 };\n    yield return f(new Note(&quot;C&quot;), new Note(&quot;D&quot;), 1);\n    yield return f(new Note(&quot;C&quot;), new Note(&quot;H&quot;), 6);\n}</code></pre></div>\n<p>This also gets correctly executed with the kind of output you'd expect...</p>\n<p><img src=\"http://i.imgur.com/vxW3W4s.png\" alt=\"test runner display\"></p>\n<p>Consider me a happy camper!</p>","fields":{"slug":"/2014/02/22/fixie-and-resharper-smooth-sailing-on-the-agenda"},"frontmatter":{"date":"February 22, 2014","path":null,"title":"fixie and resharper, smooth sailing on the Agenda.","tags":["dotnet","programming"]}}},"pageContext":{"title":"fixie and resharper, smooth sailing on the Agenda.","previous":{"fields":{"slug":"/2013/12/27/get-periodic-messages-into-membus"},"frontmatter":{"title":"Get periodic messages into MemBus","tags":["own-software","membus"],"date":"2013/12/27"}},"next":{"fields":{"slug":"/2014/10/15/the-one-where-all-the-stuff-is-put-on-github"},"frontmatter":{"title":"The one where all the stuff is put on github","tags":["meta"],"date":"2014/10/15"}}}}
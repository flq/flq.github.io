{"data":{"markdownRemark":{"html":"<p>It seemed a straightforward thing to do.</p>\n<p>Sending property changed events when a property is changed is repetitive boilerplate code that can be factored out into an aspect of your system's behaviour. This can be done with a proxy generator library like the Castle's **DynamicProxy2 **(See my first attempts playing with such a framework <a href=\"http://realfiction.net/go/154\">here</a>).</p>\n<p>The idea goes as follows: Program an <strong>IInterceptor</strong> that every time a setter of the class encapsulated by the proxy is accessed raises the <strong>PropertyChanged</strong> event as defined by the interface mentioned in the title. The basic problem is that accessing a property from the outside is OK: But what if you change the property from the inside? A basic proxy that simply surrounds the class cannot register this action, hence no event is automatically raised...</p>\n<p>The idea grew: Implement a class that is abstract. All properties defined on it are marked abstract. Then use DynamicProxy2 in the provided way that generates a proxy that inherits from your abstract class and in fact appears to \"implement\" the properties defined in the class. I am using quotes here, because there seems to be no implementation of the abstract properties available even once the proxy has been generated - don't ask me, I'll have to dig for details in the appropriate forum.</p>\n<p>However, the Interceptor registers when the setter of such a property is accessed. Provided you do not \"Proceed\" to an underlying implementation (that may not exist), you can provide an implementation of the property within the Interceptor itself. This is quite easy and in my case I just based it on a Dictionary:</p>\n<p>Dictionary&#x3C;string, object> values = new Dictionary&#x3C;string, object>();\n...\npublic void Intercept(IInvocation invocation)\n{\n...\nbool talkingToPropertySetter =\ninvocation.Method.IsSpecialName &#x26;&#x26;\ninvocation.Method.Name.StartsWith(\"set_\");\nbool talkingToPropertyGetter = ...\n...\nif (talkingToPropertyGetter)\n{\nobject output;\nvalues.TryGetValue(GetPropertyName(invocation.Method), out output);\ninvocation.ReturnValue = output;\n}\nif (talkingToPropertySetter)\n{\nvalues[GetPropertyName(invocation.Method)] = invocation.Arguments[0];\nRaisePropertyChangedEvent(invocation.InvocationTarget,\nGetPropertyName(invocation.Method));\n}\n...</p>\n<p>You can also already see how the interceptor raises the event. Indeed, the abstract class does not event need to implement the INotifyPropertyChanged interface: We can say that our proxy should implement it and simply ensure that our interceptor implements the mechanics:</p>\n<p>class PropertyInterceptor : IInterceptor\n{\nPropertyChangedEventHandler handler;\n...\npublic void Intercept(IInvocation invocation)\n{\nbool talkingToAddChangedEventHandler =\ninvocation.Method.Name == \"add_PropertyChanged\";\n...\nif (talkingToAddChangedEventHandler)\n{\nhandler += (PropertyChangedEventHandler)invocation.Arguments[0];\n}\n...\nprivate void RaisePropertyChangedEvent(object o, string notifiedProperty)\n{\nif (handler != null) handler(o, new PropertyChangedEventArgs(notifiedProperty));\n}\n}</p>\n<p>The attached solution shows the full implementation of the prototype. Basically, it works. This play-class behaves as a fully fledged class implementing INotifyPropertyChanged and raising events like the big kids do:</p>\n<p>public abstract class Person\n{\npublic abstract string FirstName { get; set; }\npublic abstract DateTime Birthdate { get; set; }</p>\n<p>public virtual void Promote()\n{\nthis.FirstName = FirstName + \" The Chief\";\n}\n}</p>\n<p>And then to get the proxy:</p>\n<p>Person p2 = new NotifyingGenerator().Create<Person>();\n((INotifyPropertyChanged)p2).PropertyChanged +=\nnew PropertyChangedEventHandler(p2_PropertyChanged);</p>\n<p>Great! On to WPF. After all, one of the main uses of such a such a class would be to bind it to some WPF UI. Here is were things go very awry.</p>\n<p>Basically, WPF needs to do reflection as well to perform the binding magic. This, however, seems to bite badly with how the proxy is generated. With a proxy like the above we very quickly get a XamlParseException due to an <a href=\"http://msdn.microsoft.com/en-us/library/system.reflection.ambiguousmatchexception.aspx\">AmbiguousMatchException</a>.</p>\n<p><strong>Unfortunate!</strong></p>\n<p>My second attempt was to make the abstract properties on Person protected, provide a public interface with equally named properties, let the proxy implement the interface on the fly, and bind all this to the WPF. Now WPF would not throw an error, but the whole implementation fails: No properties can be read, the interceptor is not invoked. WPF's reflection goes to some other place where no proxy has gone before.</p>\n<p>Epic fails are quite normal for a first shot, but looks like we need to stick to boilerplate code for now...</p>\n<p>The VS2008 solution contains both attempts, you can check for yourself. Maybe there is a solution to the issue after all. If time permits I will do some manual reflection on the proxy to try and get an AmbiguousMatchException myself, which should guide to a possible solution if there is any.</p>","fields":{"slug":"/2008/05/08/wpf-inotifypropertychanged-proxy-epic-fail"},"frontmatter":{"date":"May 08, 2008","path":null,"title":"WPF + INotifyPropertyChanged Proxy = Epic Fail!","tags":["download","dotnet","libs-and-frameworks"]}}},"pageContext":{"title":"WPF + INotifyPropertyChanged Proxy = Epic Fail!","previous":{"fields":{"slug":"/2008/05/04/is-it-alright-to-send-messages-to-null-references"},"frontmatter":{"title":"Is it alright to send messages to null references?","tags":["software-development","dotnet","patterns"],"date":"2008/05/04"}},"next":{"fields":{"slug":"/2008/05/13/lazy-instantiation-one-liner-of-instance-fields-with-the-coalesce-operator"},"frontmatter":{"title":"Lazy instantiation one-liner of instance fields with the coalesce operator","tags":["software-development","dotnet"],"date":"2008/05/13"}}}}
{"data":{"markdownRemark":{"html":"<p>Here is a simple model of a politician in Haskell, which you can use to create arbitrary politician instances.\nYou only need to provide that particular politician's body of knowledge and its individual mapping between a statement and a corresponding fallacy. The answering is already implemented.</p>\n<p><code class=\"language-text\">gist:6273665#politician.hs</code></p>\n<p>Please note that the list of fallacies is <strong>very</strong> incomplete and needs expansion. Pull request, anyone? ;)</p>","frontmatter":{"date":"August 19, 2013","path":null,"title":"Simple model of a politician in Haskell","tags":["geekdom","humour","haskell"]}}},"pageContext":{"title":"Simple model of a politician in Haskell","previous":{"fields":{"slug":"/2013/08/13/what-id-have-wished-windows-8-to-be"},"frontmatter":{"title":"What I'd have wished Windows 8 to be","tags":["windows"],"date":"2013/08/13"}},"next":{"fields":{"slug":"/2013/09/17/funspins-a-recap-of-rob-ashtons-lessons-das-intro"},"frontmatter":{"title":"FunSpIns - a recap of Rob Ashton's lessons - Das Intro","tags":["programming","haskell","fun-spin"],"date":"2013/09/17"}}}}
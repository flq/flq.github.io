{"data":{"markdownRemark":{"html":"<p>While at a client, who is doing the transition from Procedural to OO, I constantly challenge them to get rid of their if-statements. One of them asked me how to solve a problem without an if in the case of a scenario where they load a control into their windows forms which is placed centrally on the form - It looks a bit like MDI with the difference that only one control is displayed at any time. What they do is bog-standard procedural: Check whether the control count on the panel in question is greater zero, which provides the answer what to do.</p>\n<p>My answer to that was based on the state design pattern. A special 'SingleControlPanel' keeps an internal state object. One of it represents the situation where the panel is empty, the other one where the panel already carries a control. Subsequent actions are then delegated to the internal state objects. Another example of polymorphism, really. No if-statements to be seen anywhere. What is important,though, is defining the transition.</p>\n<p>Based on that I sat down for two hours drawing up a Generic State Machine that could be configured and that provides the mechanism of delegating actions to the internal state object as well as performing the transition.</p>\n<p>What I came up with was an abstract Machine class and an abstract State class.</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Machine</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">protected</span> <span class=\"token class-name\">State</span> currentState<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">State</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">protected</span> <span class=\"token class-name\">Machine</span> machine<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Hm, now people that inherit from this stuff must cast when they want to access their own machine from their own state classes and vice versa. But now we have generics, don't we? So what I now come up with looks like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Machine</span><span class=\"token operator\">&lt;</span>S<span class=\"token punctuation\">,</span>M<span class=\"token operator\">></span> <span class=\"token keyword\">where</span> S <span class=\"token punctuation\">:</span> State<span class=\"token operator\">&lt;</span>S<span class=\"token punctuation\">,</span>M<span class=\"token operator\">></span> <span class=\"token keyword\">where</span> M <span class=\"token punctuation\">:</span> Machine<span class=\"token operator\">&lt;</span>S<span class=\"token punctuation\">,</span>M<span class=\"token operator\">></span>  <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">S</span> state<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">State</span><span class=\"token operator\">&lt;</span>S<span class=\"token punctuation\">,</span>M<span class=\"token operator\">></span> <span class=\"token keyword\">where</span> S <span class=\"token punctuation\">:</span> State<span class=\"token operator\">&lt;</span>S<span class=\"token punctuation\">,</span>M<span class=\"token operator\">></span> <span class=\"token keyword\">where</span> M <span class=\"token punctuation\">:</span> Machine<span class=\"token operator\">&lt;</span>S<span class=\"token punctuation\">,</span>M<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">M</span> machine<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Looks weird, I know, but it works excellently. When you derive from these classes the type orguments are your derived State Machine and your own Base State class and off you go with pretty cast-free access to all of your code. Additionally you get a ton of type-safety - which you will see when you configure your state machine...</p>\n<p>After some hacking a first version was done. The first example I tried was of course dead simple (You need to motivate yourself with easy wins!) - A tape player which cannot even rewind (Your songs are gone, sorry). It knows a Start and a Stop state. It can change from Stop to Start and from Start to Stop. What follows is how you would implement your State Machine object with the aid of my state thingies:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">TapePlayer</span> <span class=\"token punctuation\">:</span> <span class=\"token class-name\">Machine</span><span class=\"token operator\">&lt;</span>PlayerState<span class=\"token punctuation\">,</span>TapePlayer<span class=\"token operator\">></span><span class=\"token punctuation\">,</span> IPlayerOperations <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token keyword\">void</span> <span class=\"token function\">ConfigureTransitions</span><span class=\"token punctuation\">(</span>\n    ITransitionConfig<span class=\"token operator\">&lt;</span>PlayerState<span class=\"token punctuation\">,</span>TapePlayer<span class=\"token operator\">></span> config<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      config<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddInitialState</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">StopState</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      config<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddTransition</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">StopState</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">StartState</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Play\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      config<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddTransition</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">StopState</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">StopState</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Stop\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      config<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddTransition</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">StartState</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">StopState</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Stop\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      config<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddTransition</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">StartState</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">StartState</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Play\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Play</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">Handle</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Play\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">Handle</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Stop\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The <code class=\"language-text\">IPlayerOperations</code> interface is a helper. In this simple scenario it gets implemented by all of your concrete States as well as your machine to get the method stubs quickly.</p>\n<p>So what's the deal? You can add transitions. The Type arguments specify the From-State and To-State, respectively, while the string denotes the action on which the transition is to occur. So if you call \"Play\", and your From-State is the StopState, the To-State is the PlayState. All clear?\nThe funny thing is then that in the Interface methods implemented by the TapePlayer, the action is delegated via the Handle-method. That one ensures that the correct method is being called on your State object and that the transition is done according to your configuration. The definition of the States in the configuration is type-safe: You can only provide States that derive from your own State Base class. Only the darned strings should be hated. But so far (.NET 2.0) I see no way to avoid them.\nAnyway, your state objects then look e.g. like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">    <span class=\"token keyword\">class</span> <span class=\"token class-name\">PlayerState</span> <span class=\"token punctuation\">:</span> <span class=\"token class-name\">State</span><span class=\"token operator\">&lt;</span>PlayerState<span class=\"token punctuation\">,</span>TapePlayer<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">StopState</span> <span class=\"token punctuation\">:</span> <span class=\"token class-name\">PlayerState</span><span class=\"token punctuation\">,</span> IPlayerOperations <span class=\"token punctuation\">{</span>\n\n      <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Play</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Beginning to play\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Already Stopped\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">StartState</span> <span class=\"token punctuation\">:</span> <span class=\"token class-name\">PlayerState</span><span class=\"token punctuation\">,</span> IPlayerOperations <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Play</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Already playing\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Stopping Player\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">interface</span> <span class=\"token class-name\">IPlayerOperations</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">void</span> <span class=\"token function\">Play</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">void</span> <span class=\"token function\">Stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\nSimple<span class=\"token punctuation\">,</span> sweet<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>and relatively useless so far<span class=\"token punctuation\">.</span> <span class=\"token class-name\">But</span> wait<span class=\"token punctuation\">.</span> <span class=\"token class-name\">The</span> two hours brought <span class=\"token keyword\">out</span> more code to play with<span class=\"token punctuation\">,</span> so <span class=\"token keyword\">let</span>'s check <span class=\"token keyword\">out</span> a more different example <span class=\"token operator\">-</span> <span class=\"token class-name\">The</span> Bankaccount<span class=\"token punctuation\">.</span>\nLet's look at the implemetation<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">BankAccount</span> <span class=\"token punctuation\">:</span> <span class=\"token class-name\">Machine</span><span class=\"token operator\">&lt;</span>AccountState<span class=\"token punctuation\">,</span>BankAccount<span class=\"token operator\">></span><span class=\"token punctuation\">,</span> IAccountOperations <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token keyword\">void</span> <span class=\"token function\">ConfigureTransitions</span><span class=\"token punctuation\">(</span>\n        ITransitionConfig<span class=\"token operator\">&lt;</span>AccountState<span class=\"token punctuation\">,</span>BankAccount<span class=\"token operator\">></span> config<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n        config<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddInitialState</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Standard</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        config<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddTransition</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Standard</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Transaction\"</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddBranch</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Premium</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>ConditionToBePremium<span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddBranch</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Overdrawn</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>ConditionToBeOverDrawn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        config<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddTransition</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Premium</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Transaction\"</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddBranch</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Standard</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>ConditionToBeStandard<span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddBranch</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Overdrawn</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>ConditionToBeOverDrawn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        config<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddTransition</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Overdrawn</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Transaction\"</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddBranch</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Standard</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>ConditionToBeStandard<span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddBranch</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Premium</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>ConditionToBePremium<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> Balance <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">private</span> <span class=\"token keyword\">bool</span> <span class=\"token function\">ConditionToBePremium</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BankAccount</span> ba<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> ba<span class=\"token punctuation\">.</span>Balance <span class=\"token operator\">></span> <span class=\"token number\">10000</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">private</span> <span class=\"token keyword\">bool</span> <span class=\"token function\">ConditionToBeStandard</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BankAccount</span> ba<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> ba<span class=\"token punctuation\">.</span>Balance <span class=\"token operator\">&lt;=</span> <span class=\"token number\">10000</span> <span class=\"token operator\">&amp;&amp;</span> ba<span class=\"token punctuation\">.</span>Balance <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">private</span> <span class=\"token keyword\">bool</span> <span class=\"token function\">ConditionToBeOverDrawn</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BankAccount</span> ba<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> ba<span class=\"token punctuation\">.</span>Balance <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Transaction</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> amount<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">Handle</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Transaction\"</span><span class=\"token punctuation\">,</span> amount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">AddInterest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">Handle</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"AddInterest\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\">You</span> can see that the configuration allows <span class=\"token keyword\">for</span> more complex transitions<span class=\"token punctuation\">.</span> <span class=\"token class-name\">AddTransition</span> allows to define a From<span class=\"token operator\">-</span><span class=\"token class-name\">State</span> <span class=\"token keyword\">as</span> type argument <span class=\"token keyword\">for</span> a given action and then provides sweet method chaining to <span class=\"token keyword\">add</span> branches <span class=\"token keyword\">where</span> one can specify the To<span class=\"token operator\">-</span><span class=\"token class-name\">State</span> <span class=\"token keyword\">for</span> a given condition<span class=\"token punctuation\">.</span> <span class=\"token class-name\">The</span> conditions must be provided <span class=\"token keyword\">as</span> Predicate<span class=\"token operator\">-</span>based delegates<span class=\"token punctuation\">,</span> <span class=\"token keyword\">where</span> the input parameter of those <span class=\"token keyword\">is</span> your own derived machine<span class=\"token punctuation\">.</span> <span class=\"token class-name\">In</span> the <span class=\"token keyword\">case</span> here the methods fulfilling the <span class=\"token class-name\">Predicate</span> signature are defined on the machine itself<span class=\"token punctuation\">,</span> so the parameter <span class=\"token keyword\">is</span> not necessary<span class=\"token punctuation\">,</span> but that way you are not really forced to define your conditions that way<span class=\"token punctuation\">.</span>\n\n<span class=\"token class-name\">What</span> about the <span class=\"token class-name\">States</span> that are required<span class=\"token operator\">?</span> <span class=\"token class-name\">There</span> they go<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">AccountState</span> <span class=\"token punctuation\">:</span> <span class=\"token class-name\">State</span><span class=\"token operator\">&lt;</span>AccountState<span class=\"token punctuation\">,</span>BankAccount<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">public</span> <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Transaction</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> amount<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        machine<span class=\"token punctuation\">.</span>Balance <span class=\"token operator\">+</span><span class=\"token operator\">=</span> amount<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Standard</span> <span class=\"token punctuation\">:</span> <span class=\"token class-name\">AccountState</span><span class=\"token punctuation\">,</span> IAccountOperations <span class=\"token punctuation\">{</span>\n\n      <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">AddInterest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        machine<span class=\"token punctuation\">.</span>Balance <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>machine<span class=\"token punctuation\">.</span>Balance <span class=\"token operator\">*</span> <span class=\"token number\">0.05</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Premium</span> <span class=\"token punctuation\">:</span> <span class=\"token class-name\">AccountState</span><span class=\"token punctuation\">,</span> IAccountOperations <span class=\"token punctuation\">{</span>\n\n      <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">AddInterest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        machine<span class=\"token punctuation\">.</span>Balance <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>machine<span class=\"token punctuation\">.</span>Balance <span class=\"token operator\">*</span> <span class=\"token number\">0.1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Overdrawn</span> <span class=\"token punctuation\">:</span> <span class=\"token class-name\">AccountState</span><span class=\"token punctuation\">,</span> IAccountOperations <span class=\"token punctuation\">{</span>\n\n      <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Transaction</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> amount<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>amount <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"You just cant substract any more money!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">base</span><span class=\"token punctuation\">.</span><span class=\"token function\">Transaction</span><span class=\"token punctuation\">(</span>amount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">AddInterest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Acts as debt 'interest'!</span>\n        machine<span class=\"token punctuation\">.</span>Balance <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>machine<span class=\"token punctuation\">.</span>Balance <span class=\"token operator\">*</span> <span class=\"token number\">0.1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">interface</span> <span class=\"token class-name\">IAccountOperations</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">void</span> <span class=\"token function\">Transaction</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> amount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">void</span> <span class=\"token function\">AddInterest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\">Enough</span> of that<span class=\"token punctuation\">.</span> What<span class=\"token string\">'s the point? Well, I was trying to see how nice you can go...once more I am doing a bit of Ruby and there you have things like acts_as_state_machine, a plugin that allows your Ruby class to act as ...well...a state machine. C# can'</span>t go quite <span class=\"token keyword\">as</span> pretty<span class=\"token punctuation\">,</span> but with some reflection and generics you can spruce up a relatively useful thing<span class=\"token punctuation\">.</span>\nAnyway<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>grab the solution over here<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token operator\">/</span>assets<span class=\"token operator\">/</span>StateMachine<span class=\"token punctuation\">.</span>zip<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> containing the <span class=\"token class-name\">Machine</span> code <span class=\"token keyword\">as</span> well <span class=\"token keyword\">as</span> the two examples<span class=\"token punctuation\">.</span> <span class=\"token class-name\">If</span> you find it useful<span class=\"token punctuation\">,</span> please <span class=\"token keyword\">let</span> me know<span class=\"token punctuation\">.</span></code></pre></div>","fields":{"slug":"/2007/01/22/state-design-pattern-simplified"},"frontmatter":{"date":"January 22, 2007","path":null,"title":"State design pattern, simplified?","tags":["software-development","download","dotnet"]}}},"pageContext":{"title":"State design pattern, simplified?","previous":{"fields":{"slug":"/2006/12/11/things-i-learned-about-vm-machines-today"},"frontmatter":{"title":"Things I learned about VM Machines today","tags":["software-development","technology"],"date":"2006/12/11"}},"next":{"fields":{"slug":"/2007/01/26/some-hints-on-how-different-java-generics-appear-to-be-to-net-generics"},"frontmatter":{"title":"Some hints on how different JAVA generics appear to be to .NET generics","tags":["software-development","dotnet","java"],"date":"2007/01/26"}}}}
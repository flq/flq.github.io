{"data":{"markdownRemark":{"html":"<p>My good man Andre N. pointed me to yet another geeky website:\n<a href=\"http://3.141592653589793238462643383279502884197169399375105820974944592.com/\">http://3.141592653589793238462643383279502884197169399375105820974944592.com/</a>,\nclaiming, my geek-o-meter would peak off the scale when looking at index1.html. There you have the great <a href=\"http://en.wikipedia.org/wiki/Transcendental_number\">transcendental number</a> Ï€ up to 1'000'000 digits! Bless him!</p>\n<p>Now, on a Friday evening, trying to come down from the tediousnes of implementing stuff with Oracle Forms technology, my very own geekiness comes alive - I was wondering whether I would find my name in the first million (and one) digits of PI. Of course you need to map the letters to numbers, e.g. starting from A: 0 to Z: 25.</p>\n<p>A first search with Firefox brought nothing. Of course, the page is formatted, hence it is full of newlines that will shield you from numerous potential hits.</p>\n<p>Therefore, the first step was to get the number in a usable format. The following code would do just that:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">class PiFromHtmlPage {\n  public static void Extract() {\n    using (StreamReader sr = File.OpenText(@&quot;index1.html&quot;))\n      using (StreamWriter sw = File.CreateText(@&quot;output.txt&quot;)) \n        while (!sr.EndOfStream) sw.Write(sr.ReadLine().Trim());\n  }\n}</code></pre></div>\n<p>First you need to remove the html stuff though (pre tags and the like).\nWith that in hand I wrote the program to look for my name (and of course other words). The following class does that job:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">namespace ConsoleApplication1 {\n  delegate void InfoPrinter(int idx, int offset);\n\n  class NameFinder {\n    string numbers;\n\n    public NameFinder(string numbers) {\n      this.numbers = numbers;\n    }\n\n    public void FindMatch(string name, Action&lt;string&gt; namePrint, InfoPrinter print) {\n      //unicode -&gt; int gives 97 for a :: Level to 0 by subtracting that\n      int[] nameArr = Array.ConvertAll&lt;char,int&gt;(name.ToLower().ToCharArray(), \n        delegate(char c) { return (int)c - 97; });\n      // Improve probability of finding a name a bit\n      // by offsetting each char as number of the name by what-have-you.\n\n      for (int i = 0; i &lt;= 100; i++) {\n        StringBuilder b = new StringBuilder();\n        Array.ForEach&lt;int&gt;(nameArr, delegate(int j) { b.Append(j + i); });\n        namePrint(b.ToString()); // &quot;ab&quot; with offset 1 =&gt; &quot;12&quot;\n        Regex r = new Regex(b.ToString());\n        MatchCollection mc = r.Matches(numbers, 0);\n        for (int k = 0; k &lt; mc.Count; k++) print(mc[k].Index, i);\n      }\n    }\n  }\n}</code></pre></div>\n<p>The class is instantiated with the large number PI as a string. When <em>FindMatch</em> is called, the word gets stored as an array of integers. Then several passes are done, every time each integer is offset by a fixed amount...That way one should have a slightly bigger chance of finding a word while preserving the alphabet characteristics of the word.</p>\n<p>Finally, here's the program that wraps it all up for usability:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">namespace ConsoleApplication1 {\n  class Program {\n    static void Main(string[] args) {\n      PiFromHtmlPage.Extract();\n      //pi.txt lies in bin/debug\n      string pi = string.Empty;\n      using (StreamReader sr = File.OpenText(&quot;pi.txt&quot;))\n        pi = sr.ReadToEnd();\n\n      NameFinder n = new NameFinder(pi);\n\n      while (true) {\n        Console.Write(&quot;Give us a word (write x to break): &quot;);\n        string w = Console.ReadLine();\n        if (w == &quot;x&quot;) break;\n        n.FindMatch(w,\n          delegate(string name) { Console.WriteLine(&quot;Your word now looks like &quot; + name); },\n          delegate(int idx, int offset) {\n            Console.WriteLine(&quot;name was found at index {0} with offset {1}&quot;, idx, offset);\n          });\n      }\n    }\n  }\n}</code></pre></div>\n<p>Soo, <strong>is my name in there?</strong> ...Here some findings:</p>\n<ul>\n<li>None of my names appear for any offset between 0 and 80. <em>SNIFF</em>...obviously the longer the word, the less chances there are. But with <strong>Frank</strong> I was hoping...</li>\n<li>Monsieur <strong>Andre</strong>, you'll be glad to hear that your first name DOES appear in PI, for several offsets! Way to go!</li>\n<li>The word <strong>love</strong> does not appear in PI for the first 80 offsets...unlike <strong>hate</strong>, which appears for numerous offsets. I find this depressing, and I'm kinda hoping, someone finds a bug in my code. I even ran a scan with deep offsets, ignoring the ridiculously small probability of finding love with an offset of 5000, but hey, never give up. Now I am relieved to see that the word **liebe **appears in PI.</li>\n</ul>\n<p>And in fact, the 'word' lov3 was also found. Which brings us back to Geekdom...</p>\n<p>PS...when I loaded the PI page, my processor suddenly shot up to 100% with firefox being the culprit. What was happening - the trusty ol' <a href=\"http://www.microsoft.com/technet/sysinternals/utilities/ProcessExplorer.mspx\">process explorer</a> pointed to the Skype Firefox plugin which tries to interpret numbers as phone numbers. It quite obviously became overpowered by all those numbers! :)</p>","fields":{"slug":"/2007/03/02/geek-letter-pi"},"frontmatter":{"date":"March 02, 2007","path":null,"title":"Geek Letter PI","tags":["software-development","loosely-coupled","dotnet","geekdom","mathematics"]}}},"pageContext":{"title":"Geek Letter PI","previous":{"fields":{"slug":"/2007/02/24/definition-space-pure-energy-and-entities","published":true},"frontmatter":{"title":"Definition Space, Pure Energy and Entities","tags":["sci-fi"],"date":"2007/02/24"}},"next":{"fields":{"slug":"/2007/03/10/update-to-vista-check","published":true},"frontmatter":{"title":"Update to Vista - Check!","tags":["windows"],"date":"2007/03/10"}}}}
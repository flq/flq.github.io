{"data":{"markdownRemark":{"html":"<p>Eric's <a href=\"http://ericlippert.com/2016/02/09/up-a-tree/\">latest post</a> has some more code to chew upon. Here is where we find the first slight deviations in syntax and used modules.</p>\n<h3>Generic types</h3>\n<p>the generic IntMap is defined as such...</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">type IntMap&lt;&#39;t&gt; = Map&lt;int,&#39;t&gt;</code></pre></div>\n<p>It looks like F# deviated from the unusual type argument placement in OCaml.</p>\n<h3>The bucket</h3>\n<p>for the <code class=\"language-text\">original_bytes</code> value I actually chose a <code class=\"language-text\">byte array</code></p>\n<p>In <code class=\"language-text\">read_bytes</code> it seemed more idiomatic to me to use <code class=\"language-text\">Map.tryFind</code> which returns an option value on which you can match whether something was found or not:</p>\n<div class=\"gatsby-highlight\" data-language=\"fsharp\"><pre class=\"language-fsharp\"><code class=\"language-fsharp\"><span class=\"token keyword\">match</span> Map<span class=\"token punctuation\">.</span>tryFind addr bytes<span class=\"token punctuation\">.</span>edits <span class=\"token keyword\">with</span>\n<span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span>Some value<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> value\n<span class=\"token operator\">|</span> None <span class=\"token operator\">-</span><span class=\"token operator\">></span> bytes<span class=\"token punctuation\">.</span>originalBytes<span class=\"token punctuation\">.</span><span class=\"token punctuation\">[</span>addr<span class=\"token punctuation\">]</span></code></pre></div>\n<h3>The rest</h3>\n<p>All other bits stay more or less the same.</p>\n<p>As a side note, the byte array that probably uses the .NET type for Array in the background already has an int index. I assume that such a structure is not available in OCaml. In some functional languages finding the element at index x is an O(n) operation in a typical list-like structure, that may also be the case in OCaml.</p>\n<p>The code for this post is at <a href=\"https://github.com/flq/ionized-z-machine/tree/up_a_tree\">this tag</a>.</p>","frontmatter":{"date":"February 09, 2016","path":null,"title":"Up a Free","tags":["fsharp","ionz"]}}},"pageContext":{"title":"Up a Free"}}
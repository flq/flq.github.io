{"data":{"markdownRemark":{"html":"<p>This test was driving me somewhat crazy...</p>\n <div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:812469c5-0cb0-4c63-8c15-c81123a09de7:7dac1a5d-86fa-4216-8163-f664191f1544\" class=\"wlWriterEditableSmartContent\"><pre name=\"code\" class=\"c#\">//TODO: A lot of setup noise here. Will we do similar tests again?!\nvar threadId = -2;\nvar threadIdFromTest = -1;\nIBus bus = null;\n<p>var resetEvent = new ManualResetEvent(false);</p>\n<p>var uiThread = new Thread(\n() =>\n{\nSynchronizationContext.SetSynchronizationContext(\nnew DispatcherSynchronizationContext(Dispatcher.CurrentDispatcher));\nvar frame = new DispatcherFrame();\nthreadId = Thread.CurrentThread.ManagedThreadId;\nbus = BusSetup.StartWith&#x3C;RichClientFrontend>().Construct();\nbus.Subscribe&#x3C;MessageB>(\nmsg =>\n{\nthreadIdFromTest = Thread.CurrentThread.ManagedThreadId;\nframe.Continue = false;\n},\nc => c.DispatchOnUiThread());\nresetEvent.Set();\nDispatcher.PushFrame(frame);\n});\nuiThread.Start();\nresetEvent.WaitOne();\nbus.Publish(new MessageB());\nuiThread.Join();\nthreadIdFromTest.ShouldBeEqualTo(threadId);</pre></div></p>\n<p>I want to test that a certain activity is performed on a designated thread, even if the execution of the activity happens from a different thread. This kind of functionality is needed for frontends in Windows Forms or WPF since modifications to the UI can only happen on the same thread under which all UI activities happen. </p>\n<p>When I tried running the things that are now running in their own thread in the test itself, a deadlock would occur since the call to <strong>Publish</strong> blocks, such that that the testâ€™s thread cannot be used for performing any work, which is attempted in lines 19,20. </p>\n<p>The test works, and it proves that the subscription code runs on the UI thread, but damn, is it ugly!</p>","frontmatter":{"date":"August 16, 2010","path":null,"title":"Ugly integration test&hellip;what can I do better?","tags":["software-development","dotnet","patterns"]}}},"pageContext":{"title":"Ugly integration test&hellip;what can I do better?","previous":{"fields":{"slug":"/2010/08/13/resharper-5-0-outgoing-calls-analysis-example-from-nhibernate"},"frontmatter":{"title":"Resharper 5.0 Outgoing calls analysis: Example from NHibernate","tags":["dotnet","libs-and-frameworks"],"date":"2010/08/13"}},"next":{"fields":{"slug":"/2010/08/24/introducing-membus-in-memory-publish-subscribe-messaging"},"frontmatter":{"title":"Introducing MemBus: In-Memory Publish/Subscribe Messaging","tags":["software-development","dotnet","patterns","membus"],"date":"2010/08/24"}}}}
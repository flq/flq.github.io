{"data":{"markdownRemark":{"html":"<div class=\"messages status\">This post is the first of two. While this one is introductory and collects a number of useful links if you want to use WCF to talk to everyday web-based Web APIs like those from del.icio.us, facebook or flickr, the second one (link to come) deals with the specific problem of sending something to a service that is not XML.</div>\n<p>A few weeks ago I was invited by a friend of mine to join <a href=\"http://www.facebook.com\">Facebook</a>. Fair enough, I tought, I had been looking for a nice excuse to join the system, since I had heard a number of things regarding the availability of platform functions through an API.</p>\n<p>I first looked whether there was already a <strong>C#/.NET wrapper</strong> available in order to talk to Facebook, and found <a href=\"http://camelot.homelinux.com/facebook/\">this one here</a>. While the source code is readily available (a nice touch) I wasn't too happy with what I saw (I am horribly picky when it comes to code, totally opposite to my usual \"unfussedness\") - for once I don't think one needs to rummage around in XmlDocument formed from the response and handpick the response parameters. Ever heard of deserialization? Anyway, don't get me wrong, I looked a few times into the code later on - it enabled me to compare my own endeavours to working code, which is a real gain.</p>\n<p> Furthermore, I was looking for a good excuse to learn something about <strong>WCF</strong>. There it was. Little did I know then that this would be the beginning of a 10-day tour de force into WCF (and incidentally, the facebook API).</p>\n<p>WCF (<strong>Windows Communication Foundation</strong>) is .NET 3.0's way of talking to remote resources. It follows the ABC paradigm that is also expressed in the Web Service Standards (Address, Binding, Contract). <a href=\"http://msdn2.microsoft.com/en-us/library/ms733107.aspx\">This intro to WCF Endpoints</a> explains what is more or less meant.</p>\n<p>Facebook opens up a few of its capabilities through an API. They call it <strong>RESTful</strong> - I call it weird. For once, the whole process of talking to facebook is not fully stateless. You will need to get a session. The way to get a session is fairly involved.</p>\n<ol>\n<li>Retrieve a token with a valid API key.</li>\n<li>Call a login page for the user using your application, passing along the obtained token and application key.</li>\n<li>Call a session creation with the token.</li>\n<li>Henceforth you will have to call facebook API methods passing along the obtained session key</li>\n<li>Not forgetting the added spice of security measure that an additional parameter must be sent that is all previous parameters hashed with a secret that was given to you in the beginning (and in fact is replaced when you call createSession)</li>\n<li>Phew...</li>\n</ol>\n<p>Calling facebook is always via HTTP POST, with content type <strong>application/x-www-form-urlencoded</strong>. An exception is the upload picture method that has a content type of <strong>multipart/form-data</strong>. In other words, you're submitting forms when talking to facebook. I have seen prettier things in life. For a full explanation of the facebook API, look here (<a href=\"http://developers.facebook.com/documentation.php?v=1.0&#x26;doc=\">Facebook API documentation</a>). On a sidenote, if you want to see something that I would say is a lot closer to <strong>Re</strong>presentational <strong>S</strong>tate <strong>T</strong>ransfer, check out the <a href=\"http://groups.google.com/group/twitter-development-talk/web/api-documentation\">Twitter API documentation</a>.</p>\n<p>Would WCF be able to do something so...<em>mundane</em>?</p>\n<p>With the keywords REST and WCF I found this link: <a href=\"http://staff.newtelligence.net/clemensv/PermaLink,guid,2d61b97b-3a6e-46bd-89db-b1b20499ba18.aspx\">Clemens Vasters - How to teach Indigo to do REST/POX</a>. Alas, I found it a difficult read, which is why I didn't finish it. A lot of text, a lot of code. You must excuse my current attention span, I am in desperate need of a holiday. Microsoft also had a go on the whole idea: <a href=\"http://msdn2.microsoft.com/En-US/library/aa395208.aspx\">Microsoft's take on REST and POX in WCF</a>. The one link I really read through and digested was the following: <a href=\"http://weblogs.manas.com.ar/waj/2007/05/13/rest-pox-client-with-wcf/\">Juan Wajnermann - REST/POX client with WCF</a>. Here he chooses to talk to <a href=\"http://del.icio.us\">del.icio.us</a> with WCF, a web site I really adore. Best of all, he provides a solution to download. It worked right from the spot. Not too much code, some commenting, great! The solution therefore exposed to me numerous entry points to the WCF stack.</p>\n<p>Also very useful for comprehending WCF are the <a href=\"http://msdn2.microsoft.com/en-us/library/ms751527(VS.90).aspx\">WCF samples from MSDN</a> for downloading and looking at, covering numerous aspects of WCF stack extension and customization. One of those extension points is using a <a href=\"http://msdn2.microsoft.com/en-us/library/ms751486(VS.90).aspx\">Custom Text Encoder</a>. <strike>Why we need that will be the subject of the next post.</strike> (Damn I haven't written it up still, motivate me!)</p>","frontmatter":{"date":"August 07, 2007","path":null,"title":"WCF + Facebook (break a RESTing fly on MS wheels) - Intro","tags":["software-development","dotnet","libs-and-frameworks"]}}},"pageContext":{"title":"WCF + Facebook (break a RESTing fly on MS wheels) - Intro"}}
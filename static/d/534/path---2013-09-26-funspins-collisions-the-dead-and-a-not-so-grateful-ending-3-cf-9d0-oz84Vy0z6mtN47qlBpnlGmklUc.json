{"data":{"markdownRemark":{"html":"<h2>Functional space-invaders series</h2>\n<ol>\n<li><a href=\"/2013/09/17/FunSpIns-a-recap-of-Rob-Ashtons-lessons-Das-Intro\">A recap of Rob Ashton's lessons - Das Intro</a></li>\n<li><a href=\"/2013/09/18/FunSpIns-Drawing-a-Rectangle\">Drawing a Rectangle</a></li>\n<li><a href=\"/2013/09/19/FunSpIns-Moving-a-Rectangle\">Moving a Rectangle</a></li>\n<li><a href=\"/2013/09/20/FunSpIns-No-attributes-No-vectors-A-tiny-Workflow-and-more-squares\">No attributes, No vectors, A tiny Workflow and more squares</a></li>\n<li><a href=\"/2013/09/23/FunSpIns-State-the-World-the-Loop\">State, the World, the Loop</a></li>\n<li><a href=\"/2013/09/24/FunSpIns-The-hero-must-move-the-enemies-must-move-smarter\">The hero must move, the enemies must move smarter</a></li>\n<li><a href=\"/2013/09/25/FunSpIns-The-hero-shoots\">The hero shoots</a></li>\n<li>Collisions, the dead, and a (not so) grateful ending</li>\n</ol>\n<blockquote>\n<p>Inspired by Rob Ashton's series \"[Learn functional programming with me][1]\"</p>\n</blockquote>\n<p>Without further ado, let's have a look at arguably the most important function of the game...<strong>kill</strong>!</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">kill</span> <span class=\"token operator\">::</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">WorldItem</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">[</span><span class=\"token constant\">WorldItem</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">[</span><span class=\"token constant\">WorldItem</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token constant\">WorldItem</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token constant\">WorldItem</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token hvariable\">kill</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token hvariable\">remainingShots</span> <span class=\"token hvariable\">dead</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">remainingShots</span><span class=\"token punctuation\">,</span><span class=\"token hvariable\">dead</span><span class=\"token punctuation\">)</span>\n<span class=\"token hvariable\">kill</span> <span class=\"token hvariable\">_</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token hvariable\">dead</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token hvariable\">dead</span><span class=\"token punctuation\">)</span>\n<span class=\"token hvariable\">kill</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">e</span><span class=\"token operator\">:</span><span class=\"token hvariable\">enemies</span><span class=\"token punctuation\">)</span> <span class=\"token hvariable\">shots</span> <span class=\"token hvariable\">dead</span> <span class=\"token operator\">=</span>\n\t<span class=\"token keyword\">case</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">find</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">intersect</span> <span class=\"token hvariable\">e</span><span class=\"token punctuation\">)</span> <span class=\"token hvariable\">shots</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">of</span>\n\t\t<span class=\"token constant\">Just</span> <span class=\"token hvariable\">shot</span> <span class=\"token operator\">-></span> <span class=\"token hvariable\">kill</span> <span class=\"token hvariable\">enemies</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">shots</span> <span class=\"token operator\">\\\\</span> <span class=\"token punctuation\">[</span><span class=\"token hvariable\">shot</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">dead</span><span class=\"token operator\">++</span><span class=\"token punctuation\">[</span><span class=\"token hvariable\">e</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token constant\">Nothing</span> <span class=\"token operator\">-></span> <span class=\"token hvariable\">kill</span> <span class=\"token hvariable\">enemies</span> <span class=\"token hvariable\">shots</span> <span class=\"token hvariable\">dead</span>\n<span class=\"token hvariable\">intersect</span> <span class=\"token hvariable\">wi</span> <span class=\"token hvariable\">wi</span>' <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">getRect</span> <span class=\"token hvariable\">wi</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">#</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">getRect</span> <span class=\"token hvariable\">wi</span>'<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">where</span> \n\t\t<span class=\"token punctuation\">(</span><span class=\"token operator\">#</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">Rect</span> <span class=\"token hvariable\">x</span> <span class=\"token hvariable\">y</span> <span class=\"token hvariable\">w</span> <span class=\"token hvariable\">h</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">Rect</span> <span class=\"token hvariable\">x</span>' <span class=\"token hvariable\">y</span>' <span class=\"token hvariable\">w</span>' <span class=\"token hvariable\">h</span>'<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> \n\t\t\t<span class=\"token punctuation\">(</span><span class=\"token hvariable\">y</span> <span class=\"token operator\">+</span> <span class=\"token hvariable\">h</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token hvariable\">y</span>' <span class=\"token operator\">&amp;&amp;</span> <span class=\"token hvariable\">y</span> <span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">y</span>' <span class=\"token operator\">+</span> <span class=\"token hvariable\">h</span>'<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">x</span> <span class=\"token operator\">+</span> <span class=\"token hvariable\">w</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token hvariable\">x</span>' <span class=\"token operator\">&amp;&amp;</span> <span class=\"token hvariable\">x</span> <span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">x</span>' <span class=\"token operator\">+</span> <span class=\"token hvariable\">w</span>'<span class=\"token punctuation\">)</span></code></pre></div>\n<p>It takes in all enemies, all shots and returns the shots that remain and those who died.\nOn each (recursive) iteration it takes an enemy and tries to figure out if it collides with any shot <em>(find (intersect e) shots)</em>. The intersection code is shamelessly copied from a [SDL tutorial transcribed to Haskell][2]. If a collision is detected, the shot that hit gets removed from the list of shots, and the list of the dead increases by one. Otherwise we enter the next iteration unchanged.</p>\n<p>This implementation is obviously <em>far from perfect</em> performance-wise, but it seemed good enough.  </p>\n<p>The above code is used in the <em>enemiesActor</em>. On each pass we obtain the values from the kill function...</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(shotsLeft,deadEnemies) = kill enemies (heroShots w) []</code></pre></div>\n<p>With <strong>w</strong> being the World. shotsLeft can simply be reassigned to the new World coming out of the actor. As to the dead enemies, they need to be considered when creating the enemy grid on the next render pass. For this we add the new dead to the already existing dead enemies that are also kept in the World state.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">newState = w \n    { \n      enemyPosition = requiredChange (enemyPosition w), \n      enemyMovement = snd newMovePattern,\n      heroShots = shotsLeft,\n      mIA = (mIA w) ++ deadEnemies\n    }</code></pre></div>\n<p>The enemy grid is now constructed as follows</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">enemyGrid (originX,originY) (rows, cols) = \n  (zipWith Enemy \n    [ (x,y) | x &lt;- take cols [originX,originX+60..], y &lt;- take rows [originY,originY+30..]] \n    [1..]) \\\\ (mIA w)</code></pre></div>\n<p>The <em>zipWith</em> is pretty much a zip where you need to provide a function to construct what comes out of the two lists being zipped. To remind you what <strong>Enemy</strong> is...  </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">data WorldItem = Enemy Point Int | Hero Point | Shot Point</code></pre></div>\n<p>the second list is hence just an Int that gives each enemy a unique Id. See, equality is not a given for things in a Haskell program. In order to use the <strong>\\</strong> function between two lists, the items in the list need to be equatable. In Haskell we do this by making World Items an instance of <strong>Eq</strong>.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">instance Eq WorldItem where\n  (==) (Enemy _ pos) (Enemy _ pos&#39;) = pos == pos&#39;\n  (==) (Shot p) (Shot p&#39;) = p == p&#39;\n  (==) _ _ = False</code></pre></div>\n<p>Hence, enemies are compared through their id, which allows us to remove dead enemies irrespective of their current position. Shots on the other hand are compared by their position in the world. We used that equality when removing a shot that hit an enemy from the list of shots currently flying through the world.\nThe last line is pretty much a paranoid safe guard which isn't strictly necessary. Pattern matches don't seem to have to be complete - what can happen to you is a <em>non-exhaustive pattern match</em> - exception at runtime.</p>\n<p>I didn't want to make a fully fledged game, but I at least wanted the program to exit gracefully instead of due to some exception because some list was empty or the like.</p>\n<p>Voila, the exit actor:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">exitActor :: World -&gt; (World,[WorldItem])\nexitActor w\n  | length (mIA w) == 32 = (w { lastKey = SDLK_x },[])\n  | otherwise = (w, [])</code></pre></div>\n<p>The exit condition is having 32 dead enemies. Since the program already used the x key for exiting, it seemed not a bad choice to pipe in an 'x' into the World state as if the user pressed it. This means introducing a little check in the loop:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">loop world = do \n  if (lastKey world) == SDLK_x then \n    FX.quit\n  else\n    FX.pollEvent &gt;&gt;= handleEvent\n  ...</code></pre></div>\n<p>While Rob added a few more features to his clojure space invaders I conclude the series at this point. You can find the [complete listing as a gist at github][3].</p>\n<p>What I would personally take away from this series...</p>\n<ul>\n<li>\n<p>IO has been mystified far too much in Haskell. Fair enough, sensibly building own Monads may be a different story, but using IO is mostly a straightforward thing.</p>\n</li>\n<li>\n<p>Even though the line count is not that high, there is quite some scope for improvement.</p>\n</li>\n<li>\n<p>You can go pretty far in Haskell without Monads, Monad Transformers, Applicatives, Functors and with a fairly high percentage of pure functions. Granted, I do get the feeling I am missing out on a lot of toys...</p>\n</li>\n<li>\n<p>The record syntax in Haskell is indeed somewhat clumsy, I hope to do a refactoring with Lenses, which would be a sort of Appendix blog post coming up. </p>\n<p>[1]: <a href=\"http://codeofrob.com/entries/learn-functional-programming-with-me---adding-collision-detection-to-the-game.html\">http://codeofrob.com/entries/learn-functional-programming-with-me---adding-collision-detection-to-the-game.html</a>\n[2]: <a href=\"https://github.com/snkkid/LazyFooHaskell/blob/master/lesson17/lesson17.hs#L62\">https://github.com/snkkid/LazyFooHaskell/blob/master/lesson17/lesson17.hs#L62</a>\n[3]: <a href=\"https://gist.github.com/flq/6515336\">https://gist.github.com/flq/6515336</a></p>\n</li>\n</ul>","frontmatter":{"date":"September 26, 2013","path":null,"title":"FunSpIns - Collisions, the dead, and a (not so) grateful ending.","tags":["software-development","haskell","fun-spin"]}}},"pageContext":{"title":"FunSpIns - Collisions, the dead, and a (not so) grateful ending.","previous":{"fields":{"slug":"/2013/09/25/funspins-the-hero-shoots"},"frontmatter":{"title":"FunSpIns - The hero shoots.","tags":["software-development","haskell","fun-spin"],"date":"2013/09/25"}},"next":{"fields":{"slug":"/2013/11/11/we-became-impatient"},"frontmatter":{"title":"We became impatient","tags":["loosely-coupled"],"date":"2013/11/11"}}}}
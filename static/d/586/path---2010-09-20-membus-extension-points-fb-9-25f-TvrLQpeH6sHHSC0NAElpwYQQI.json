{"data":{"markdownRemark":{"html":"<h2>ISubscription</h2>\n <div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:812469c5-0cb0-4c63-8c15-c81123a09de7:190c5896-f866-4e11-a2d6-22e44164327c\" class=\"wlWriterEditableSmartContent\"><pre name=\"code\" class=\"c#\">public interface ISubscription\n{\n    void Push(object message);\n    Type Handles { get; }\n}</pre></div>\n<p>This is the basic structure of a subscription. There is also a typed version:</p>\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:812469c5-0cb0-4c63-8c15-c81123a09de7:81de923a-f351-4572-8a38-89b394e9f86d\" class=\"wlWriterEditableSmartContent\"><pre name=\"code\" class=\"c#\">    public interface IHandles&lt;T&gt; : ISubscription\n    {\n        void Push(T message);\n    }</pre></div>\n<p>If you want to write a handler, you can inherit from the Handles class:</p>\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:812469c5-0cb0-4c63-8c15-c81123a09de7:754201c5-1a3e-4b46-bd38-411cdf29a195\" class=\"wlWriterEditableSmartContent\"><pre name=\"code\" class=\"c#\">class MsgAHandler : Handles&lt;MessageA&gt; {\n  protected override void push(MessageA msg) {\n    // Do stuff.\n  }\n}</pre></div>\n<p>How can you introduce subscriptions into MemBus apart from method-based subscriptions? In the setup, either directly through _IConfigurableBus.AddSubscription(ISubscription subscription) _or more universal by adding an implementation of </p>\n<h2>ISubscriptionResolver</h2>\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:812469c5-0cb0-4c63-8c15-c81123a09de7:00b5db25-8125-44fc-beba-b16608b85197\" class=\"wlWriterEditableSmartContent\"><pre name=\"code\" class=\"c#\">    public interface ISubscriptionResolver\n    {\n        IEnumerable&lt;ISubscription&gt; GetSubscriptionsFor(object message);\n        bool Add(ISubscription subscription);\n    }</pre></div>\n<p>A resolver must provide subscriptions for a given message and it may accept subscriptions. The boolean return value states whether the subscription was accepted or not.</p>\n<h2>IPublishPipelineMember</h2>\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:812469c5-0cb0-4c63-8c15-c81123a09de7:6cf03ad2-7dcf-4b79-a1d0-9fab2d060758\" class=\"wlWriterEditableSmartContent\"><pre name=\"code\" class=\"c#\">public class PublishToken\n{\n    public object Message { get; private set; }\n    public IEnumerable&lt;ISubscription&gt; Subscriptions { get; private set; }\n    ...\n}\n<p>public interface IPublishPipelineMember\n{\nvoid LookAt(PublishToken token);\n}</pre></div></p>\n<p>The “act” of publishing is the execution of the publish pipeline, which may consist of many pipeline members. You can participate in the publishing pipeline by implementing the above interface.</p>\n<h2>ISubscriptionShaper</h2>\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:812469c5-0cb0-4c63-8c15-c81123a09de7:74f19f0c-9a5f-45b2-bbb3-e38181d6b3b1\" class=\"wlWriterEditableSmartContent\"><pre name=\"code\" class=\"c#\">public interface ISubscriptionShaper\n{\n    ISubscription EnhanceSubscription(ISubscription subscription);\n}</pre></div>\n<p>This allows you to provide instances that “shape” subscriptions. This interface is best explained by an example:</p>\n<div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:812469c5-0cb0-4c63-8c15-c81123a09de7:a6dc4b98-2226-46c4-a370-34c556e15b9c\" class=\"wlWriterEditableSmartContent\"><pre name=\"code\" class=\"c#\">public class ShapeToFilter&lt;M&gt; : ISubscriptionShaper\n{\n    private readonly Func&lt;M, bool&gt; filter;\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">public ShapeToFilter(Func&amp;lt;M,bool&amp;gt; filter)\n{\n    this.filter = filter;\n}\n\npublic ISubscription EnhanceSubscription(ISubscription subscription)\n{\n    return new FilteredSubscription&amp;lt;M&amp;gt;(filter, subscription);\n}</code></pre></div>\n<p>}</pre></div></p>\n<p>Consider that a subscription can interact with another instance implementing ISubscription in the “Push” method. A shaper is the abstraction of enhacing an existing subscription. It is used internally for making a subscription disposable, making it filtered, making it dispatch on the UI, etc.</p>","frontmatter":{"date":"September 20, 2010","path":null,"title":"MemBus extension points","tags":["software-development","patterns","csharp","membus"]}}},"pageContext":{"title":"MemBus extension points"}}
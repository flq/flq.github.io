{"data":{"markdownRemark":{"html":"<blockquote>\n<p>The following was written by me as a comment on a <a href=\"http://lostechies.com/derickbailey/2010/09/30/monads-in-c-which-part-is-the-monad/\">post from Derick Bailey regarding Monads</a>. Since then,\nthe comments have disappeared, presumably because they moved to the disqus commenting system. While I managed to migrate my comments\nlostechies apparently is unable to do so - sad, considering that the comments on a blog post often add a lot of value.</p>\n</blockquote>\n<p>When you move on in the <a href=\"http://en.wikipedia.org/wiki/Monad_(functional_programming)\">very same wikipedia article</a> <strong>(Concepts/Definition)</strong> (<em>about monads - ed.</em>), I think it all becomes a lot clearer. A monad is defined by</p>\n<blockquote>\n<p>\"A type construction that defines, for every underlying type, how to obtain a corresponding monadic type.\"</p>\n</blockquote>\n<p>The mere ability to say that for every T you can construct a <em>Maybe(Of T)</em> should satisfy this condition.</p>\n<blockquote>\n<p>\"A unit function that maps a value in an underlying type to a value in the corresponding monadic type.\"</p>\n</blockquote>\n<p>This is quite clearly your extension method <em>\"ToMaybe()\"</em></p>\n<blockquote>\n<p>\"A binding operation of polymorphic type (M t)->(t->M u)->(M u)\"</p>\n</blockquote>\n<p>Looks weird, but check out the signature of your e.g. <em>\"If\"</em> </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Maybe&lt;TInput&gt; If&lt;TInput&gt;(this Maybe&lt;TInput&gt; maybe, Func&lt;TInput,bool&gt; func)</code></pre></div>\n<p>Input is a type of your \"nested\" monadic type system. Then comes a mapping from a non-monadic type to a monadic one. This doesn't become apparent in the function signature, but you will notice that the \"Func\" is used to construct an instance in the monadic type system. </p>\n<p>Finally the result is an instance of the Monadic type system. Hence, your \"If\" is the \"bind\" part of the monad. In this case <em>\"t\" = \"u\"</em>, but in your definition of <em>\"Get\"</em>, \"t\" and \"u\" can be different types.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Maybe&lt;TResult&gt; Get&lt;TInput, TResult&gt;(Maybe&lt;TInput&gt; maybe, Func&lt;TInput, TResult&gt; func)</code></pre></div>\n<p>Chaining comes automatically, since the output of a bind is part of the Monadic type system and you have ensured that for every type \"t\" or \"u\" (sticking to the above definition) there is a mapping to the monadic type system.</p>\n<p>As another example LINQ is \"almost\" monadic. What it has missing is a unit function from T -> IEnumerable which you can provide easy enough:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">public IEnumerable&lt;T&gt; ToEnumerable(this T obj) { yield return obj; }</code></pre></div>\n<p>You'll probably recognize that e.g. the <em>\"Select\"</em> has a very similar structure, with the monadic type system being <em>IEnumerable(Of T)</em>. Again, method chaining follows from the mere definition of a monad. It looks similar to a fluent interface but I wouldn't confuse the two, as it doesnâ€™t help and in fluent interfaces you often just return the instance on which you called the method, sparing you the use of <em>\";\"</em></p>\n<p>That's my 2 cents, almost a blog post in itself :)</p>","frontmatter":{"date":"December 04, 2011","path":null,"title":"On Monads","tags":["software-development","dotnet","haskell"]}}},"pageContext":{"title":"On Monads","previous":{"fields":{"slug":"/2011/11/27/in-built-conventions-in-fubumvc"},"frontmatter":{"title":"In-built conventions in Fubumvc","tags":["software-development","dotnet","web","libs-and-frameworks"],"date":"2011/11/27"}},"next":{"fields":{"slug":"/2011/12/05/defining-contiguous-activities-with-idisposable"},"frontmatter":{"title":"defining contiguous activities with IDisposable","tags":["software-development","dotnet","patterns","fsharp"],"date":"2011/12/05"}}}}
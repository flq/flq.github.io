{"data":{"markdownRemark":{"html":"<p>The whole “<a href=\"/go/160\">MSBuild without XML</a>“ started with the FubuMVC project using ruby for building. It quickly became apparent that one major omission of MSBuild is the lack of ability of adding “ad-hoc” code to it. Which is why MSBuild was <a href=\"/go/162\">married to PowerShell</a>.</p>\n<pre><code>gittag = `git describe --long`.chomp\ngitnumberpart = /-(\\d+)-/.match(gittag)\ngitnumber = gitnumberpart.nil? ? '0' : gitnumberpart[1]\ncommit = (ENV[\"BUILD_VCS_NUMBER\"].nil? ? `git log -1 --pretty=format:%H` : ENV[\"BUILD_VCS_NUMBER\"])\n</code></pre>\n<p>of which “gitnumber” and “commit” are used later on.</p>\n<p>Now, doing something like the above in PowerShell isn’t that difficult, but I didn’t know at first how to get two values back to MSBuild from a single script, until I remembered the following construct in PowerShell.</p>\n<pre><code>PS C:\\Users\\flq> $a = @{A=\"a\";B=\"b\"}\nPS C:\\Users\\flq> $a.A\na\nPS C:\\Users\\flq> $a.B\nb\nPS C:\\Users\\flq>\n</code></pre>\n<p>It turns out that PowerShell constructs a Hashtable instance from the first line and then provides some syntax sugar to access the key-value pairs with a dot-notation. Armed with this knowledge I could teach rfb to support the following script: </p>\n<pre><code>Project \"Default\"\n\n  Target \"Default\"\n    @gitInfo &#x3C;= GetGitInfo -Capture:number,commit\n    $gitnumber = %(gitInfo.number)\n    $commit = %(gitInfo.commit)\n    Message \"gitnumber $(gitnumber), commit $(commit)\"\n\n  PS:GetGitInfo &#x3C;&#x3C;END\n    cd C:\\dotnet\\dev\\github\\rfb\n    $gittag = git describe --long\n    $gitnumberpart = [System.Text.RegularExpressions.Regex]::Match($gittag, \"\\.(\\d+)\").Groups[1].Value\n    $commit = if ($env:BUILD_VCS_NUMBER -eq $null) { git log -1 --pretty=format:%H } else { $env:BUILD_VCS_NUMBER }\n    Write-Host \"$gitnumberpart and $commit\"\n    @{ number = $gitnumberpart; commit = $commit}\n  END\n</code></pre>\n<p>Some people may see it as a hack to use an item group for getting a single line, however the item group has the notion of metadata which allows for a dot-notation to access several values, which makes it a nice container to retrieve numerous values from a single PowerShell script.</p>","frontmatter":{"date":"March 19, 2010","path":null,"title":"rfb: Getting several values out of a PowerShell script","tags":["dotnet","msbuild","own-software","tools"]}}},"pageContext":{"title":"rfb: Getting several values out of a PowerShell script"}}
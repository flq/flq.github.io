{"data":{"markdownRemark":{"html":"<h3>Functional space-invaders series</h3>\n<ol>\n<li><a href=\"/2013/09/17/funspins-a-recap-of-rob-ashtons-lessons-das-intro\">A recap of Rob Ashton's lessons - Das Intro</a></li>\n<li><a href=\"/2013/09/18/funspins-drawing-a-rectangle\">Drawing a Rectangle</a></li>\n<li><a href=\"/2013/09/19/funspins-moving-a-rectangle\">Moving a Rectangle</a></li>\n<li><a href=\"/2013/09/20/funspins-no-attributes-no-vectors-a-tiny-workflow-and-more-squares\">No attributes, No vectors, A tiny Workflow and more squares</a></li>\n<li><a href=\"/2013/09/23/funspins-state-the-world-the-loop\">State, the World, the Loop</a></li>\n<li>The hero must move, the enemies must move smarter</li>\n<li><a href=\"/2013/09/25/funspins-the-hero-shoots\">The hero shoots</a></li>\n<li><a href=\"/2013/09/26/funspins-collisions-the-dead-and-a-not-so-grateful-ending\">Collisions, the dead, and a (not so) grateful ending</a></li>\n</ol>\n<blockquote>\n<p>Inspired by Rob Ashton's series \"<a href=\"http://codeofrob.com/entries/learn-functional-programming-with-me---keyboard-input-for-our-red-square.html\">Learn functional programming with me</a>\"\nIt is time to feed things back to the actors! The actor signature did change a teeny bit:</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">type Point = (Int,Int)\ndata ItemColor = White | Red | Black\ndata WorldItem = WorldItem Point ItemColor\nWorld -&gt; (World,[WorldItem])</code></pre></div>\n<p>That way we will be able to tell the rendering what colour we want our rectangles to be.</p>\n<p>So, our enemies actor becomes:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\">\t<span class=\"token hvariable\">enemiesActor</span> <span class=\"token operator\">::</span> <span class=\"token constant\">World</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">(</span><span class=\"token constant\">World</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token constant\">WorldItem</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token hvariable\">enemiesActor</span> <span class=\"token hvariable\">w</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">newState</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">enemies</span><span class=\"token punctuation\">)</span>\n\t  <span class=\"token keyword\">where</span>\n\t    <span class=\"token hvariable\">newState</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">w</span> <span class=\"token punctuation\">{</span> <span class=\"token hvariable\">enemyPosition</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">changeX</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">enemyPosition</span> <span class=\"token hvariable\">w</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n\t    <span class=\"token hvariable\">enemies</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">enemyGrid</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">enemyPosition</span> <span class=\"token hvariable\">w</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n\t    <span class=\"token hvariable\">enemyGrid</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">originX</span><span class=\"token punctuation\">,</span><span class=\"token hvariable\">originY</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">rows</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">cols</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> \n\t      <span class=\"token builtin\">map</span> <span class=\"token hvariable\">enemy</span> <span class=\"token punctuation\">[</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">x</span><span class=\"token punctuation\">,</span><span class=\"token hvariable\">y</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> <span class=\"token hvariable\">x</span> <span class=\"token operator\">&lt;-</span> <span class=\"token builtin\">take</span> <span class=\"token hvariable\">cols</span> <span class=\"token punctuation\">[</span><span class=\"token hvariable\">originX</span><span class=\"token punctuation\">,</span><span class=\"token hvariable\">originX</span><span class=\"token operator\">+</span><span class=\"token number\">60</span><span class=\"token operator\">..</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">y</span> <span class=\"token operator\">&lt;-</span> <span class=\"token builtin\">take</span> <span class=\"token hvariable\">rows</span> <span class=\"token punctuation\">[</span><span class=\"token hvariable\">originY</span><span class=\"token punctuation\">,</span><span class=\"token hvariable\">originY</span><span class=\"token operator\">+</span><span class=\"token number\">30</span><span class=\"token operator\">..</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n\t    <span class=\"token hvariable\">enemy</span> <span class=\"token hvariable\">p</span> <span class=\"token operator\">=</span> <span class=\"token constant\">WorldItem</span> <span class=\"token hvariable\">p</span> <span class=\"token constant\">White</span></code></pre></div>\n<p>changeX is a new method with a pretty simple implementation:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\">\t<span class=\"token hvariable\">changeX</span> <span class=\"token hvariable\">f</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">x</span><span class=\"token punctuation\">,</span><span class=\"token hvariable\">y</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">f</span> <span class=\"token hvariable\">x</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">y</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>From which you can conclude that (+2) is actually a function, namely adding two to whatever supports adding twos to them.</p>\n<p>Some changes where done on the loop. Indeed, there was no bail-out condition, which is introduced by checking whether 'x' is pressed.\nAlso, I don't want to react to any mouse events, hence it is sufficient to just pass on any key that is pressed by the gamer. The main and loop functions got some refactoring:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\">\t<span class=\"token hvariable\">main</span> <span class=\"token operator\">::</span> <span class=\"token constant\">IO</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token hvariable\">main</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">do</span>\n\t  <span class=\"token hvariable\">canvas</span> <span class=\"token operator\">&lt;-</span> <span class=\"token builtin\">init</span>\n\t  <span class=\"token hvariable\">loop</span> <span class=\"token operator\">$</span> <span class=\"token hvariable\">initWorld</span> <span class=\"token hvariable\">canvas</span>\n\t  <span class=\"token keyword\">where</span>\n\t    <span class=\"token builtin\">init</span> <span class=\"token operator\">=</span> <span class=\"token constant\">FX</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">init</span> <span class=\"token punctuation\">[</span><span class=\"token constant\">InitVideo</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">>></span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">FX.setVideoMode</span> <span class=\"token number\">640</span> <span class=\"token number\">480</span> <span class=\"token number\">32</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>></span> <span class=\"token hvariable\">FX.getVideoSurface</span></code></pre></div>\n<p>As you can see main is pretty much toned down to set up the SDL stuff and start looping with an initial version of our World. Loop became its own function:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\">\t<span class=\"token hvariable\">loop</span> <span class=\"token operator\">::</span> <span class=\"token constant\">World</span> <span class=\"token operator\">-></span> <span class=\"token constant\">IO</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token hvariable\">loop</span> <span class=\"token hvariable\">world</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">do</span>\n\t  <span class=\"token hvariable\">FX.pollEvent</span> <span class=\"token operator\">>>=</span> <span class=\"token hvariable\">handleEvent</span>\n\t  <span class=\"token keyword\">where</span>\n\t    <span class=\"token hvariable\">handleEvent</span> <span class=\"token hvariable\">x</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">case</span> <span class=\"token hvariable\">x</span> <span class=\"token keyword\">of</span>\n\t        <span class=\"token constant\">KeyDown</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">Keysym</span> <span class=\"token constant\">SDLK_x</span> <span class=\"token hvariable\">_</span> <span class=\"token hvariable\">_</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token hvariable\">FX.quit</span>\n\t        <span class=\"token constant\">KeyDown</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">Keysym</span> <span class=\"token hvariable\">key</span> <span class=\"token hvariable\">_</span> <span class=\"token hvariable\">_</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token hvariable\">render</span> <span class=\"token hvariable\">key</span> <span class=\"token operator\">>>=</span> <span class=\"token hvariable\">loop</span>\n\t        <span class=\"token constant\">KeyUp</span> <span class=\"token hvariable\">_</span> <span class=\"token operator\">-></span> <span class=\"token hvariable\">render</span> <span class=\"token constant\">SDLK_UNKNOWN</span> <span class=\"token operator\">>>=</span> <span class=\"token hvariable\">loop</span>\n\t        <span class=\"token hvariable\">x</span> <span class=\"token operator\">-></span> <span class=\"token hvariable\">render</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">lastKey</span> <span class=\"token hvariable\">world</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>>=</span> <span class=\"token hvariable\">loop</span>\n\t    <span class=\"token hvariable\">render</span> <span class=\"token hvariable\">e</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">do</span>\n\t      <span class=\"token keyword\">let</span> <span class=\"token hvariable\">c</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">canvas</span> <span class=\"token hvariable\">world</span>\n\t      <span class=\"token hvariable\">FX.fillRect</span> <span class=\"token hvariable\">c</span> <span class=\"token constant\">Nothing</span> <span class=\"token hvariable\">black</span>\n\t      <span class=\"token keyword\">let</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">newWorld</span><span class=\"token punctuation\">,</span><span class=\"token hvariable\">items</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">foldl</span> <span class=\"token hvariable\">runActor</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">world</span> <span class=\"token punctuation\">{</span> <span class=\"token hvariable\">lastKey</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">e</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">$</span> <span class=\"token hvariable\">actors</span> <span class=\"token hvariable\">world</span>\n\t      <span class=\"token builtin\">mapM</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">\\</span><span class=\"token hvariable\">wi</span> <span class=\"token operator\">-></span> <span class=\"token hvariable\">FX.fillRect</span> <span class=\"token hvariable\">c</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">getRect</span> <span class=\"token hvariable\">wi</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">getPixel</span> <span class=\"token hvariable\">wi</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token hvariable\">items</span>\n\t      <span class=\"token constant\">FX</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">flip</span> <span class=\"token hvariable\">c</span>\n\t      <span class=\"token hvariable\">FX.delay</span> <span class=\"token number\">40</span>\n\t      <span class=\"token builtin\">return</span> <span class=\"token hvariable\">newWorld</span>\n\t    <span class=\"token hvariable\">runActor</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">wld</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">items</span><span class=\"token punctuation\">)</span> <span class=\"token hvariable\">actor</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">newWorld</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">items</span><span class=\"token operator\">++</span><span class=\"token hvariable\">moreItems</span><span class=\"token punctuation\">)</span>\n\t      <span class=\"token keyword\">where</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">newWorld</span><span class=\"token punctuation\">,</span><span class=\"token hvariable\">moreItems</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">actor</span> <span class=\"token hvariable\">wld</span></code></pre></div>\n<p>the value of <strong>pollEvent</strong> is bound to the <strong>handleEvent</strong> function. That one is responsible for our bailout (matching on a keydown event where <strong>x</strong> is pressed), as well as keeping the loop going in any other event. </p>\n<p>One speciality is that we extract the pressed key, and in case of any other event that may come through we do as if some unknown key would have been pressed. Hence, our World now does not keep the whole SDL event, but just the last key pressed. <strong>Also</strong>, while no KeyUp event is coming along, we moving the lastKey of the previous  world on to the next. This has the nice effect that our actors will react to the keydown event as long as the given key is pressed (<em>Your keyboard will thank me!</em>). <strong>getRect</strong> and <strong>getPixel</strong> functions are helpers to map from our <strong>WorldItem</strong> into the SDL data types.</p>\n<p>Now that we have a nice key event hanging around in the <em>World</em>, let's get our hero into the equation:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\">\t<span class=\"token hvariable\">heroActor</span> <span class=\"token operator\">::</span> <span class=\"token constant\">World</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">(</span><span class=\"token constant\">World</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token constant\">WorldItem</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token hvariable\">heroActor</span> <span class=\"token hvariable\">w</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">newState</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">hero</span> <span class=\"token hvariable\">newState</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t  <span class=\"token keyword\">where</span>\n\t    <span class=\"token hvariable\">newState</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">case</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">lastKey</span> <span class=\"token hvariable\">w</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">of</span>\n\t      <span class=\"token constant\">SDLK_LEFT</span> <span class=\"token operator\">-></span> <span class=\"token hvariable\">move</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t      <span class=\"token constant\">SDLK_RIGHT</span> <span class=\"token operator\">-></span> <span class=\"token hvariable\">move</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">+</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n\t      <span class=\"token hvariable\">_</span> <span class=\"token operator\">-></span> <span class=\"token hvariable\">w</span>\n\t    <span class=\"token hvariable\">hero</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">World</span> <span class=\"token punctuation\">{</span> <span class=\"token hvariable\">heroPosition</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">p</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token constant\">WorldItem</span> <span class=\"token hvariable\">p</span> <span class=\"token constant\">Red</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n\t    <span class=\"token hvariable\">move</span> <span class=\"token hvariable\">f</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">w</span> <span class=\"token punctuation\">{</span> <span class=\"token hvariable\">heroPosition</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">changeX</span> <span class=\"token hvariable\">f</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">heroPosition</span> <span class=\"token hvariable\">w</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Depending on whether the user pressed left or right cursor key, we define the position of our hero in the World and create the corresponding <em>WorldItem</em>. I also need to match any other key, otherwise a <em>non-exhaustive pattern match</em> error will occur at runtime -  in this case we leave the world unchanged.</p>\n<h3>Enemy movement</h3>\n<p>Rob got somewhat ahead of me in that he has already sorted out the enemies moving from left to right and back, etc. - My enemies are currently edlessly wandering towards the left, leaving the screen and escaping the <em>righteous vengeance</em> of our world-defending hero.</p>\n<p>For this I introduce a new state into the world:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\">    <span class=\"token keyword\">data</span> <span class=\"token constant\">World</span> <span class=\"token operator\">=</span> <span class=\"token constant\">World</span> \n        <span class=\"token punctuation\">{</span>\n\t      <span class=\"token operator\">...</span>\n\t      <span class=\"token hvariable\">enemyMovement</span> <span class=\"token operator\">::</span> <span class=\"token constant\">MovementPattern</span><span class=\"token punctuation\">,</span>\n\t      <span class=\"token operator\">...</span>\n\t    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>where <strong>MovementPattern</strong> is defined as </p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token keyword\">type</span> <span class=\"token constant\">MovementPattern</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token constant\">Movement</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token constant\">Int</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">Int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Bool</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">data</span> <span class=\"token constant\">Movement</span> <span class=\"token operator\">=</span> <span class=\"token constant\">Rght</span> <span class=\"token operator\">|</span> <span class=\"token constant\">Dwn</span> <span class=\"token operator\">|</span> <span class=\"token constant\">Lft</span> <span class=\"token keyword\">deriving</span> <span class=\"token constant\">Show</span></code></pre></div>\n<p>A pattern is therefore a number of Tuples consisting of a movement definition and a function that evaluates to true/false based on an input of Points. The way to use the pattern is as follows:</p>\n<ul>\n<li>Extract the points from whatever <strong>WorldItem</strong>s you want to consider</li>\n<li>If the function of the first element evaluates to True, leave things as they are</li>\n<li>If the function of the first element evaluates to False, roll over the pattern - first becomes last, second becomes first.</li>\n</ul>\n<p>So I go ahead and express that code-wise:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">evaluateMovePattern</span> <span class=\"token operator\">::</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token constant\">Int</span><span class=\"token punctuation\">,</span><span class=\"token constant\">Int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-></span> <span class=\"token constant\">MovementPattern</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">(</span><span class=\"token constant\">Movement</span><span class=\"token punctuation\">,</span><span class=\"token constant\">MovementPattern</span><span class=\"token punctuation\">)</span>\n<span class=\"token hvariable\">evaluateMovePattern</span> <span class=\"token hvariable\">items</span> <span class=\"token hvariable\">pattern</span> <span class=\"token operator\">=</span> \n\t<span class=\"token keyword\">case</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">evaluate</span> <span class=\"token hvariable\">items</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">of</span>\n\t\t<span class=\"token constant\">True</span> <span class=\"token operator\">-></span> <span class=\"token hvariable\">next</span> <span class=\"token hvariable\">pattern</span>\n\t\t<span class=\"token constant\">False</span> <span class=\"token operator\">-></span> <span class=\"token hvariable\">next</span> <span class=\"token hvariable\">newPattern</span>\n\t\t<span class=\"token keyword\">where</span> \n\t\t\t<span class=\"token hvariable\">evaluate</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">snd</span> <span class=\"token operator\">$</span> <span class=\"token builtin\">head</span> <span class=\"token hvariable\">pattern</span>\n\t\t\t<span class=\"token hvariable\">next</span> <span class=\"token hvariable\">p</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">nextMove</span> <span class=\"token hvariable\">p</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">p</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token hvariable\">newPattern</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">roll</span> <span class=\"token hvariable\">pattern</span>\n\t\t\t<span class=\"token hvariable\">nextMove</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">m</span><span class=\"token operator\">:</span><span class=\"token hvariable\">ms</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">fst</span> <span class=\"token hvariable\">m</span></code></pre></div>\n<p>where <strong>fst</strong>, <strong>snd</strong> are <a href=\"http://www.haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html\">Prelude</a> functions to extract the first and second value of a tuple, respectively. roll is just <strong>roll (x:xs) = xs++[x]</strong>.\nArmed with the ability to evaluate a movement pattern, let's define one in the initialization of our World:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">initWorld</span> <span class=\"token hvariable\">canvas</span> <span class=\"token operator\">=</span> <span class=\"token constant\">World</span> \n\t<span class=\"token punctuation\">{</span> \n\t\t<span class=\"token operator\">...</span> \n\t\t<span class=\"token hvariable\">enemyMovement</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token constant\">Rght</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;=</span><span class=\"token number\">620</span><span class=\"token punctuation\">)</span><span class=\"token operator\"> . </span><span class=\"token hvariable\">maxX</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token constant\">Dwn</span><span class=\"token punctuation\">,</span><span class=\"token hvariable\">alwaysFalse</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token constant\">Lft</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token operator\">>=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\"> . </span><span class=\"token hvariable\">minX</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token constant\">Dwn</span><span class=\"token punctuation\">,</span><span class=\"token hvariable\">alwaysFalse</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token operator\">...</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">-- with ..</span>\n<span class=\"token hvariable\">getX</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Num</span> <span class=\"token hvariable\">a</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">a</span><span class=\"token punctuation\">,</span><span class=\"token hvariable\">a</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token hvariable\">a</span>\n<span class=\"token hvariable\">getX</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">x</span><span class=\"token punctuation\">,</span><span class=\"token hvariable\">_</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">x</span>\n<span class=\"token hvariable\">boundX</span> <span class=\"token hvariable\">f</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">getX</span><span class=\"token operator\"> . </span><span class=\"token punctuation\">(</span><span class=\"token hvariable\">f</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">comparing</span> <span class=\"token hvariable\">getX</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token hvariable\">maxX</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">boundX</span> <span class=\"token hvariable\">maximumBy</span>\n<span class=\"token hvariable\">minX</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">boundX</span> <span class=\"token hvariable\">minimumBy</span></code></pre></div>\n<p>Hence, the pattern is right, while the maximum X of our point cloud is smaller than 620, the one time down (alwaysFalse returns false for whatever input), then left while the smallest X of the point cloud is bigger than 0, the one time down.</p>\n<p>We can use this in our enemy actor to make sure that it moves properly throughout the screen:</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\">\t<span class=\"token hvariable\">enemiesActor</span> <span class=\"token operator\">::</span> <span class=\"token constant\">World</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">(</span><span class=\"token constant\">World</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token constant\">WorldItem</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token hvariable\">enemiesActor</span> <span class=\"token hvariable\">w</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">newState</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">enemies</span><span class=\"token punctuation\">)</span>\n\t  <span class=\"token keyword\">where</span>\n\t    <span class=\"token hvariable\">enemies</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">enemyGrid</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">enemyPosition</span> <span class=\"token hvariable\">w</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span>\n\t    <span class=\"token hvariable\">newMovePattern</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">evaluateMovePattern</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span> <span class=\"token hvariable\">getPoint</span> <span class=\"token hvariable\">enemies</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">enemyMovement</span> <span class=\"token hvariable\">w</span><span class=\"token punctuation\">)</span>\n\t    <span class=\"token hvariable\">requiredChange</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">case</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">fst</span> <span class=\"token hvariable\">newMovePattern</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">of</span>\n\t      <span class=\"token constant\">Rght</span> <span class=\"token operator\">-></span> <span class=\"token hvariable\">changeX</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">+</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n\t      <span class=\"token constant\">Lft</span> <span class=\"token operator\">-></span> <span class=\"token hvariable\">changeX</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t      <span class=\"token constant\">Dwn</span> <span class=\"token operator\">-></span> <span class=\"token hvariable\">changeY</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">+</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token hvariable\">newState</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">w</span> <span class=\"token punctuation\">{</span> <span class=\"token hvariable\">enemyPosition</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">requiredChange</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">enemyPosition</span> <span class=\"token hvariable\">w</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">enemyMovement</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">snd</span> <span class=\"token hvariable\">newMovePattern</span> <span class=\"token punctuation\">}</span>\n\t\t<span class=\"token operator\">...</span></code></pre></div>\n<p>Based on the current Movement, the enemy position is changed for the next iteration through our world.</p>\n<p>At this point in the series we have...</p>\n<ul>\n<li>A bunch of enemies that move left to right, slowly coming down</li>\n<li>A red hero that can be moved to the left and the right</li>\n</ul>\n<p>Doesn't sound terribly impressive, but the total LoC is about 117, and that from a FP noob, but we have still some way to go.</p>","frontmatter":{"date":"September 24, 2013","path":null,"title":"FunSpIns - The hero must move, the enemies must move smarter.","tags":["software-development","haskell","fun-spin"]}}},"pageContext":{"title":"FunSpIns - The hero must move, the enemies must move smarter.","previous":{"fields":{"slug":"/2013/09/23/funspins-state-the-world-the-loop"},"frontmatter":{"title":"FunSpIns - State, the World, the Loop","tags":["software-development","haskell","fun-spin"],"date":"2013/09/23"}},"next":{"fields":{"slug":"/2013/09/25/funspins-the-hero-shoots"},"frontmatter":{"title":"FunSpIns - The hero shoots.","tags":["software-development","haskell","fun-spin"],"date":"2013/09/25"}}}}
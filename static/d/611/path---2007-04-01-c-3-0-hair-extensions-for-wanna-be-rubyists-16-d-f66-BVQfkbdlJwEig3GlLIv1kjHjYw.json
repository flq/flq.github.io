{"data":{"markdownRemark":{"html":"<p>Metaprogramming and cool syntax aside, there is something in ruby that is quite sexy and will be available to the .NET world once C# 3.0 is out: Check out this sweet ruby code:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token number\">2.</span>upto <span class=\"token number\">5</span> <span class=\"token keyword\">do</span> <span class=\"token operator\">|</span>x<span class=\"token operator\">|</span>\n  puts x\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>Or here (works within your Rails environment):</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">3.weeks.ago</code></pre></div>\n<p>While the first code snippet will iterate from 2 up to 5, the second will provide you the time 3 weeks in the past from this moment in time. **Now **this is something we can provide as well in C#. For that we will have extension methods. Those are simply static methods that due to their syntax will attach themselves to the object specified. This is best explained by the following example: </p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TimeExtensions</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">TimeSelector</span> <span class=\"token function\">Weeks</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WeekSelector</span> <span class=\"token punctuation\">{</span> ReferenceValue <span class=\"token operator\">=</span> i <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">TimeSelector</span> <span class=\"token function\">Days</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DaysSelector</span> <span class=\"token punctuation\">{</span> ReferenceValue <span class=\"token operator\">=</span> i <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">TimeSelector</span> <span class=\"token function\">Years</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">YearsSelector</span> <span class=\"token punctuation\">{</span> ReferenceValue <span class=\"token operator\">=</span> i <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The trick is the **this **keyword in its umpteenth meaning: It specifies that the method (and this only works for methods) will be attached to the specified type. In other words, as soon as you reference the namespace in which the extension is defined, three methods will be added to your <em>int</em> definition. This is the same trick how bog standard arrays and collections suddenly know how to behave within LINQ expressions.</p>\n<p>Btw, another thing shown off is the new way to initialize properties of a newly instantiated object. This is a true code-lines saver, since in this simple case it means that I do not have to inherit a constructor three times if I want to allow a developer using the class to instantiate it with relevant values in a one-liner. An effective enhancement, if there ever was one.</p>\n<p>Let me show you the TimeSelector class to finalize this treat:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TimeSelector</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">protected</span> <span class=\"token class-name\">TimeSpan</span> myTimeSpan<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">internal</span> <span class=\"token keyword\">int</span> ReferenceValue <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">set</span> <span class=\"token punctuation\">{</span> myTimeSpan <span class=\"token operator\">=</span> <span class=\"token function\">MyTimeSpan</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">DateTime</span> Ago <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> DateTime<span class=\"token punctuation\">.</span>Now <span class=\"token operator\">-</span> myTimeSpan<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">DateTime</span> FromNow <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> DateTime<span class=\"token punctuation\">.</span>Now <span class=\"token operator\">+</span> myTimeSpan<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">DateTime</span> <span class=\"token function\">AgoSince</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DateTime</span> dt<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> dt <span class=\"token operator\">-</span> myTimeSpan<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">DateTime</span> <span class=\"token function\">From</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DateTime</span> dt<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> dt <span class=\"token operator\">+</span> myTimeSpan<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">protected</span> <span class=\"token keyword\">abstract</span> <span class=\"token class-name\">TimeSpan</span> <span class=\"token function\">MyTimeSpan</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> refValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">WeekSelector</span> <span class=\"token punctuation\">:</span> <span class=\"token class-name\">TimeSelector</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token class-name\">TimeSpan</span> <span class=\"token function\">MyTimeSpan</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> refValue<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TimeSpan</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span> <span class=\"token operator\">*</span> refValue<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DaysSelector</span> <span class=\"token punctuation\">:</span> <span class=\"token class-name\">TimeSelector</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token class-name\">TimeSpan</span> <span class=\"token function\">MyTimeSpan</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> refValue<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TimeSpan</span><span class=\"token punctuation\">(</span>refValue<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">YearsSelector</span> <span class=\"token punctuation\">:</span> <span class=\"token class-name\">TimeSelector</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token class-name\">TimeSpan</span> <span class=\"token function\">MyTimeSpan</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> refValue<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TimeSpan</span><span class=\"token punctuation\">(</span><span class=\"token number\">365</span> <span class=\"token operator\">*</span> refValue<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Btw, this cannot be used to open up the innards of a foreign type definition: The type to be extended is only visible through its public / internal face, respectively.</p>\n<p>Now, in your code you can do this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">using RF.Extensions.Time;\n...\nConsole.WriteLine(3.Weeks().Ago);\nConsole.WriteLine(5.Years().FromNow);\nConsole.WriteLine(19.Days().From(new DateTime(2007,1,1)));</code></pre></div>\n<p>The second example was the ability to iterate between two integers. This is also an extension to the integer type and it usage will be simplified by the concise syntax that can be used for providing inline expressions. First comes the code that enables it:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">IterationExtensions</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">IterateTo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token keyword\">int</span> start<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> end<span class=\"token punctuation\">,</span> Func<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span> modify<span class=\"token punctuation\">,</span> Action<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> action<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> prefix <span class=\"token operator\">=</span> end <span class=\"token operator\">&lt;</span> start <span class=\"token operator\">?</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> prefix <span class=\"token operator\">*</span> start<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> prefix <span class=\"token operator\">*</span> end<span class=\"token punctuation\">;</span> i <span class=\"token operator\">=</span> <span class=\"token function\">modify</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">action</span><span class=\"token punctuation\">(</span>prefix <span class=\"token operator\">*</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">IterateTo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token keyword\">int</span> start<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> end<span class=\"token punctuation\">,</span> Action<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> action<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">IterateTo</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">,</span> i <span class=\"token operator\">=</span><span class=\"token operator\">></span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This version not only allows you to iterate up and down, but also defines an overload where you can specify your own stepping in the form of a lambda expression.</p>\n<p>This stuff is used as such:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">using RF.Extensions.Iteration;\n...\n2.IterateTo(5, i =&gt; Console.WriteLine(i));\n(-10).IterateTo(-12, i =&gt; Console.WriteLine(i));\n2.IterateTo(20, c =&gt; c + 2, i =&gt; Console.WriteLine(i));</code></pre></div>\n<p>Sadly, the usage is not quite as cool as in the Ruby version, yet we have another way to express concise code. I can't wait for nice extension libraries that will provide extensions to well known objects for given scenarios. I'll probably start my own. If anyone has a nice idea that should find its way in the RF extension library, let me know.</p>","fields":{"slug":"/2007/04/01/c-3-0-hair-extensions-for-wanna-be-rubyists"},"frontmatter":{"date":"April 01, 2007","path":null,"title":"C# 3.0 - Hair extensions for wanna-be rubyists","tags":["software-development","ruby","dotnet"]}}},"pageContext":{"title":"C# 3.0 - Hair extensions for wanna-be rubyists","previous":{"fields":{"slug":"/2007/03/18/conclusion","published":true},"frontmatter":{"title":"Conclusion","tags":["sci-fi"],"date":"2007/03/18"}},"next":{"fields":{"slug":"/2007/04/03/trying-to-use-vistas-speech-recognition-to-write-a-perl-script","published":true},"frontmatter":{"title":"Trying to use Vista's speech recognition to write a Perl script","tags":["technology","humour"],"date":"2007/04/03"}}}}
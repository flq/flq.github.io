{"data":{"markdownRemark":{"html":"<p>This post was sparked by a tweet from Ryan Florence...</p>\n<blockquote class=\"twitter-tweet\" data-cards=\"hidden\" data-lang=\"en\"><p lang=\"en\" dir=\"ltr\">When I think about building a UI like the checkout process for my workshops it&#39;s impossible to imagine doing it without xstate.<br><br>The visualizer helps me write the code w/o any significant bugs or blindspots from the start.<br><br>Great job <a href=\"https://twitter.com/DavidKPiano?ref_src=twsrc%5Etfw\">@DavidKPiano</a> <a href=\"https://t.co/v4zjMtkm15\">https://t.co/v4zjMtkm15</a> <a href=\"https://t.co/RnmOTsAe5X\">pic.twitter.com/RnmOTsAe5X</a></p>&mdash; Ryan Florence (@ryanflorence) <a href=\"https://twitter.com/ryanflorence/status/1084248892072329216?ref_src=twsrc%5Etfw\">January 13, 2019</a></blockquote>\n<p>It has been some <a href=\"/2007/01/22/state-design-pattern-simplified\">quite some time</a> since I last looked at declaratively defining and executing a state machine, so I got curious and visited <a href=\"https://xstate.js.org/docs/guides/start.html\">xstate</a>.</p>\n<p>What you get access to is a library that gives you the ability to declare a state machine with a lot of features. I wanted to recreate the \"tape player\" from my post 12 years ago. COnsidering that xstate brings a lot more to the plate, I wanted the tape player to be a lot more complete than back then. The <a href=\"https://github.com/flq/test-of-xstate\">source code</a> for the final result runs as react app and can be found under my github profile.</p>\n<p>At <a href=\"https://statecharts.github.io/xstate-viz/\">statecharts.github.io</a> it is possible to visualize the state machine that you defined. For the tape player in the source code we get this:</p>\n<p><img src=\"/assets/xstate_visual.png\" alt=\"state machine visualization\"></p>\n<figcaption>And you thought a tape player is easy?</figcaption>\n<p>What you see is the states (the big boxes) and events (the small labels that start arrows) that define your state machine.</p>\n<p>The tape player is initially <em>stopped</em>. The <strong>PLAY</strong> event moves it to <em>playing</em>. Basically you can move from <em>playing</em> to <em>forwarding</em> and back to <em>playing</em>, but if you want to be <em>rewinding</em>, you need to be <em>stopped</em> first.</p>\n<p>You perform transitions by raising events. These events can be typed:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> EventId <span class=\"token operator\">=</span> <span class=\"token string\">\"PLAY\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"STOP\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"FORWARD\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"REWIND\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">TapePlayerEvent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">EventObject</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">type</span><span class=\"token punctuation\">:</span> EventId<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Then you can define your available states:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">TapePlayerStateSchema</span> <span class=\"token punctuation\">{</span>\n  states<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    stopped<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    playing<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    forwarding<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    rewinding<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> AvailableStates <span class=\"token operator\">=</span> keyof TapePlayerStateSchema<span class=\"token punctuation\">[</span><span class=\"token string\">\"states\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The state machine also allows to define a context. Here we will use it to track the tape position:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">TapePlayerContext</span> <span class=\"token punctuation\">{</span>\n  pos<span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>These three types give you a little bit of compile-time safety once you start defining the main configuration object for your state machine:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">machineBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n  MachineConfig<span class=\"token operator\">&lt;</span>TapePlayerContext<span class=\"token punctuation\">,</span> TapePlayerStateSchema<span class=\"token punctuation\">,</span> TapePlayerEvent<span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n  <span class=\"token builtin\">any</span>\n<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      id<span class=\"token punctuation\">:</span> <span class=\"token string\">\"tape player\"</span><span class=\"token punctuation\">,</span>\n      initial<span class=\"token punctuation\">:</span> <span class=\"token string\">\"stopped\"</span><span class=\"token punctuation\">,</span>\n      context<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        pos<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      states<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        rewinding<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n          onEntry<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"rewindingEffect\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n          after<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token number\">500</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n              <span class=\"token punctuation\">{</span>\n                target<span class=\"token punctuation\">:</span> <span class=\"token string\">\"rewinding\"</span><span class=\"token punctuation\">,</span>\n                cond<span class=\"token punctuation\">:</span> ctx <span class=\"token operator\">=></span> ctx<span class=\"token punctuation\">.</span>pos <span class=\"token operator\">></span> <span class=\"token number\">0</span>\n              <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n              <span class=\"token punctuation\">{</span>\n                target<span class=\"token punctuation\">:</span> <span class=\"token string\">\"stopped\"</span>\n              <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">]</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          on<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token constant\">STOP</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"stopped\"</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        stopped<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n          on<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token constant\">PLAY</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> target<span class=\"token punctuation\">:</span> <span class=\"token string\">\"playing\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token constant\">FORWARD</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"forwarding\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token constant\">REWIND</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"rewinding\"</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        playing<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n          onEntry<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"playingEffect\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n          after<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token number\">500</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n              <span class=\"token punctuation\">{</span>\n                target<span class=\"token punctuation\">:</span> <span class=\"token string\">\"playing\"</span><span class=\"token punctuation\">,</span>\n                cond<span class=\"token punctuation\">:</span> ctx <span class=\"token operator\">=></span> ctx<span class=\"token punctuation\">.</span>pos <span class=\"token operator\">&lt;</span> <span class=\"token number\">100</span>\n              <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n              <span class=\"token punctuation\">{</span>\n                target<span class=\"token punctuation\">:</span> <span class=\"token string\">\"stopped\"</span>\n              <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">]</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          on<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token constant\">FORWARD</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"forwarding\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token constant\">STOP</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"stopped\"</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        forwarding<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n          onEntry<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"forwardingEffect\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n          after<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token number\">500</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n              <span class=\"token punctuation\">{</span>\n                target<span class=\"token punctuation\">:</span> <span class=\"token string\">\"forwarding\"</span><span class=\"token punctuation\">,</span>\n                cond<span class=\"token punctuation\">:</span> ctx <span class=\"token operator\">=></span> ctx<span class=\"token punctuation\">.</span>pos <span class=\"token operator\">&lt;</span> <span class=\"token number\">100</span>\n              <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n              <span class=\"token punctuation\">{</span> target<span class=\"token punctuation\">:</span> <span class=\"token string\">\"stopped\"</span> <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">]</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          on<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token constant\">PLAY</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"playing\"</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">STOP</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"stopped\"</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      actions<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        playingEffect<span class=\"token punctuation\">,</span>\n        forwardingEffect<span class=\"token punctuation\">,</span>\n        rewindingEffect\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<figcaption>OK, that was a mouthful!</figcaption>\n<p>At the top you will find definitions for the <strong>initial state</strong> and the <strong>initial context</strong>.\nThe \"states\" property then defines all states and to which state you will transition given an event.</p>\n<p><img src=\"/assets/xstate_code1.png\" alt=\"state transition\"></p>\n<p>Then you can use an \"onEntry\" hook to specify an effect to occur when the state is entered. This is essentially a call into a function. The effects that I have defined change the <strong>pos</strong>-field of the <strong>context</strong>.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> playingEffect <span class=\"token operator\">=</span> actions<span class=\"token punctuation\">.</span>assign<span class=\"token operator\">&lt;</span>TapePlayerContext<span class=\"token punctuation\">,</span> TapePlayerEvent<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>\n  ctx <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    pos<span class=\"token punctuation\">:</span> ctx<span class=\"token punctuation\">.</span>pos <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> forwardingEffect <span class=\"token operator\">=</span> actions<span class=\"token punctuation\">.</span>assign<span class=\"token operator\">&lt;</span>TapePlayerContext<span class=\"token punctuation\">,</span> TapePlayerEvent<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>\n  ctx <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    pos<span class=\"token punctuation\">:</span> ctx<span class=\"token punctuation\">.</span>pos <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token number\">10</span> <span class=\"token operator\">-</span> ctx<span class=\"token punctuation\">.</span>pos <span class=\"token operator\">%</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> rewindingEffect <span class=\"token operator\">=</span> actions<span class=\"token punctuation\">.</span>assign<span class=\"token operator\">&lt;</span>TapePlayerContext<span class=\"token punctuation\">,</span> TapePlayerEvent<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>\n  ctx <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    pos<span class=\"token punctuation\">:</span> ctx<span class=\"token punctuation\">.</span>pos <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">.</span>pos <span class=\"token operator\">%</span> <span class=\"token number\">10</span> <span class=\"token operator\">||</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>They move the position slower or faster, depending on when those effects will take place.</p>\n<p>The final piece of the puzzle is the possibility to specify state transitions </p>","fields":{"slug":"/2019/01/30/xstate-a-typescript-state-machine-with-a-lot-of-features"},"frontmatter":{"date":"January 30, 2019","path":null,"title":"XState - a Typescript state machine with a lot of features","tags":["typescript","programming"]}}},"pageContext":{"title":"XState - a Typescript state machine with a lot of features","previous":{"fields":{"slug":"/2019/01/27/im-a-chrome-using-frontend-dev-but-want-to-use-firefox-more"},"frontmatter":{"title":"I'm a Chrome-using frontend dev, but want to use Firefox more","tags":["web","programming"],"date":"2019/01/27"}},"next":null}}
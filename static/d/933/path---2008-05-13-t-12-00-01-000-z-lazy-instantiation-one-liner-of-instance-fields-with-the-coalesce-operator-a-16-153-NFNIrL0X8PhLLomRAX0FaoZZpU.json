{"data":{"markdownRemark":{"html":"<p>It is hardly worth blogging, but...</p>\n<p>Did you know that the return value of an assignment is the assignment? i.e.</p>\n<p><code>class Person { public string Name; } ... Person p; Console.WriteLine((p = new Person()).Name);</code></p>\n<p>And did you know there is a coalesce operator since .NET 2.0 that will return the left-hand side if not null, or the right-hand side if the left-hand is null?</p>\n<p><code>a ?? b;</code></p>\n<p>If you combine these information snippets you get the modern one-liner for lazy instantiation of instance fields:</p>\n<p><code>Person p; public Person Example { get { return p ?? (p = new Person()); } }</code></p>\n<p><a href=\"http://www.dotnetkicks.com/kick/?url=http%3a%2f%2frealfiction.net%2f%3fq%3dnode%2f157\"><img src=\"http://www.dotnetkicks.com/Services/Images/KickItImageGenerator.ashx?url=http%3a%2f%2frealfiction.net%2f%3fq%3dnode%2f157&#x26;bgcolor=0000CC\" alt=\"kick it on DotNetKicks.com\"></a></p>","frontmatter":{"date":"May 13, 2008","path":null,"title":"Lazy instantiation one-liner of instance fields with the coalesce operator","tags":["software-development","dotnet"]}}},"pageContext":{"title":"Lazy instantiation one-liner of instance fields with the coalesce operator"}}
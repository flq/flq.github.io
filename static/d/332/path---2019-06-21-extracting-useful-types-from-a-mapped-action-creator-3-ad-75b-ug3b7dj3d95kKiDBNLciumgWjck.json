{"data":{"markdownRemark":{"html":"<p>The context: <strong>typescript, redux, react.</strong></p>\n<p>You may or may not know that if you dispatch a thunk (those action creators that return a function that is then processed by the <strong>redux-thunk</strong> middleware), you can actually await the dispatch and the return value from the dispatched thunk will also be returned...</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> updateSomething <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./relevantStore\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> ComponentProps <span class=\"token operator\">=</span> ReturnType<span class=\"token operator\">&lt;</span><span class=\"token keyword\">typeof</span> mapStateToProps<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> \n                             <span class=\"token keyword\">typeof</span> mapDispatchToProps <span class=\"token operator\">&amp;</span>\n                             <span class=\"token punctuation\">{</span> someId<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Component</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span><span class=\"token operator\">&lt;</span>ComponentProps<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">...</span>\n  <span class=\"token function-variable function\">update</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> someId<span class=\"token punctuation\">,</span> someState <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span>someId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">mapStateToProps</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">:</span> State<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    someState<span class=\"token punctuation\">:</span> state<span class=\"token punctuation\">.</span>someState\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> mapDispatchToProps <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  update<span class=\"token punctuation\">:</span> updateSomething\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>mapStateToProps<span class=\"token punctuation\">,</span> mapDispatchToProps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>Component<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>In this example, <strong>updateSomething</strong> is an action creator producing a thunk. We then had the situation that we were interested in the return value of said thunk (A simple boolen that states whether the update was successful or not). However, such an async action creator looks something like that:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">updateSomething</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>dispatch<span class=\"token punctuation\">:</span> Dispatcher<span class=\"token punctuation\">,</span> getState<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> State<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//Do fancy stuff</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>When this is mangled through the <code class=\"language-text\">connect</code> from <strong>react-redux</strong>, we can call the function and can await the return value of the thunk is available. That is, in Typescript terms this amounts to a function of the signature <code class=\"language-text\">(id: string) =&gt; Promise&lt;boolean&gt;</code>. Alas, the original async action creator has the signature </p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">:</span> Dispatch<span class=\"token punctuation\">,</span> getState<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> State<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Promise<span class=\"token operator\">&lt;</span>bool<span class=\"token operator\">></span></code></pre></div>\n<p>Ouf, this is definitely not the return value we want to await! </p>\n<h2>What can we do?</h2>\n<p>Let's create some helper Typescript that will extract the type</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Promise<span class=\"token operator\">&lt;</span>bool<span class=\"token operator\">></span></code></pre></div>\n<p>from</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">:</span> Dispatch<span class=\"token punctuation\">,</span> getState<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> State<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Promise<span class=\"token operator\">&lt;</span>bool<span class=\"token operator\">></span></code></pre></div>\n<p>Let's define the <strong>ThunkAction</strong>, it is the signature of the function that is returned from an async action creator, alongside the type definition(s) of such\nasync action creators:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> ThunkAction<span class=\"token operator\">&lt;</span><span class=\"token constant\">R</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">S</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">A</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Action</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> \n  <span class=\"token punctuation\">(</span>dispatch<span class=\"token punctuation\">:</span> ThunkDispatch<span class=\"token operator\">&lt;</span><span class=\"token constant\">S</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">A</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> getState<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token constant\">S</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token constant\">R</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> AsyncActionCreator1<span class=\"token operator\">&lt;</span><span class=\"token constant\">T1</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">R</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">S</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">A</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Action</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> \n  <span class=\"token punctuation\">(</span>arg1<span class=\"token punctuation\">:</span> <span class=\"token constant\">T1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> ThunkAction<span class=\"token operator\">&lt;</span><span class=\"token constant\">R</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">S</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">A</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> AsyncActionCreator2<span class=\"token operator\">&lt;</span><span class=\"token constant\">T1</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">T2</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">R</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">S</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">A</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Action</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> \n  <span class=\"token punctuation\">(</span>arg1<span class=\"token punctuation\">:</span> <span class=\"token constant\">T1</span><span class=\"token punctuation\">,</span> arg2<span class=\"token punctuation\">:</span> <span class=\"token constant\">T2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> ThunkAction<span class=\"token operator\">&lt;</span><span class=\"token constant\">R</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">S</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">A</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> AsyncActionCreator3<span class=\"token operator\">&lt;</span><span class=\"token constant\">T1</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">T2</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">T3</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">R</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">S</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">A</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Action</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> \n  <span class=\"token punctuation\">(</span>arg1<span class=\"token punctuation\">:</span> <span class=\"token constant\">T1</span><span class=\"token punctuation\">,</span> arg2<span class=\"token punctuation\">:</span> <span class=\"token constant\">T2</span><span class=\"token punctuation\">,</span> arg3<span class=\"token punctuation\">:</span> <span class=\"token constant\">T3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> ThunkAction<span class=\"token operator\">&lt;</span><span class=\"token constant\">R</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">S</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">A</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Here, we just cater for async action creators that may accept more than one argument. A max of three ought to be enough 😁.</p>\n<p>Next, we define a type whose type argument is a function, namely an async action creator which is a type definition of a function,\na function of the desired shape.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// tslint:disable-next-line:ban-types</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> BoundAsyncAction<span class=\"token operator\">&lt;</span><span class=\"token constant\">F</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Function</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> \n  <span class=\"token constant\">F</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AsyncActionCreator1</span><span class=\"token operator\">&lt;</span>infer <span class=\"token constant\">T11</span><span class=\"token punctuation\">,</span> infer <span class=\"token constant\">R1</span><span class=\"token punctuation\">,</span> unknown<span class=\"token punctuation\">,</span> <span class=\"token builtin\">any</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">:</span> <span class=\"token constant\">T11</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token constant\">R1</span>\n  <span class=\"token punctuation\">:</span> <span class=\"token constant\">F</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AsyncActionCreator2</span><span class=\"token operator\">&lt;</span>infer <span class=\"token constant\">T21</span><span class=\"token punctuation\">,</span> infer <span class=\"token constant\">T22</span><span class=\"token punctuation\">,</span> infer <span class=\"token constant\">R2</span><span class=\"token punctuation\">,</span> unknown<span class=\"token punctuation\">,</span> <span class=\"token builtin\">any</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>arg1<span class=\"token punctuation\">:</span> <span class=\"token constant\">T21</span><span class=\"token punctuation\">,</span> arg2<span class=\"token punctuation\">:</span> <span class=\"token constant\">T22</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token constant\">R2</span>\n  <span class=\"token punctuation\">:</span> <span class=\"token constant\">F</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AsyncActionCreator3</span><span class=\"token operator\">&lt;</span>infer <span class=\"token constant\">T31</span><span class=\"token punctuation\">,</span> infer <span class=\"token constant\">T32</span><span class=\"token punctuation\">,</span> infer <span class=\"token constant\">T33</span><span class=\"token punctuation\">,</span> infer <span class=\"token constant\">R3</span><span class=\"token punctuation\">,</span> unknown<span class=\"token punctuation\">,</span> <span class=\"token builtin\">any</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>arg1<span class=\"token punctuation\">:</span> <span class=\"token constant\">T31</span><span class=\"token punctuation\">,</span> arg2<span class=\"token punctuation\">:</span> <span class=\"token constant\">T32</span><span class=\"token punctuation\">,</span> arg3<span class=\"token punctuation\">:</span> <span class=\"token constant\">T33</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token constant\">R3</span>\n  <span class=\"token punctuation\">:</span> never<span class=\"token punctuation\">;</span></code></pre></div>\n<p>First we tell the linter to shut up about the function type - it is a good type constraint for the thing we want to check.\nThen we define a conditional type - this caters for the different type definitions that cater for the differing number of input arguments.\nThen, for each case we want to consider we produce the desired type definition, e.g.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">AsyncActionCreator1<span class=\"token operator\">&lt;</span><span class=\"token constant\">T11</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">R1</span><span class=\"token punctuation\">,</span> unknown<span class=\"token punctuation\">,</span> <span class=\"token builtin\">any</span><span class=\"token operator\">></span> <span class=\"token comment\">/* => becomes */</span> <span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">:</span> <span class=\"token constant\">T11</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token constant\">R1</span></code></pre></div>\n<p>Based on this type definition we can create a utility function that will do the type conversion for us:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// tslint:disable-next-line: ban-types</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> exposeReturnOfAsyncAction<span class=\"token operator\">&lt;</span><span class=\"token constant\">F</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Function</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">:</span> <span class=\"token constant\">F</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> BoundAsyncAction<span class=\"token operator\">&lt;</span><span class=\"token constant\">F</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>f <span class=\"token keyword\">as</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> BoundAsyncAction<span class=\"token operator\">&lt;</span><span class=\"token constant\">F</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>You may think that that <code class=\"language-text\">any</code> looks a bit dodgy but the correct function definition is passed to the type that is handling what type to produce from the input.\nThis means that if the passed function cannot be mapped to any of the known signatures of an AsyncActionCreator, the compiler will complain...</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> foo <span class=\"token operator\">=</span> <span class=\"token function\">exposeReturnOfAsyncAction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// TS2349: Cannot invoke an expression whose type lacks a call signature. Type 'never' has no compatible call signatures.</span></code></pre></div>\n<p>Now you can use the utility function in the example shown in the beginning to change the signature of the async action creator:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> mapDispatchToProps <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  update<span class=\"token punctuation\">:</span> <span class=\"token function\">exposeReturnOfAsyncFunction</span><span class=\"token punctuation\">(</span>updateSomething<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// and later inside the component</span>\n\nupdate <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> someId<span class=\"token punctuation\">,</span> someState <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span>someId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Signature of update: (id: string) => Promise&lt;bool></span></code></pre></div>\n<p>It is a bit of an involved type, but you only need to define it once and are then you're free to use it.</p>","fields":{"slug":"/2019/06/21/extracting-useful-types-from-a-mapped-action-creator"},"frontmatter":{"date":"June 21, 2019","path":null,"title":"Extracting useful types from a mapped action creator","tags":["programming","typescript","react"]}}},"pageContext":{"title":"Extracting useful types from a mapped action creator","previous":{"fields":{"slug":"/2019/03/12/using-typed-action-creators-with-reacts-usereducer-hook","published":true},"frontmatter":{"title":"Using typed action creators with react's useReducer hook","tags":["programming","typescript","react"],"date":"2019/03/12"}},"next":null}}
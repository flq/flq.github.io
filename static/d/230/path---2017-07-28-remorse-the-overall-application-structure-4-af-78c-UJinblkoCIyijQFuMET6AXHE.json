{"data":{"markdownRemark":{"html":"<p>Before you look at remorse, you should consider learning about the basic building blocks of a redux application:</p>\n<ul>\n<li>View components : You will find that the view in this application is stateless. You notice that in the fact that all react components are written as functions, that is, they depend on their input and other stateless functions</li>\n<li>Reducer : They reduce an action, together with the the previous state, to a new state which describes the view</li>\n<li>Actions: Every change that the UI undergoes is triggered by some action in the application. </li>\n</ul>\n<p>In the context of remorse we have trivial actions, e.g.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">forceStopTraining</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span>timer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    type<span class=\"token punctuation\">:</span> <span class=\"token string\">\"TRAINING_STOPPED\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>or complex ones (see e.g. <code class=\"language-text\">evaluateUserInput</code> in <a href=\"https://github.com/flq/remorse/blob/master/src/Training/TrainingActions.js#L79\">Training/TrainingActions.js</a>).</p>\n<p>Let's have a look at the overall structure of <a href=\"http://realfiction.net/remorse\">remorse</a>:</p>\n<p><img src=\"/public/assets/remorse-dir-structure.png\" alt=\"dir tree remorse\"></p>\n<p>Generally speaking, code is separated by feature:</p>\n<ul>\n<li><strong>Typing</strong>: Here you type &#x26; listen morse code</li>\n<li><strong>TrainingData</strong>: Shows tables and charts with regard to your progress</li>\n<li><strong>Training</strong>: Contains the training screens, <strong>Reading</strong> and <strong>Writing</strong></li>\n</ul>\n<p>One of the decisions early on was to decide whether the reading and writing screen would be different or just the same code base. The pros / cons are obvious.</p>\n<ul>\n<li>Different: The screens can easily progress independently, the danger being more boilerplate code, duplication etc.</li>\n<li>Same: Less code, but extension points with regard to the differences need to be introduced, making the code a little bit more complex.</li>\n</ul>\n<p>Since the two screens are indeed very similar at this point in time, I decided for the latter, hence the Training folder with sub folders.</p>\n<p>This means that some items require specifics, which are bundled in the <strong>Reading/Writing specifics</strong> files. Let's have a look at one:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> createTrainingActions <span class=\"token keyword\">from</span> <span class=\"token string\">\"../TrainingActions\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">...</span>\n<span class=\"token keyword\">const</span> Actions <span class=\"token operator\">=</span> <span class=\"token function\">createTrainingActions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  trainDataStorageKey<span class=\"token punctuation\">:</span> <span class=\"token constant\">APP_READ_TRAINDATA_KEY</span><span class=\"token punctuation\">,</span>\n  nextLetterProvider<span class=\"token punctuation\">,</span>\n  inputFromKey<span class=\"token punctuation\">,</span>\n  expectedInputFromCurrentTrainingSet<span class=\"token punctuation\">:</span> morseCodeToChar\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Actions<span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">createTrainingActions</code> then creates a closure and the actions it returns become bound to the training specifics, e.g.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">createTrainingActions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  trainDataStorageKey<span class=\"token punctuation\">,</span>\n  <span class=\"token operator\">...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">...</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">saveTraining</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token operator\">...</span>\n      <span class=\"token function\">storeObject</span><span class=\"token punctuation\">(</span>trainDataStorageKey<span class=\"token punctuation\">,</span> trainingData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>The training view can now get training specific actions like such:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> TrainingScreen <span class=\"token keyword\">from</span> <span class=\"token string\">\"../TrainingScreen\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> Actions <span class=\"token keyword\">from</span> <span class=\"token string\">\"./TrainingSpecifics\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> WriteTraining <span class=\"token operator\">=</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">.</span>train<span class=\"token punctuation\">.</span>currentTraining <span class=\"token operator\">||</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> Actions<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>TrainingScreen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The features are tied back together in the <code class=\"language-text\">AppReducer</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> combineReducers <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"redux\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> train <span class=\"token keyword\">from</span> <span class=\"token string\">\"./Training/TrainingReducer\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> typing <span class=\"token keyword\">from</span> <span class=\"token string\">\"./TypingScreen/TypingReducer\"</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">const</span> appReducer <span class=\"token operator\">=</span> <span class=\"token function\">combineReducers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> typing<span class=\"token punctuation\">,</span> train <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> appReducer<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Notice that there is no reducer for displaying the training data. This is because the training data screen runs independently of the redux infrastructure. This is because it is (sort of) legitimate to have the routing run independently of the redux application itself. Of course it depends on what you want to be able to do, but for this application there were no major drawbacks in doing so. So, since looking at training data is purely a readonly screen and any changes are just navigational changes, it runs without connected components (connected here means components wired up to the redux infrastructure).</p>\n<p>And finally, App.js ties the different features together:</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>BrowserRouter</span> <span class=\"token attr-name\">basename</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span>{process.env.REACT_APP_BASENAME}</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Provider</span> <span class=\"token attr-name\">store</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span>{store}</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>root<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Navigation</span> <span class=\"token punctuation\">/></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Route</span> <span class=\"token attr-name\">path</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>/typing<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">component</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span>{TypingScreen}</span> <span class=\"token punctuation\">/></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Route</span> <span class=\"token attr-name\">path</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>/test-writing-morse<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">component</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span>{WritingScreen}</span> <span class=\"token punctuation\">/></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Route</span> <span class=\"token attr-name\">path</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>/test-reading-morse<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">component</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span>{ReadingScreen}</span> <span class=\"token punctuation\">/></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Route</span> <span class=\"token attr-name\">path</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>/training-data<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">component</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span>{TrainingDataScreen}</span> <span class=\"token punctuation\">/></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Provider</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>BrowserRouter</span><span class=\"token punctuation\">></span></span></code></pre></div>","frontmatter":{"date":"July 28, 2017","path":null,"title":"remorse - the overall application structure","tags":["web","programming","react","javascript"]}}},"pageContext":{"title":"remorse - the overall application structure"}}
{"data":{"markdownRemark":{"html":"<p>Membus 1.5.0 is a kind of V2 release in that it removed a number of things that had ben marked as obsolete and also provides users with a new feature.</p>\n<h2>IOC-Adapter</h2>\n<p>The dependency to the <strong>CommonServiceLocator</strong> package has been removed, you rather implement the <strong>IocAdapter</strong>-interface whose contract is straightforward:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">IocAdapter</span>\n<span class=\"token punctuation\">{</span>\n    IEnumerable<span class=\"token operator\">&lt;</span><span class=\"token keyword\">object</span><span class=\"token operator\">></span> <span class=\"token function\">GetAllInstances</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Type</span> desiredType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Implement this interface, bridging e.g. to your DI-Container and finally use it when setting up MemBus:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">_bus <span class=\"token operator\">=</span> BusSetup\n    <span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">StartWith</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Conservative</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Apply</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">IoCSupport</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>s <span class=\"token operator\">=</span><span class=\"token operator\">></span> s<span class=\"token punctuation\">.</span><span class=\"token function\">SetAdapter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">MyAdapter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">SetHandlerInterface</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span>GimmeMsg<span class=\"token operator\">&lt;</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">Construct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>SetHandlerInterface</strong> is a new call that lets you provide an interface that your handler types implement. It expects an open generic type where the generic argument closes a <strong>single method</strong> defined on the interface that can accept one object and returns void (<em>void Foo(T msg)</em>).</p>\n<p>Previously the interface that had to be implemented was fixed and provided by MemBus. The change means that there is a whole new category of classes that can be called by MemBus but <strong>do not</strong> take a direct dependency on it, since they implement an interface that you provide.</p>\n<h2>Flexible subscribing</h2>\n<p>The flexible subscription adapter has received an extension that allows you to subscribe methods that return either an object or as a special case an <strong>IEnumerable</strong>.</p>\n<p>In both cases, MemBus will take the <strong>return value and either publish it back</strong> on the Bus again, or will enumerate the return value and <strong>publish every yielded object</strong> on the Bus.</p>\n<p>Taking an example from the tests:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">var</span> bus <span class=\"token operator\">=</span> BusSetup\n            <span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">StartWith</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Conservative</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Apply</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">FlexibleSubscribeAdapter</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>\n            c <span class=\"token operator\">=</span><span class=\"token operator\">></span> c<span class=\"token punctuation\">.</span><span class=\"token function\">ByMethodName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Handle\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">PublishMethods</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Route\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">Construct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>And a subscriber may look like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Controller</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">View</span> <span class=\"token function\">Route</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Input</span> msg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">View</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\nbus<span class=\"token punctuation\">.</span><span class=\"token function\">Subscribe</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Controller</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Now, when publishing a new Input instance, the <strong>Route</strong>-method will be called and the return value will subsequently be delivered to any subscribers of the <strong>View</strong>-Type.</p>\n<p>This should open up a new set of scenarios where you have methods that publish a new message based on a different one. This scenario can now be implemented <strong>without</strong> taking a direct dependency to MemBus.</p>","frontmatter":{"date":"March 22, 2012","path":null,"title":"membus v2 news","tags":["own-software","dotnet","membus"]}}},"pageContext":{"title":"membus v2 news","previous":{"fields":{"slug":"/2012/03/05/extending-caliburn-micros-view-location-strategy"},"frontmatter":{"title":"Extending Caliburn-Micro's view location strategy","tags":["software-development","patterns","libs-and-frameworks"],"date":"2012/03/05"}},"next":{"fields":{"slug":"/2012/03/23/strengtening-caliburn-micro-conversion-capabilities-with-scal"},"frontmatter":{"title":"Strengtening Caliburn.Micro conversion capabilities with Scal","tags":["own-software","dotnet","csharp","WPF","libs-and-frameworks"],"date":"2012/03/23"}}}}
---
import { CollectionEntry, getCollection, getEntryBySlug } from "astro:content";
import Layout from "../../layouts/main.astro";
import Date from "../../components/Date.astro";
import Tags from "../../components/Tags.astro";

import Tweet from "../../components/mdx/Tweet.astro";
import YouTubeEmbed from "../../components/mdx/YouTubeEmbed.astro";
import Info from "../../components/mdx/Info.astro";
import Alpha from "../../components/mdx/Alpha.astro";
import Beta from "../../components/mdx/Beta.astro";
import TopicToc from "../../components/mdx/TopicToc.astro";
import GHEmbed from "../../components/mdx/GHEmbed.astro";
import Gist from "../../components/mdx/Gist.astro";
import Math from "../../components/mdx/Math.astro";
import { byDateAscending, windowIterator } from "../../components/utils";

export interface Props {
  entry: CollectionEntry<"blog">;
  previous: { slug: string; title: string } | undefined;
  next: { slug: string; title: string } | undefined;
}

export async function getStaticPaths() {
  const blogEntries = await getCollection("blog");
  function* create(entries: CollectionEntry<"blog">[]) {
    for (let [entry, prev, next] of windowIterator(entries)) {
      yield {
        params: { slug: entry.slug },
        props: {
          entry,
          previous: prev
            ? { slug: `/posts/${prev.slug}`, title: prev.data.title }
            : undefined,
          next: next
            ? { slug: `/posts/${next.slug}`, title: next.data.title }
            : undefined,
        },
      };
    }
  }

  return Array.from(
    create(
      blogEntries.sort(byDateAscending)
    )
  );
}
const { entry, previous, next } = Astro.props;
const {
  Content,
  remarkPluginFrontmatter: { excerpt },
} = await entry.render();
---

<style>
  header {
    display: grid;
    grid-template-rows: auto auto;
    grid-template-columns: auto auto;
    column-gap: 0.25rem;
    font-size: 1.2rem;
    margin-bottom: 2rem;
  }

  h1 {
    grid-row: 1;
    grid-column: 1;
    margin: 0;
  }

  .date {
    grid-column: 2;
    grid-row: 1;
    justify-self: end;
  }

  nav.bottom {
    margin-top: 2rem;
    display: grid;
    grid-template-columns: 1fr 1fr;
    column-gap: 2rem;
  }

  nav.bottom a {
    font-size: 1rem;
    padding: 0.5rem 1rem;
    text-decoration: none;
    border: 1px solid var(--linkColor);
  }

  a[data-previous] {
    border-bottom-left-radius: 20px;
    border-top-left-radius: 20px;
  }

  a[data-next] {
    justify-self: stretch;
    text-align: right;
    border-bottom-right-radius: 20px;
    border-top-right-radius: 20px;
  }
</style>

<Layout
  title={entry.data.title}
  meta={[
    { name: "keywords", content: entry.data.tags.join(", ") },
    { name: "og:title", content: entry.data.title },
    { name: "og:description", content: excerpt },
  ]}
>
  <article>
    <header>
      <Date usage="page" class="date" date={entry.data.date} />
      <h1>{entry.data.title}</h1>
      <Tags tags={entry.data.tags} />
    </header>
    <Content
      components={{
        Tweet,
        YouTubeEmbed,
        Info,
        Alpha,
        Beta,
        TopicToc,
        GHEmbed,
        Gist,
        Math,
      }}
    />
  </article>
  {
    (previous || next) && (
      <nav class="bottom">
        {previous && (
          <a data-previous href={previous.slug}>
            {previous.title}
          </a>
        )}
        {next && (
          <a data-next href={next.slug}>
            {next.title}
          </a>
        )}
      </nav>
    )
  }
</Layout>
